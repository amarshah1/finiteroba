(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () nat)
(declare-fun x3 () nat)
(declare-fun x4 () nat)
(declare-fun x5 () nat)
(declare-fun x6 () list)
(declare-fun x7 () list)
(declare-fun x8 () list)
(declare-fun x9 () list)
(declare-fun x10 () list)
(declare-fun x11 () tree)
(declare-fun x12 () tree)
(declare-fun x13 () tree)
(declare-fun x14 () tree)
(declare-fun x15 () tree)

(assert (and (and (and (and (and (and (and (and (= (ite ((_ is succ) (ite (is-leaf (leaf x3)) (data (leaf x3)) zero)) (pred (ite (is-leaf (leaf x3)) (data (leaf x3)) zero)) zero) (ite (is-leaf (leaf x1)) (data (leaf x1)) zero)) (= (ite ((_ is node) (leaf x5)) (children (leaf x5)) null) (ite ((_ is node) x14) (children x14) null))) (not (= (ite (is-cons x10) (cdr x10) null) x7))) (not (= x5 zero))) (not (= (ite ((_ is succ) x3) (pred x3) zero) zero))) (not (= x13 x11))) (not ((_ is null) (ite (is-cons x8) (cdr x8) null)))) (= x8 x9)) ((_ is zero) x3)))
(check-sat)
(exit)


