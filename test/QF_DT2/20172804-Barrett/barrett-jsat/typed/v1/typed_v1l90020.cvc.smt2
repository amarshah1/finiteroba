(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () list)
(declare-fun x3 () tree)

(assert (and (and (and (and (and (and (and (and (= x3 (ite ((_ is cons) (ite ((_ is cons) (cons (node (cons x3 (cons x3 (cons (ite ((_ is cons) (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (car (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (leaf zero)) (cons (leaf zero) (ite ((_ is node) (ite ((_ is cons) x2) (car x2) (leaf zero))) (children (ite ((_ is cons) x2) (car x2) (leaf zero))) null)))))) x2)) (cdr (cons (node (cons x3 (cons x3 (cons (ite ((_ is cons) (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (car (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (leaf zero)) (cons (leaf zero) (ite ((_ is node) (ite ((_ is cons) x2) (car x2) (leaf zero))) (children (ite ((_ is cons) x2) (car x2) (leaf zero))) null)))))) x2)) null)) (car (ite ((_ is cons) (cons (node (cons x3 (cons x3 (cons (ite ((_ is cons) (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (car (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (leaf zero)) (cons (leaf zero) (ite ((_ is node) (ite ((_ is cons) x2) (car x2) (leaf zero))) (children (ite ((_ is cons) x2) (car x2) (leaf zero))) null)))))) x2)) (cdr (cons (node (cons x3 (cons x3 (cons (ite ((_ is cons) (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (car (ite ((_ is node) (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) (children (leaf (succ (ite ((_ is succ) zero) (pred zero) zero)))) null)) (leaf zero)) (cons (leaf zero) (ite ((_ is node) (ite ((_ is cons) x2) (car x2) (leaf zero))) (children (ite ((_ is cons) x2) (car x2) (leaf zero))) null)))))) x2)) null)) (leaf zero))) ((_ is zero) zero)) (= (ite ((_ is cons) (cons (leaf (ite ((_ is leaf) (leaf (succ (succ (ite ((_ is succ) (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) (pred (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) zero))))) (data (leaf (succ (succ (ite ((_ is succ) (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) (pred (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) zero))))) zero)) (cons (node (ite ((_ is node) x3) (children x3) null)) x2))) (car (cons (leaf (ite ((_ is leaf) (leaf (succ (succ (ite ((_ is succ) (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) (pred (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) zero))))) (data (leaf (succ (succ (ite ((_ is succ) (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) (pred (succ (ite ((_ is leaf) (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) (data (ite ((_ is cons) (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero))) zero))) zero))))) zero)) (cons (node (ite ((_ is node) x3) (children x3) null)) x2))) (leaf zero)) (ite ((_ is cons) (cons (leaf (succ x1)) (ite ((_ is cons) (cons (leaf (ite ((_ is succ) (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) (pred (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) zero)) (cons (node x2) (cons (node null) (cons (node null) (cons (ite ((_ is cons) null) (car null) (leaf zero)) null)))))) (cdr (cons (leaf (ite ((_ is succ) (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) (pred (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) zero)) (cons (node x2) (cons (node null) (cons (node null) (cons (ite ((_ is cons) null) (car null) (leaf zero)) null)))))) null))) (car (cons (leaf (succ x1)) (ite ((_ is cons) (cons (leaf (ite ((_ is succ) (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) (pred (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) zero)) (cons (node x2) (cons (node null) (cons (node null) (cons (ite ((_ is cons) null) (car null) (leaf zero)) null)))))) (cdr (cons (leaf (ite ((_ is succ) (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) (pred (ite ((_ is succ) (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) (pred (ite ((_ is leaf) (node (ite ((_ is cons) x2) (cdr x2) null))) (data (node (ite ((_ is cons) x2) (cdr x2) null))) zero)) zero)) zero)) (cons (node x2) (cons (node null) (cons (node null) (cons (ite ((_ is cons) null) (car null) (leaf zero)) null)))))) null))) (leaf zero)))) (not ((_ is null) (ite ((_ is cons) (ite ((_ is node) (leaf zero)) (children (leaf zero)) null)) (cdr (ite ((_ is node) (leaf zero)) (children (leaf zero)) null)) null)))) (= x3 (leaf x1))) (not (= zero (ite ((_ is leaf) (node x2)) (data (node x2)) zero)))) (= (ite ((_ is succ) (ite ((_ is leaf) x3) (data x3) zero)) (pred (ite ((_ is leaf) x3) (data x3) zero)) zero) (succ x1))) (not ((_ is null) (cons x3 null)))) ((_ is null) null)))
(check-sat)
(exit)


