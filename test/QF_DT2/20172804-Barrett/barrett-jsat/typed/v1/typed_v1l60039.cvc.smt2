(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () list)
(declare-fun x3 () tree)

(assert (and (and (and (and (and (not (= (node (ite ((_ is cons) x2) (cdr x2) null)) (node (ite ((_ is node) (leaf zero)) (children (leaf zero)) null)))) (not (= (succ zero) x1))) (= (ite ((_ is cons) (cons (leaf (ite ((_ is succ) (ite (is-leaf (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) (data (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) zero)) (pred (ite (is-leaf (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) (data (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) zero)) zero)) (cons x3 (ite ((_ is node) (node (cons (ite ((_ is cons) (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (car (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (leaf zero)) null))) (children (node (cons (ite ((_ is cons) (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (car (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (leaf zero)) null))) null)))) (car (cons (leaf (ite ((_ is succ) (ite (is-leaf (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) (data (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) zero)) (pred (ite (is-leaf (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) (data (leaf (succ (succ (ite ((_ is succ) zero) (pred zero) zero))))) zero)) zero)) (cons x3 (ite ((_ is node) (node (cons (ite ((_ is cons) (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (car (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (leaf zero)) null))) (children (node (cons (ite ((_ is cons) (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (car (cons (ite ((_ is cons) x2) (car x2) (leaf zero)) x2)) (leaf zero)) null))) null)))) (leaf zero)) (leaf (ite (is-leaf (ite ((_ is cons) null) (car null) (leaf zero))) (data (ite ((_ is cons) null) (car null) (leaf zero))) zero)))) (not (= zero (ite (is-leaf (node (cons (leaf x1) (ite ((_ is node) (node null)) (children (node null)) null)))) (data (node (cons (leaf x1) (ite ((_ is node) (node null)) (children (node null)) null)))) zero)))) (= (ite ((_ is cons) (ite ((_ is cons) (ite ((_ is cons) (ite ((_ is node) (node null)) (children (node null)) null)) (cdr (ite ((_ is node) (node null)) (children (node null)) null)) null)) (cdr (ite ((_ is cons) (ite ((_ is node) (node null)) (children (node null)) null)) (cdr (ite ((_ is node) (node null)) (children (node null)) null)) null)) null)) (car (ite ((_ is cons) (ite ((_ is cons) (ite ((_ is node) (node null)) (children (node null)) null)) (cdr (ite ((_ is node) (node null)) (children (node null)) null)) null)) (cdr (ite ((_ is cons) (ite ((_ is node) (node null)) (children (node null)) null)) (cdr (ite ((_ is node) (node null)) (children (node null)) null)) null)) null)) (leaf zero)) (node (ite ((_ is cons) (cons (node x2) null)) (cdr (cons (node x2) null)) null)))) (= null null)))
(check-sat)
(exit)


