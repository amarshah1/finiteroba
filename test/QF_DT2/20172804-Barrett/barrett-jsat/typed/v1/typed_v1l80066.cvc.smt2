(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () list)
(declare-fun x3 () tree)

(assert (and (and (and (and (and (and (and (is-leaf x3) (= null (cons x3 (cons x3 (ite (is-cons (ite ((_ is node) x3) (children x3) null)) (cdr (ite ((_ is node) x3) (children x3) null)) null))))) (not ((_ is node) x3))) (is-leaf x3)) (not (is-cons (cons (leaf (succ zero)) null)))) (not (= (node (ite (is-cons (ite (is-cons x2) (cdr x2) null)) (cdr (ite (is-cons x2) (cdr x2) null)) null)) (node x2)))) (not (= (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null) (cons (leaf x1) (ite ((_ is node) (ite (is-cons (ite (is-cons (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) (cdr (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) null)) (car (ite (is-cons (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) (cdr (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) null)) (leaf zero))) (children (ite (is-cons (ite (is-cons (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) (cdr (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) null)) (car (ite (is-cons (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) (cdr (ite (is-cons (cons x3 (ite (is-cons null) (cdr null) null))) (cdr (cons x3 (ite (is-cons null) (cdr null) null))) null)) null)) (leaf zero))) null))))) (= zero zero)))
(check-sat)
(exit)


