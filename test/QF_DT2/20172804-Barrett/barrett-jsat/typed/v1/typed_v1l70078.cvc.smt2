(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () list)
(declare-fun x3 () tree)

(assert (and (and (and (and (and (and (= null x2) (not (= (ite (is-cons (ite (is-cons (ite ((_ is node) x3) (children x3) null)) (cdr (ite ((_ is node) x3) (children x3) null)) null)) (car (ite (is-cons (ite ((_ is node) x3) (children x3) null)) (cdr (ite ((_ is node) x3) (children x3) null)) null)) (leaf zero)) x3))) (not (= null x2))) (= (leaf x1) (node (cons (ite (is-cons (cons x3 (cons (ite (is-cons (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero)) (cons x3 null)))) (car (cons x3 (cons (ite (is-cons (ite ((_ is node) x3) (children x3) null)) (car (ite ((_ is node) x3) (children x3) null)) (leaf zero)) (cons x3 null)))) (leaf zero)) null)))) (= x3 (node null))) (not (= (succ zero) (ite (is-leaf x3) (data x3) zero)))) (not ((_ is null) (cons (node (cons (leaf (succ (ite (is-leaf (node (cons (node x2) (cons (ite (is-cons null) (car null) (leaf zero)) (ite ((_ is node) x3) (children x3) null))))) (data (node (cons (node x2) (cons (ite (is-cons null) (car null) (leaf zero)) (ite ((_ is node) x3) (children x3) null))))) zero))) x2)) (ite (is-cons (cons x3 (cons (node (ite ((_ is node) (ite (is-cons (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (car (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (leaf zero))) (children (ite (is-cons (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (car (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (leaf zero))) null)) (ite (is-cons (cons (ite (is-cons x2) (car x2) (leaf zero)) null)) (cdr (cons (ite (is-cons x2) (car x2) (leaf zero)) null)) null)))) (cdr (cons x3 (cons (node (ite ((_ is node) (ite (is-cons (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (car (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (leaf zero))) (children (ite (is-cons (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (car (ite (is-cons (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) (cdr (ite ((_ is node) (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) (children (node (ite ((_ is node) (ite (is-cons null) (car null) (leaf zero))) (children (ite (is-cons null) (car null) (leaf zero))) null))) null)) null)) (leaf zero))) null)) (ite (is-cons (cons (ite (is-cons x2) (car x2) (leaf zero)) null)) (cdr (cons (ite (is-cons x2) (car x2) (leaf zero)) null)) null)))) null))))))
(check-sat)
(exit)


