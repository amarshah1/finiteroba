(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () nat)
(declare-fun x3 () list)
(declare-fun x4 () list)
(declare-fun x5 () tree)
(declare-fun x6 () tree)

(assert (and (and (and (and (and ((_ is zero) x1) (= (ite ((_ is node) (ite (is-cons x3) (car x3) (leaf zero))) (children (ite (is-cons x3) (car x3) (leaf zero))) null) x4)) (not (= (ite (is-cons (cons (ite (is-cons x4) (car x4) (leaf zero)) (ite ((_ is node) (leaf zero)) (children (leaf zero)) null))) (car (cons (ite (is-cons x4) (car x4) (leaf zero)) (ite ((_ is node) (leaf zero)) (children (leaf zero)) null))) (leaf zero)) x5))) (= x2 (succ (ite ((_ is succ) zero) (pred zero) zero)))) (= (leaf (ite ((_ is succ) (succ (succ x1))) (pred (succ (succ x1))) zero)) (leaf (succ (succ (ite (is-leaf x5) (data x5) zero)))))) (not (= x5 (ite (is-cons (cons (ite (is-cons (ite ((_ is node) (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) (children (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) null)) (car (ite ((_ is node) (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) (children (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) null)) (leaf zero)) (cons (leaf (succ x2)) null))) (car (cons (ite (is-cons (ite ((_ is node) (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) (children (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) null)) (car (ite ((_ is node) (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) (children (node (cons (ite (is-cons (ite ((_ is node) (node x3)) (children (node x3)) null)) (car (ite ((_ is node) (node x3)) (children (node x3)) null)) (leaf zero)) x4))) null)) (leaf zero)) (cons (leaf (succ x2)) null))) (leaf zero))))))
(check-sat)
(exit)


