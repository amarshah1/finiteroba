(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () nat)
(declare-fun x3 () list)
(declare-fun x4 () list)
(declare-fun x5 () tree)
(declare-fun x6 () tree)

(assert (and (and (and (and (and (= x3 (cons (leaf x1) (cons (node (ite (is-cons (cons (ite (is-cons (cons (leaf (ite (is-leaf (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) (data (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) zero)) null)) (car (cons (leaf (ite (is-leaf (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) (data (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) zero)) null)) (leaf zero)) x3)) (cdr (cons (ite (is-cons (cons (leaf (ite (is-leaf (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) (data (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) zero)) null)) (car (cons (leaf (ite (is-leaf (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) (data (leaf (succ (succ (ite (is-leaf (leaf (succ (succ x2)))) (data (leaf (succ (succ x2)))) zero))))) zero)) null)) (leaf zero)) x3)) null)) (cons x5 (ite ((_ is node) (node (ite ((_ is node) (node x3)) (children (node x3)) null))) (children (node (ite ((_ is node) (node x3)) (children (node x3)) null))) null))))) (not (= (ite (is-cons (ite ((_ is node) (leaf x2)) (children (leaf x2)) null)) (cdr (ite ((_ is node) (leaf x2)) (children (leaf x2)) null)) null) (ite ((_ is node) x6) (children x6) null)))) ((_ is null) null)) (not (= x5 x6))) (is-leaf x6)) (= (cons x6 x3) (cons x5 x3))))
(check-sat)
(exit)


