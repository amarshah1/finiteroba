(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Random, converted to v2.6 by CVC4
Application: Regressions for datatypes decision procedure.
Target solver: CVC3
Publications: "An Abstract Decision Procedure for Satisfiability in the Theory of Inductive Data Types" by Clark Barrett, Igor Shikanian, and Cesare Tinelli, Journal on Satisfiability, Boolean Modeling and Computation 2007.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unsat)


(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () nat)
(declare-fun x3 () list)
(declare-fun x4 () list)
(declare-fun x5 () tree)
(declare-fun x6 () tree)

(assert (and (and (and (and (and (and (and (and (not ((_ is succ) x2)) ((_ is node) (leaf x2))) (not ((_ is zero) (ite (is-leaf (leaf zero)) (data (leaf zero)) zero)))) (not ((_ is null) (cons (node null) (ite ((_ is node) x6) (children x6) null))))) (not (= (ite (is-cons (ite (is-cons x3) (cdr x3) null)) (car (ite (is-cons x3) (cdr x3) null)) (leaf zero)) (ite (is-cons null) (car null) (leaf zero))))) (= (ite ((_ is node) (ite (is-cons (cons (leaf x1) (ite (is-cons (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) (cdr (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) null))) (car (cons (leaf x1) (ite (is-cons (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) (cdr (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) null))) (leaf zero))) (children (ite (is-cons (cons (leaf x1) (ite (is-cons (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) (cdr (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) null))) (car (cons (leaf x1) (ite (is-cons (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) (cdr (ite ((_ is node) (node (ite (is-cons x3) (cdr x3) null))) (children (node (ite (is-cons x3) (cdr x3) null))) null)) null))) (leaf zero))) null) (ite (is-cons (cons x6 x3)) (cdr (cons x6 x3)) null))) (= (node (ite ((_ is node) (leaf (ite (is-leaf x6) (data x6) zero))) (children (leaf (ite (is-leaf x6) (data x6) zero))) null)) x5)) (not (is-cons (cons (node (ite (is-cons (ite (is-cons (cons (leaf (ite (is-leaf (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) (data (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) zero)) x3)) (cdr (cons (leaf (ite (is-leaf (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) (data (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) zero)) x3)) null)) (cdr (ite (is-cons (cons (leaf (ite (is-leaf (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) (data (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) zero)) x3)) (cdr (cons (leaf (ite (is-leaf (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) (data (node (cons (leaf (succ (succ x1))) (ite (is-cons (cons x6 (cons x6 x4))) (cdr (cons x6 (cons x6 x4))) null)))) zero)) x3)) null)) null)) (cons x6 x4))))) ((_ is null) (ite ((_ is node) (ite (is-cons (cons (node null) (cons (ite (is-cons null) (car null) (leaf zero)) x4))) (car (cons (node null) (cons (ite (is-cons null) (car null) (leaf zero)) x4))) (leaf zero))) (children (ite (is-cons (cons (node null) (cons (ite (is-cons null) (car null) (leaf zero)) x4))) (car (cons (node null) (cons (ite (is-cons null) (car null) (leaf zero)) x4))) (leaf zero))) null))))
(check-sat)
(exit)


