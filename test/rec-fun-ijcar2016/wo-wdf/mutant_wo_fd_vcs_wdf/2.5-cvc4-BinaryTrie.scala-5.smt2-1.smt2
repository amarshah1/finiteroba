(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Tree!929 0)) (((Leaf!930) (Node!931 (nvalue!932 (_ BitVec 32)) (left!933 Tree!929) (right!934 Tree!929)))
))
(declare-datatypes ((IList!935 0)) (((Cons!936 (head!937 (_ BitVec 32)) (tail!938 IList!935)) (Nil!939))
))
(declare-fun error_value!940 () (_ BitVec 32))
(declare-fun height!209 (Tree!929) (_ BitVec 32))
(declare-fun error_value!941 () Tree!929)
(declare-fun error_value!942 () Tree!929)
(declare-fun error_value!943 () Tree!929)
(declare-fun error_value!944 () (_ BitVec 32))
(declare-fun insert!212 (IList!935 Tree!929) Tree!929)
(declare-fun listSize!206 (IList!935) (_ BitVec 32))
(declare-fun error_value!945 () Tree!929)
(declare-fun error_value!946 () Tree!929)
(declare-fun error_value!947 () Tree!929)
(declare-sort I_height!209 0)
(declare-fun height!209_arg_0_1 (I_height!209) Tree!929)
(declare-sort I_insert!212 0)
(declare-fun insert!212_arg_0_2 (I_insert!212) IList!935)
(declare-fun insert!212_arg_1_3 (I_insert!212) Tree!929)
(declare-sort I_listSize!206 0)
(declare-fun listSize!206_arg_0_4 (I_listSize!206) IList!935)
(assert (forall ((?i I_height!209)) (and (= (ite ((_ is Leaf!930) (height!209_arg_0_1 ?i)) (_ bv0 32) (ite ((_ is Node!931) (height!209_arg_0_1 ?i)) (ite (bvslt (height!209 (right!934 (height!209_arg_0_1 ?i))) (height!209 (left!933 (height!209_arg_0_1 ?i)))) (bvadd (height!209 (left!933 (height!209_arg_0_1 ?i))) (_ bv1 32)) (bvadd (height!209 (right!934 (height!209_arg_0_1 ?i))) (_ bv1 32))) error_value!940)) (height!209 (height!209_arg_0_1 ?i))) (ite ((_ is Leaf!930) (height!209_arg_0_1 ?i)) true (ite ((_ is Node!931) (height!209_arg_0_1 ?i)) (and (not (forall ((?z I_height!209)) (not (= (height!209_arg_0_1 ?z) (right!934 (height!209_arg_0_1 ?i)))) )) (not (forall ((?z I_height!209)) (not (= (height!209_arg_0_1 ?z) (left!933 (height!209_arg_0_1 ?i)))) )) (ite (bvslt (height!209 (right!934 (height!209_arg_0_1 ?i))) (height!209 (left!933 (height!209_arg_0_1 ?i)))) (not (forall ((?z I_height!209)) (not (= (height!209_arg_0_1 ?z) (left!933 (height!209_arg_0_1 ?i)))) )) (not (forall ((?z I_height!209)) (not (= (height!209_arg_0_1 ?z) (right!934 (height!209_arg_0_1 ?i)))) )))) true))) ))
(assert (forall ((?i I_insert!212)) (and (= (insert!212 (insert!212_arg_0_2 ?i) (insert!212_arg_1_3 ?i)) (ite ((_ is Leaf!930) (insert!212_arg_1_3 ?i)) (ite ((_ is Nil!939) (insert!212_arg_0_2 ?i)) (insert!212_arg_1_3 ?i) (ite ((_ is Cons!936) (insert!212_arg_0_2 ?i)) (ite ((_ is Leaf!930) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930)) (Node!931 (head!937 (insert!212_arg_0_2 ?i)) Leaf!930 Leaf!930) (ite ((_ is Node!931) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930)) (ite (bvslt (_ bv0 32) (nvalue!932 (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930))) (Node!931 (head!937 (insert!212_arg_0_2 ?i)) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930) Leaf!930) (Node!931 (nvalue!932 (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930)) Leaf!930 (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930))) error_value!941)) error_value!942)) (ite ((_ is Node!931) (insert!212_arg_1_3 ?i)) (ite ((_ is Nil!939) (insert!212_arg_0_2 ?i)) (insert!212_arg_1_3 ?i) (ite (and ((_ is Nil!939) (tail!938 (insert!212_arg_0_2 ?i))) ((_ is Cons!936) (insert!212_arg_0_2 ?i))) (insert!212_arg_1_3 ?i) (ite (and ((_ is Cons!936) (tail!938 (insert!212_arg_0_2 ?i))) ((_ is Cons!936) (insert!212_arg_0_2 ?i))) (ite (bvslt (_ bv0 32) (head!937 (tail!938 (insert!212_arg_0_2 ?i)))) (Node!931 (nvalue!932 (insert!212_arg_1_3 ?i)) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) (ite (bvslt (_ bv0 32) (head!937 (tail!938 (insert!212_arg_0_2 ?i)))) (left!933 (insert!212_arg_1_3 ?i)) (right!934 (insert!212_arg_1_3 ?i)))) (right!934 (insert!212_arg_1_3 ?i))) (Node!931 (nvalue!932 (insert!212_arg_1_3 ?i)) (left!933 (insert!212_arg_1_3 ?i)) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) (ite (bvslt (_ bv0 32) (head!937 (tail!938 (insert!212_arg_0_2 ?i)))) (left!933 (insert!212_arg_1_3 ?i)) (right!934 (insert!212_arg_1_3 ?i)))))) (insert!212_arg_1_3 ?i)))) error_value!943))) (ite ((_ is Leaf!930) (insert!212_arg_1_3 ?i)) (ite ((_ is Nil!939) (insert!212_arg_0_2 ?i)) true (ite ((_ is Cons!936) (insert!212_arg_0_2 ?i)) (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (ite ((_ is Leaf!930) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930)) true (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (ite ((_ is Node!931) (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930)) (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (ite (bvslt (_ bv0 32) (nvalue!932 (insert!212 (tail!938 (insert!212_arg_0_2 ?i)) Leaf!930))) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) Leaf!930))) ))))) true)))) true)) (ite ((_ is Node!931) (insert!212_arg_1_3 ?i)) (ite ((_ is Nil!939) (insert!212_arg_0_2 ?i)) true (ite (and ((_ is Nil!939) (tail!938 (insert!212_arg_0_2 ?i))) ((_ is Cons!936) (insert!212_arg_0_2 ?i))) true (ite (and ((_ is Cons!936) (tail!938 (insert!212_arg_0_2 ?i))) ((_ is Cons!936) (insert!212_arg_0_2 ?i))) (ite (bvslt (_ bv0 32) (head!937 (tail!938 (insert!212_arg_0_2 ?i)))) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) (ite (bvslt (_ bv0 32) (head!937 (tail!938 (insert!212_arg_0_2 ?i)))) (left!933 (insert!212_arg_1_3 ?i)) (right!934 (insert!212_arg_1_3 ?i)))))) )) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 (insert!212_arg_0_2 ?i))) (= (insert!212_arg_1_3 ?z) (ite (bvslt (_ bv0 32) (head!937 (tail!938 (insert!212_arg_0_2 ?i)))) (left!933 (insert!212_arg_1_3 ?i)) (right!934 (insert!212_arg_1_3 ?i)))))) ))) true))) true))) ))
(assert (forall ((?i I_listSize!206)) (and (= (ite ((_ is Nil!939) (listSize!206_arg_0_4 ?i)) (_ bv0 32) (ite ((_ is Cons!936) (listSize!206_arg_0_4 ?i)) (bvadd (listSize!206 (tail!938 (listSize!206_arg_0_4 ?i))) (_ bv1 32)) error_value!944)) (listSize!206 (listSize!206_arg_0_4 ?i))) (ite ((_ is Nil!939) (listSize!206_arg_0_4 ?i)) true (ite ((_ is Cons!936) (listSize!206_arg_0_4 ?i)) (not (forall ((?z I_listSize!206)) (not (= (listSize!206_arg_0_4 ?z) (tail!938 (listSize!206_arg_0_4 ?i)))) )) true))) ))
(assert (not (forall ((t!211 Tree!929) (inp!210 IList!935)) (not (and (bvslt (bvadd (height!209 t!211) (height!209 (ite ((_ is Leaf!930) t!211) (ite ((_ is Nil!939) (tail!938 inp!210)) t!211 (ite ((_ is Cons!936) inp!210) (ite ((_ is Leaf!930) (insert!212 (tail!938 inp!210) Leaf!930)) (Node!931 (head!937 inp!210) Leaf!930 Leaf!930) (ite ((_ is Node!931) (insert!212 inp!210 Leaf!930)) (ite (bvslt (_ bv0 32) (nvalue!932 (insert!212 (tail!938 inp!210) Leaf!930))) (Node!931 (head!937 inp!210) (insert!212 (tail!938 inp!210) Leaf!930) Leaf!930) (Node!931 (nvalue!932 (insert!212 (tail!938 inp!210) Leaf!930)) Leaf!930 (insert!212 (tail!938 inp!210) Leaf!930))) error_value!945)) error_value!946)) (ite ((_ is Node!931) t!211) (ite ((_ is Nil!939) inp!210) t!211 (ite (and ((_ is Nil!939) (tail!938 inp!210)) ((_ is Cons!936) inp!210)) t!211 (ite (and ((_ is Cons!936) (tail!938 inp!210)) ((_ is Cons!936) inp!210)) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (Node!931 (nvalue!932 t!211) (insert!212 (tail!938 inp!210) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (left!933 t!211) (right!934 t!211))) (right!934 t!211)) (Node!931 (nvalue!932 t!211) (left!933 t!211) (insert!212 (tail!938 inp!210) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (left!933 t!211) (right!934 t!211))))) t!211))) error_value!947)))) (listSize!206 inp!210)) (not (forall ((?z I_height!209)) (not (= (height!209_arg_0_1 ?z) t!211)) )) (not (forall ((?z I_height!209)) (not (= (height!209_arg_0_1 ?z) (ite ((_ is Leaf!930) t!211) (ite ((_ is Nil!939) (tail!938 inp!210)) t!211 (ite ((_ is Cons!936) inp!210) (ite ((_ is Leaf!930) (insert!212 (tail!938 inp!210) Leaf!930)) (Node!931 (head!937 inp!210) Leaf!930 Leaf!930) (ite ((_ is Node!931) (insert!212 inp!210 Leaf!930)) (ite (bvslt (_ bv0 32) (nvalue!932 (insert!212 (tail!938 inp!210) Leaf!930))) (Node!931 (head!937 inp!210) (insert!212 (tail!938 inp!210) Leaf!930) Leaf!930) (Node!931 (nvalue!932 (insert!212 (tail!938 inp!210) Leaf!930)) Leaf!930 (insert!212 (tail!938 inp!210) Leaf!930))) error_value!945)) error_value!946)) (ite ((_ is Node!931) t!211) (ite ((_ is Nil!939) inp!210) t!211 (ite (and ((_ is Nil!939) (tail!938 inp!210)) ((_ is Cons!936) inp!210)) t!211 (ite (and ((_ is Cons!936) (tail!938 inp!210)) ((_ is Cons!936) inp!210)) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (Node!931 (nvalue!932 t!211) (insert!212 (tail!938 inp!210) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (left!933 t!211) (right!934 t!211))) (right!934 t!211)) (Node!931 (nvalue!932 t!211) (left!933 t!211) (insert!212 (tail!938 inp!210) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (left!933 t!211) (right!934 t!211))))) t!211))) error_value!947)))) )) (ite ((_ is Leaf!930) t!211) (ite ((_ is Nil!939) (tail!938 inp!210)) true (ite ((_ is Cons!936) inp!210) (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (ite ((_ is Leaf!930) (insert!212 (tail!938 inp!210) Leaf!930)) true (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) inp!210) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (ite ((_ is Node!931) (insert!212 inp!210 Leaf!930)) (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (ite (bvslt (_ bv0 32) (nvalue!932 (insert!212 (tail!938 inp!210) Leaf!930))) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (and (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) Leaf!930))) )) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) Leaf!930))) ))))) true)))) true)) (ite ((_ is Node!931) t!211) (ite ((_ is Nil!939) inp!210) true (ite (and ((_ is Nil!939) (tail!938 inp!210)) ((_ is Cons!936) inp!210)) true (ite (and ((_ is Cons!936) (tail!938 inp!210)) ((_ is Cons!936) inp!210)) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (left!933 t!211) (right!934 t!211))))) )) (not (forall ((?z I_insert!212)) (not (and (= (insert!212_arg_0_2 ?z) (tail!938 inp!210)) (= (insert!212_arg_1_3 ?z) (ite (bvslt (_ bv0 32) (head!937 (tail!938 inp!210))) (left!933 t!211) (right!934 t!211))))) ))) true))) true)) (not (forall ((?z I_listSize!206)) (not (= (listSize!206_arg_0_4 ?z) inp!210)) )))) )))
(check-sat)
(exit)

