(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1240 0)) (((And!1241 (lhs!1242 Formula!1240) (rhs!1243 Formula!1240)) (Implies!1244 (lhs!1245 Formula!1240) (rhs!1246 Formula!1240)) (Literal!1247 (id!1248 (_ BitVec 32))) (Not!1249 (f!1250 Formula!1240)) (Or!1251 (lhs!1252 Formula!1240) (rhs!1253 Formula!1240)))
))
(declare-fun error_value!1254 () Bool)
(declare-fun isNNF!212 (Formula!1240) Bool)
(declare-fun error_value!1255 () Formula!1240)
(declare-fun nnf!210 (Formula!1240) Formula!1240)
(declare-sort I_isNNF!212 0)
(declare-fun isNNF!212_arg_0_1 (I_isNNF!212) Formula!1240)
(declare-sort I_nnf!210 0)
(declare-fun nnf!210_arg_0_2 (I_nnf!210) Formula!1240)
(assert (forall ((?i I_isNNF!212)) (and (= (isNNF!212 (isNNF!212_arg_0_1 ?i)) (ite ((_ is And!1241) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1243 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1242 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Or!1251) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1253 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1252 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Implies!1244) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1246 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1245 (isNNF!212_arg_0_1 ?i)))) (ite (and ((_ is Literal!1247) (f!1250 (isNNF!212_arg_0_1 ?i))) ((_ is Not!1249) (isNNF!212_arg_0_1 ?i))) true (ite ((_ is Not!1249) (isNNF!212_arg_0_1 ?i)) false (ite ((_ is Literal!1247) (isNNF!212_arg_0_1 ?i)) true error_value!1254))))))) (ite ((_ is And!1241) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1243 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1242 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Or!1251) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1253 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1252 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1244) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1246 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1245 (isNNF!212_arg_0_1 ?i)))) ))) true)))) ))
(assert (forall ((?i I_nnf!210)) (and (= (nnf!210 (nnf!210_arg_0_2 ?i)) (ite ((_ is And!1241) (nnf!210_arg_0_2 ?i)) (And!1241 (nnf!210 (lhs!1242 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1243 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Or!1251) (nnf!210_arg_0_2 ?i)) (Or!1251 (nnf!210 (lhs!1252 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1253 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Implies!1244) (nnf!210_arg_0_2 ?i)) (Implies!1244 (nnf!210 (lhs!1245 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1246 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is And!1241) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (Or!1251 (nnf!210 (Not!1249 (lhs!1242 (f!1250 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1249 (rhs!1243 (f!1250 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Or!1251) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (And!1241 (nnf!210 (Not!1249 (lhs!1252 (f!1250 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1249 (rhs!1253 (f!1250 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Implies!1244) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (And!1241 (nnf!210 (lhs!1245 (f!1250 (nnf!210_arg_0_2 ?i)))) (nnf!210 (Not!1249 (rhs!1246 (f!1250 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Not!1249) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (nnf!210 (f!1250 (f!1250 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is Literal!1247) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (nnf!210_arg_0_2 ?i) (ite ((_ is Literal!1247) (nnf!210_arg_0_2 ?i)) (nnf!210_arg_0_2 ?i) error_value!1255)))))))))) (ite ((_ is And!1241) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1242 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1243 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Or!1251) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1252 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1253 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1244) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1245 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1246 (nnf!210_arg_0_2 ?i)))) ))) (ite (and ((_ is And!1241) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1249 (lhs!1242 (f!1250 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1249 (rhs!1243 (f!1250 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Or!1251) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1249 (lhs!1252 (f!1250 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1249 (rhs!1253 (f!1250 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Implies!1244) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1245 (f!1250 (nnf!210_arg_0_2 ?i))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1249 (rhs!1246 (f!1250 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Not!1249) (f!1250 (nnf!210_arg_0_2 ?i))) ((_ is Not!1249) (nnf!210_arg_0_2 ?i))) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (f!1250 (f!1250 (nnf!210_arg_0_2 ?i))))) )) true)))))))) ))
(assert (not (forall ((BOUND_VARIABLE_523 Formula!1240) (BOUND_VARIABLE_524 Formula!1240)) (or (and (or (isNNF!212 BOUND_VARIABLE_523) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) BOUND_VARIABLE_523)) )) (not (and (= (nnf!210 BOUND_VARIABLE_523) BOUND_VARIABLE_523) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) BOUND_VARIABLE_523)) ))))) (not (and (isNNF!212 (And!1241 BOUND_VARIABLE_523 BOUND_VARIABLE_524)) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (And!1241 BOUND_VARIABLE_523 BOUND_VARIABLE_524))) )))) (or (= (nnf!210 (And!1241 BOUND_VARIABLE_523 BOUND_VARIABLE_524)) (And!1241 BOUND_VARIABLE_523 (nnf!210 BOUND_VARIABLE_524))) (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (And!1241 BOUND_VARIABLE_523 BOUND_VARIABLE_524))) ) (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) BOUND_VARIABLE_524)) ))) )))
(check-sat)
(exit)

