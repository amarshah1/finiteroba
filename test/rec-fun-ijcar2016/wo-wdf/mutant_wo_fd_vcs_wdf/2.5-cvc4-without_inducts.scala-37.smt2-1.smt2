(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!1843 0)) (((succ!1844 (pred!1845 Nat!1843)) (zero!1846))
))
(declare-datatypes ((Lst!1847 0)) (((cons!1848 (head!1849 Nat!1843) (tail!1850 Lst!1847)) (nil!1851))
))
(declare-fun error_value!1852 () Nat!1843)
(declare-fun plus!237 (Nat!1843 Nat!1843) Nat!1843)
(declare-fun error_value!1853 () Nat!1843)
(declare-fun count!263 (Nat!1843 Lst!1847) Nat!1843)
(declare-fun error_value!1854 () Lst!1847)
(declare-fun append!252 (Lst!1847 Lst!1847) Lst!1847)
(declare-sort I_plus!237 0)
(declare-fun plus!237_arg_0_1 (I_plus!237) Nat!1843)
(declare-fun plus!237_arg_1_2 (I_plus!237) Nat!1843)
(declare-sort I_count!263 0)
(declare-fun count!263_arg_0_3 (I_count!263) Nat!1843)
(declare-fun count!263_arg_1_4 (I_count!263) Lst!1847)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_5 (I_append!252) Lst!1847)
(declare-fun append!252_arg_1_6 (I_append!252) Lst!1847)
(assert (forall ((?i I_plus!237)) (and (= (plus!237 (plus!237_arg_0_1 ?i) (plus!237_arg_1_2 ?i)) (ite ((_ is zero!1846) (plus!237_arg_0_1 ?i)) (plus!237_arg_1_2 ?i) (ite ((_ is succ!1844) (plus!237_arg_0_1 ?i)) (succ!1844 (plus!237 (pred!1845 (plus!237_arg_0_1 ?i)) (plus!237_arg_1_2 ?i))) error_value!1852))) (ite ((_ is zero!1846) (plus!237_arg_0_1 ?i)) true (ite ((_ is succ!1844) (plus!237_arg_0_1 ?i)) (not (forall ((?z I_plus!237)) (not (and (= (plus!237_arg_0_1 ?z) (pred!1845 (plus!237_arg_0_1 ?i))) (= (plus!237_arg_1_2 ?z) (plus!237_arg_1_2 ?i)))) )) true))) ))
(assert (forall ((?i I_count!263)) (and (= (count!263 (count!263_arg_0_3 ?i) (count!263_arg_1_4 ?i)) (ite ((_ is nil!1851) (count!263_arg_1_4 ?i)) zero!1846 (ite ((_ is cons!1848) (count!263_arg_1_4 ?i)) (ite (= (count!263_arg_0_3 ?i) (head!1849 (count!263_arg_1_4 ?i))) (succ!1844 (count!263 (count!263_arg_0_3 ?i) (tail!1850 (count!263_arg_1_4 ?i)))) (count!263 (count!263_arg_0_3 ?i) (tail!1850 (count!263_arg_1_4 ?i)))) error_value!1853))) (ite ((_ is nil!1851) (count!263_arg_1_4 ?i)) true (ite ((_ is cons!1848) (count!263_arg_1_4 ?i)) (ite (= (count!263_arg_0_3 ?i) (head!1849 (count!263_arg_1_4 ?i))) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) (count!263_arg_0_3 ?i)) (= (count!263_arg_1_4 ?z) (tail!1850 (count!263_arg_1_4 ?i))))) )) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) (count!263_arg_0_3 ?i)) (= (count!263_arg_1_4 ?z) (tail!1850 (count!263_arg_1_4 ?i))))) ))) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_5 ?i) (append!252_arg_1_6 ?i)) (ite ((_ is nil!1851) (append!252_arg_0_5 ?i)) (append!252_arg_1_6 ?i) (ite ((_ is cons!1848) (append!252_arg_0_5 ?i)) (cons!1848 (head!1849 (append!252_arg_0_5 ?i)) (append!252 (tail!1850 (append!252_arg_0_5 ?i)) (append!252_arg_1_6 ?i))) error_value!1854))) (ite ((_ is nil!1851) (append!252_arg_0_5 ?i)) true (ite ((_ is cons!1848) (append!252_arg_0_5 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_5 ?z) (tail!1850 (append!252_arg_0_5 ?i))) (= (append!252_arg_1_6 ?z) (append!252_arg_1_6 ?i)))) )) true))) ))
(assert (not (forall ((n!307 Nat!1843) (l!308 Lst!1847) (m!309 Lst!1847)) (or (= (plus!237 (count!263 n!307 l!308) (count!263 n!307 (append!252 l!308 m!309))) (count!263 n!307 m!309)) (forall ((?z I_plus!237)) (not (and (= (plus!237_arg_0_1 ?z) (count!263 n!307 l!308)) (= (plus!237_arg_1_2 ?z) (count!263 n!307 (append!252 l!308 m!309))))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) n!307) (= (count!263_arg_1_4 ?z) l!308))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) n!307) (= (count!263_arg_1_4 ?z) (append!252 l!308 m!309)))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_5 ?z) l!308) (= (append!252_arg_1_6 ?z) m!309))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) n!307) (= (count!263_arg_1_4 ?z) m!309))) )) )))
(check-sat)
(exit)

