(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!1878 0)) (((succ!1879 (pred!1880 Nat!1878)) (zero!1881))
))
(declare-datatypes ((Lst!1882 0)) (((cons!1883 (head!1884 Nat!1878) (tail!1885 Lst!1882)) (nil!1886))
))
(declare-fun error_value!1887 () Nat!1878)
(declare-fun plus!237 (Nat!1878 Nat!1878) Nat!1878)
(declare-fun error_value!1888 () Nat!1878)
(declare-fun count!263 (Nat!1878 Lst!1882) Nat!1878)
(declare-sort I_plus!237 0)
(declare-fun plus!237_arg_0_1 (I_plus!237) Nat!1878)
(declare-fun plus!237_arg_1_2 (I_plus!237) Nat!1878)
(declare-sort I_count!263 0)
(declare-fun count!263_arg_0_3 (I_count!263) Nat!1878)
(declare-fun count!263_arg_1_4 (I_count!263) Lst!1882)
(assert (forall ((?i I_plus!237)) (and (= (plus!237 (plus!237_arg_0_1 ?i) (plus!237_arg_1_2 ?i)) (ite ((_ is zero!1881) (plus!237_arg_0_1 ?i)) (plus!237_arg_1_2 ?i) (ite ((_ is succ!1879) (plus!237_arg_0_1 ?i)) (succ!1879 (plus!237 (pred!1880 (plus!237_arg_0_1 ?i)) (plus!237_arg_1_2 ?i))) error_value!1887))) (ite ((_ is zero!1881) (plus!237_arg_0_1 ?i)) true (ite ((_ is succ!1879) (plus!237_arg_0_1 ?i)) (not (forall ((?z I_plus!237)) (not (and (= (plus!237_arg_0_1 ?z) (pred!1880 (plus!237_arg_0_1 ?i))) (= (plus!237_arg_1_2 ?z) (plus!237_arg_1_2 ?i)))) )) true))) ))
(assert (forall ((?i I_count!263)) (and (= (count!263 (count!263_arg_0_3 ?i) (count!263_arg_1_4 ?i)) (ite ((_ is nil!1886) (count!263_arg_1_4 ?i)) zero!1881 (ite ((_ is cons!1883) (count!263_arg_1_4 ?i)) (ite (= (count!263_arg_0_3 ?i) (head!1884 (count!263_arg_1_4 ?i))) (succ!1879 (count!263 (count!263_arg_0_3 ?i) (tail!1885 (count!263_arg_1_4 ?i)))) (count!263 (count!263_arg_0_3 ?i) (tail!1885 (count!263_arg_1_4 ?i)))) error_value!1888))) (ite ((_ is nil!1886) (count!263_arg_1_4 ?i)) true (ite ((_ is cons!1883) (count!263_arg_1_4 ?i)) (ite (= (count!263_arg_0_3 ?i) (head!1884 (count!263_arg_1_4 ?i))) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) (count!263_arg_0_3 ?i)) (= (count!263_arg_1_4 ?z) (tail!1885 (count!263_arg_1_4 ?i))))) )) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) (count!263_arg_0_3 ?i)) (= (count!263_arg_1_4 ?z) (tail!1885 (count!263_arg_1_4 ?i))))) ))) true))) ))
(assert (not (forall ((x!319 Nat!1878) (l!320 Lst!1882)) (or (= (count!263 x!319 l!320) (count!263 x!319 (cons!1883 x!319 l!320))) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) x!319) (= (count!263_arg_1_4 ?z) l!320))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) x!319) (= (count!263_arg_1_4 ?z) (cons!1883 x!319 l!320)))) )) )))
(check-sat)
(exit)

