(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Heap!1189 0)) (((Leaf!1190) (Node!1191 (rk!1192 (_ BitVec 32)) (value!1193 (_ BitVec 32)) (left!1194 Heap!1189) (right!1195 Heap!1189)))
))
(declare-datatypes ((List!1196 0)) (((Cons!1197 (head!1198 (_ BitVec 32)) (tail!1199 List!1196)) (Nil!1200))
))
(declare-fun error_value!1201 () Bool)
(declare-fun error_value!1202 () (_ BitVec 32))
(declare-fun error_value!1203 () (_ BitVec 32))
(declare-fun hasLeftistProperty!210 (Heap!1189) Bool)
(declare-fun rightHeight!206 (Heap!1189) (_ BitVec 32))
(declare-fun rank!208 (Heap!1189) (_ BitVec 32))
(declare-fun error_value!1204 () (_ BitVec 32))
(declare-fun error_value!1205 () (_ BitVec 32))
(declare-fun error_value!1206 () Heap!1189)
(declare-fun error_value!1207 () Heap!1189)
(declare-fun error_value!1208 () Heap!1189)
(declare-fun insert!222 ((_ BitVec 32) Heap!1189) Heap!1189)
(declare-fun heapSize!212 (Heap!1189) (_ BitVec 32))
(declare-fun listSize!229 (List!1196) (_ BitVec 32))
(declare-fun makeT!219 ((_ BitVec 32) Heap!1189 Heap!1189) Heap!1189)
(declare-fun buildHeap!235 (List!1196 Heap!1189) Heap!1189)
(declare-fun merge!215 (Heap!1189 Heap!1189) Heap!1189)
(declare-fun error_value!1209 () Heap!1189)
(declare-sort I_hasLeftistProperty!210 0)
(declare-fun hasLeftistProperty!210_arg_0_1 (I_hasLeftistProperty!210) Heap!1189)
(declare-sort I_rightHeight!206 0)
(declare-fun rightHeight!206_arg_0_2 (I_rightHeight!206) Heap!1189)
(declare-sort I_rank!208 0)
(declare-fun rank!208_arg_0_3 (I_rank!208) Heap!1189)
(declare-sort I_insert!222 0)
(declare-fun insert!222_arg_0_4 (I_insert!222) (_ BitVec 32))
(declare-fun insert!222_arg_1_5 (I_insert!222) Heap!1189)
(declare-sort I_heapSize!212 0)
(declare-fun heapSize!212_arg_0_6 (I_heapSize!212) Heap!1189)
(declare-sort I_listSize!229 0)
(declare-fun listSize!229_arg_0_7 (I_listSize!229) List!1196)
(declare-sort I_makeT!219 0)
(declare-fun makeT!219_arg_0_8 (I_makeT!219) (_ BitVec 32))
(declare-fun makeT!219_arg_1_9 (I_makeT!219) Heap!1189)
(declare-fun makeT!219_arg_2_10 (I_makeT!219) Heap!1189)
(declare-sort I_buildHeap!235 0)
(declare-fun buildHeap!235_arg_0_11 (I_buildHeap!235) List!1196)
(declare-fun buildHeap!235_arg_1_12 (I_buildHeap!235) Heap!1189)
(declare-sort I_merge!215 0)
(declare-fun merge!215_arg_0_13 (I_merge!215) Heap!1189)
(declare-fun merge!215_arg_1_14 (I_merge!215) Heap!1189)
(assert (forall ((?i I_hasLeftistProperty!210)) (and (= (hasLeftistProperty!210 (hasLeftistProperty!210_arg_0_1 ?i)) (ite ((_ is Leaf!1190) (hasLeftistProperty!210_arg_0_1 ?i)) true (ite ((_ is Node!1191) (hasLeftistProperty!210_arg_0_1 ?i)) (and (= (rightHeight!206 (hasLeftistProperty!210_arg_0_1 ?i)) (rank!208 (hasLeftistProperty!210_arg_0_1 ?i))) (not (bvslt (rightHeight!206 (left!1194 (hasLeftistProperty!210_arg_0_1 ?i))) (rightHeight!206 (right!1195 (hasLeftistProperty!210_arg_0_1 ?i))))) (hasLeftistProperty!210 (right!1195 (hasLeftistProperty!210_arg_0_1 ?i))) (hasLeftistProperty!210 (left!1194 (hasLeftistProperty!210_arg_0_1 ?i)))) error_value!1201))) (ite ((_ is Leaf!1190) (hasLeftistProperty!210_arg_0_1 ?i)) true (ite ((_ is Node!1191) (hasLeftistProperty!210_arg_0_1 ?i)) (and (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (hasLeftistProperty!210_arg_0_1 ?i))) )) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (hasLeftistProperty!210_arg_0_1 ?i))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (left!1194 (hasLeftistProperty!210_arg_0_1 ?i)))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (right!1195 (hasLeftistProperty!210_arg_0_1 ?i)))) )) (not (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) (right!1195 (hasLeftistProperty!210_arg_0_1 ?i)))) )) (not (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) (left!1194 (hasLeftistProperty!210_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_rightHeight!206)) (and (= (ite ((_ is Leaf!1190) (rightHeight!206_arg_0_2 ?i)) (_ bv0 32) (ite ((_ is Node!1191) (rightHeight!206_arg_0_2 ?i)) (bvadd (rightHeight!206 (right!1195 (rightHeight!206_arg_0_2 ?i))) (_ bv1 32)) error_value!1202)) (rightHeight!206 (rightHeight!206_arg_0_2 ?i))) (ite ((_ is Leaf!1190) (rightHeight!206_arg_0_2 ?i)) true (ite ((_ is Node!1191) (rightHeight!206_arg_0_2 ?i)) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (right!1195 (rightHeight!206_arg_0_2 ?i)))) )) true))) ))
(assert (forall ((?i I_rank!208)) (= (ite ((_ is Leaf!1190) (rank!208_arg_0_3 ?i)) (_ bv0 32) (ite ((_ is Node!1191) (rank!208_arg_0_3 ?i)) (rk!1192 (rank!208_arg_0_3 ?i)) error_value!1203)) (rank!208 (rank!208_arg_0_3 ?i))) ))
(assert (forall ((?i I_insert!222)) (and (= (insert!222 (insert!222_arg_0_4 ?i) (insert!222_arg_1_5 ?i)) (merge!215 (Node!1191 (_ bv1 32) (insert!222_arg_0_4 ?i) Leaf!1190 Leaf!1190) (insert!222_arg_1_5 ?i))) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_13 ?z) (Node!1191 (_ bv1 32) (insert!222_arg_0_4 ?i) Leaf!1190 Leaf!1190)) (= (merge!215_arg_1_14 ?z) (insert!222_arg_1_5 ?i)))) ))) ))
(assert (forall ((?i I_heapSize!212)) (and (= (ite ((_ is Leaf!1190) (heapSize!212_arg_0_6 ?i)) (_ bv0 32) (ite ((_ is Node!1191) (heapSize!212_arg_0_6 ?i)) (bvadd (heapSize!212 (left!1194 (heapSize!212_arg_0_6 ?i))) (bvadd (heapSize!212 (right!1195 (heapSize!212_arg_0_6 ?i))) (_ bv1 32))) error_value!1204)) (heapSize!212 (heapSize!212_arg_0_6 ?i))) (ite ((_ is Leaf!1190) (heapSize!212_arg_0_6 ?i)) true (ite ((_ is Node!1191) (heapSize!212_arg_0_6 ?i)) (and (not (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_6 ?z) (left!1194 (heapSize!212_arg_0_6 ?i)))) )) (not (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_6 ?z) (right!1195 (heapSize!212_arg_0_6 ?i)))) ))) true))) ))
(assert (forall ((?i I_listSize!229)) (and (= (ite ((_ is Nil!1200) (listSize!229_arg_0_7 ?i)) (_ bv0 32) (ite ((_ is Cons!1197) (listSize!229_arg_0_7 ?i)) (bvadd (listSize!229 (tail!1199 (listSize!229_arg_0_7 ?i))) (_ bv1 32)) error_value!1205)) (listSize!229 (listSize!229_arg_0_7 ?i))) (ite ((_ is Nil!1200) (listSize!229_arg_0_7 ?i)) true (ite ((_ is Cons!1197) (listSize!229_arg_0_7 ?i)) (not (forall ((?z I_listSize!229)) (not (= (listSize!229_arg_0_7 ?z) (tail!1199 (listSize!229_arg_0_7 ?i)))) )) true))) ))
(assert (forall ((?i I_makeT!219)) (and (= (makeT!219 (makeT!219_arg_0_8 ?i) (makeT!219_arg_1_9 ?i) (makeT!219_arg_2_10 ?i)) (ite (not (bvslt (rank!208 (makeT!219_arg_1_9 ?i)) (rank!208 (makeT!219_arg_2_10 ?i)))) (Node!1191 (bvadd (rank!208 (makeT!219_arg_2_10 ?i)) (_ bv1 32)) (makeT!219_arg_0_8 ?i) (makeT!219_arg_1_9 ?i) (makeT!219_arg_2_10 ?i)) (Node!1191 (bvadd (rank!208 (makeT!219_arg_1_9 ?i)) (_ bv1 32)) (makeT!219_arg_0_8 ?i) (makeT!219_arg_2_10 ?i) (makeT!219_arg_1_9 ?i)))) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_1_9 ?i))) )) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_2_10 ?i))) )) (ite (not (bvslt (rank!208 (makeT!219_arg_1_9 ?i)) (rank!208 (makeT!219_arg_2_10 ?i)))) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_2_10 ?i))) )) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_1_9 ?i))) )))) ))
(assert (forall ((?i I_buildHeap!235)) (and (= (buildHeap!235 (buildHeap!235_arg_0_11 ?i) (buildHeap!235_arg_1_12 ?i)) (ite ((_ is Nil!1200) (buildHeap!235_arg_0_11 ?i)) (buildHeap!235_arg_1_12 ?i) (ite ((_ is Cons!1197) (buildHeap!235_arg_0_11 ?i)) (buildHeap!235 (tail!1199 (buildHeap!235_arg_0_11 ?i)) (insert!222 (head!1198 (buildHeap!235_arg_0_11 ?i)) (buildHeap!235_arg_1_12 ?i))) error_value!1206))) (ite ((_ is Nil!1200) (buildHeap!235_arg_0_11 ?i)) true (ite ((_ is Cons!1197) (buildHeap!235_arg_0_11 ?i)) (and (not (forall ((?z I_buildHeap!235)) (not (and (= (buildHeap!235_arg_0_11 ?z) (tail!1199 (buildHeap!235_arg_0_11 ?i))) (= (buildHeap!235_arg_1_12 ?z) (insert!222 (head!1198 (buildHeap!235_arg_0_11 ?i)) (buildHeap!235_arg_1_12 ?i))))) )) (not (forall ((?z I_insert!222)) (not (and (= (insert!222_arg_0_4 ?z) (head!1198 (buildHeap!235_arg_0_11 ?i))) (= (insert!222_arg_1_5 ?z) (buildHeap!235_arg_1_12 ?i)))) ))) true))) ))
(assert (forall ((?i I_merge!215)) (and (= (merge!215 (merge!215_arg_0_13 ?i) (merge!215_arg_1_14 ?i)) (ite ((_ is Leaf!1190) (merge!215_arg_0_13 ?i)) (merge!215_arg_1_14 ?i) (ite ((_ is Node!1191) (merge!215_arg_0_13 ?i)) (ite ((_ is Leaf!1190) (merge!215_arg_1_14 ?i)) (merge!215_arg_0_13 ?i) (ite ((_ is Node!1191) (merge!215_arg_1_14 ?i)) (ite (bvslt (value!1193 (merge!215_arg_1_14 ?i)) (value!1193 (merge!215_arg_0_13 ?i))) (makeT!219 (value!1193 (merge!215_arg_0_13 ?i)) (left!1194 (merge!215_arg_0_13 ?i)) (merge!215 (right!1195 (merge!215_arg_0_13 ?i)) (merge!215_arg_1_14 ?i))) (makeT!219 (value!1193 (merge!215_arg_1_14 ?i)) (left!1194 (merge!215_arg_1_14 ?i)) (merge!215 (merge!215_arg_0_13 ?i) (right!1195 (merge!215_arg_1_14 ?i))))) error_value!1207)) error_value!1208))) (ite ((_ is Leaf!1190) (merge!215_arg_0_13 ?i)) true (ite ((_ is Node!1191) (merge!215_arg_0_13 ?i)) (ite ((_ is Leaf!1190) (merge!215_arg_1_14 ?i)) true (ite ((_ is Node!1191) (merge!215_arg_1_14 ?i)) (ite (bvslt (value!1193 (merge!215_arg_1_14 ?i)) (value!1193 (merge!215_arg_0_13 ?i))) (and (not (forall ((?z I_makeT!219)) (not (and (= (makeT!219_arg_0_8 ?z) (value!1193 (merge!215_arg_0_13 ?i))) (= (makeT!219_arg_1_9 ?z) (left!1194 (merge!215_arg_0_13 ?i))) (= (makeT!219_arg_2_10 ?z) (merge!215 (right!1195 (merge!215_arg_0_13 ?i)) (merge!215_arg_1_14 ?i))))) )) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_13 ?z) (right!1195 (merge!215_arg_0_13 ?i))) (= (merge!215_arg_1_14 ?z) (merge!215_arg_1_14 ?i)))) ))) (and (not (forall ((?z I_makeT!219)) (not (and (= (makeT!219_arg_0_8 ?z) (value!1193 (merge!215_arg_1_14 ?i))) (= (makeT!219_arg_1_9 ?z) (left!1194 (merge!215_arg_1_14 ?i))) (= (makeT!219_arg_2_10 ?z) (merge!215 (merge!215_arg_0_13 ?i) (right!1195 (merge!215_arg_1_14 ?i)))))) )) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_13 ?z) (merge!215_arg_0_13 ?i)) (= (merge!215_arg_1_14 ?z) (right!1195 (merge!215_arg_1_14 ?i))))) )))) true)) true))) ))
(assert (not (forall ((h!234 Heap!1189) (l!233 List!1196)) (or (not (and (hasLeftistProperty!210 h!234) (not (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) h!234)) )))) (and (or (= (heapSize!212 (ite ((_ is Nil!1200) l!233) h!234 (ite ((_ is Cons!1197) l!233) (buildHeap!235 l!233 (insert!222 (head!1198 l!233) h!234)) error_value!1209))) (bvadd (heapSize!212 h!234) (listSize!229 (tail!1199 l!233)))) (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_6 ?z) (ite ((_ is Nil!1200) l!233) h!234 (ite ((_ is Cons!1197) l!233) (buildHeap!235 l!233 (insert!222 (head!1198 l!233) h!234)) error_value!1209)))) ) (not (ite ((_ is Nil!1200) l!233) true (ite ((_ is Cons!1197) l!233) (and (not (forall ((?z I_buildHeap!235)) (not (and (= (buildHeap!235_arg_0_11 ?z) l!233) (= (buildHeap!235_arg_1_12 ?z) (insert!222 (head!1198 l!233) h!234)))) )) (not (forall ((?z I_insert!222)) (not (and (= (insert!222_arg_0_4 ?z) (head!1198 l!233)) (= (insert!222_arg_1_5 ?z) h!234))) ))) true))) (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_6 ?z) h!234)) ) (forall ((?z I_listSize!229)) (not (= (listSize!229_arg_0_7 ?z) (tail!1199 l!233))) )) (or (hasLeftistProperty!210 (ite ((_ is Nil!1200) l!233) h!234 (ite ((_ is Cons!1197) l!233) (buildHeap!235 (tail!1199 l!233) (insert!222 (head!1198 l!233) h!234)) error_value!1209))) (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) (ite ((_ is Nil!1200) l!233) h!234 (ite ((_ is Cons!1197) l!233) (buildHeap!235 (tail!1199 l!233) (insert!222 (head!1198 l!233) h!234)) error_value!1209)))) ) (not (ite ((_ is Nil!1200) l!233) true (ite ((_ is Cons!1197) l!233) (and (not (forall ((?z I_buildHeap!235)) (not (and (= (buildHeap!235_arg_0_11 ?z) (tail!1199 l!233)) (= (buildHeap!235_arg_1_12 ?z) (insert!222 (head!1198 l!233) h!234)))) )) (not (forall ((?z I_insert!222)) (not (and (= (insert!222_arg_0_4 ?z) (head!1198 l!233)) (= (insert!222_arg_1_5 ?z) h!234))) ))) true)))))) )))
(check-sat)
(exit)

