(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2437 0)(Nat!2442 0)) (((cons!2438 (head!2439 Nat!2442) (tail!2440 Lst!2437)) (nil!2441))
((succ!2443 (pred!2444 Nat!2442)) (zero!2445))
))
(declare-fun error_value!2446 () Nat!2442)
(declare-fun last!265 (Lst!2437) Nat!2442)
(declare-fun error_value!2447 () Lst!2437)
(declare-fun append!252 (Lst!2437 Lst!2437) Lst!2437)
(declare-sort I_last!265 0)
(declare-fun last!265_arg_0_1 (I_last!265) Lst!2437)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_2 (I_append!252) Lst!2437)
(declare-fun append!252_arg_1_3 (I_append!252) Lst!2437)
(assert (forall ((?i I_last!265)) (and (= (last!265 (last!265_arg_0_1 ?i)) (ite ((_ is nil!2441) (last!265_arg_0_1 ?i)) zero!2445 (ite ((_ is cons!2438) (last!265_arg_0_1 ?i)) (ite (= (tail!2440 (last!265_arg_0_1 ?i)) nil!2441) (head!2439 (last!265_arg_0_1 ?i)) (last!265 (tail!2440 (last!265_arg_0_1 ?i)))) error_value!2446))) (ite ((_ is nil!2441) (last!265_arg_0_1 ?i)) true (ite ((_ is cons!2438) (last!265_arg_0_1 ?i)) (ite (= (tail!2440 (last!265_arg_0_1 ?i)) nil!2441) true (not (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) (tail!2440 (last!265_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_2 ?i) (append!252_arg_1_3 ?i)) (ite ((_ is nil!2441) (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i) (ite ((_ is cons!2438) (append!252_arg_0_2 ?i)) (cons!2438 (head!2439 (append!252_arg_0_2 ?i)) (append!252 (tail!2440 (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i))) error_value!2447))) (ite ((_ is nil!2441) (append!252_arg_0_2 ?i)) true (ite ((_ is cons!2438) (append!252_arg_0_2 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) (tail!2440 (append!252_arg_0_2 ?i))) (= (append!252_arg_1_3 ?z) (append!252_arg_1_3 ?i)))) )) true))) ))
(assert (not (forall ((xs!490 Lst!2437) (x!489 Nat!2442)) (or (= (last!265 (append!252 (cons!2438 x!489 nil!2441) xs!490)) x!489) (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) (append!252 (cons!2438 x!489 nil!2441) xs!490))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) (cons!2438 x!489 nil!2441)) (= (append!252_arg_1_3 ?z) xs!490))) )) )))
(check-sat)
(exit)

