(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Heap!1069 0)) (((Leaf!1070) (Node!1071 (rk!1072 (_ BitVec 32)) (value!1073 (_ BitVec 32)) (left!1074 Heap!1069) (right!1075 Heap!1069)))
))
(declare-fun error_value!1076 () Bool)
(declare-fun error_value!1077 () (_ BitVec 32))
(declare-fun error_value!1078 () (_ BitVec 32))
(declare-fun hasLeftistProperty!210 (Heap!1069) Bool)
(declare-fun rightHeight!206 (Heap!1069) (_ BitVec 32))
(declare-fun rank!208 (Heap!1069) (_ BitVec 32))
(declare-fun error_value!1079 () (_ BitVec 32))
(declare-fun heapSize!212 (Heap!1069) (_ BitVec 32))
(declare-fun error_value!1080 () Heap!1069)
(declare-fun error_value!1081 () Heap!1069)
(declare-fun makeT!219 ((_ BitVec 32) Heap!1069 Heap!1069) Heap!1069)
(declare-fun merge!215 (Heap!1069 Heap!1069) Heap!1069)
(declare-sort I_hasLeftistProperty!210 0)
(declare-fun hasLeftistProperty!210_arg_0_1 (I_hasLeftistProperty!210) Heap!1069)
(declare-sort I_rightHeight!206 0)
(declare-fun rightHeight!206_arg_0_2 (I_rightHeight!206) Heap!1069)
(declare-sort I_rank!208 0)
(declare-fun rank!208_arg_0_3 (I_rank!208) Heap!1069)
(declare-sort I_heapSize!212 0)
(declare-fun heapSize!212_arg_0_4 (I_heapSize!212) Heap!1069)
(declare-sort I_makeT!219 0)
(declare-fun makeT!219_arg_0_5 (I_makeT!219) (_ BitVec 32))
(declare-fun makeT!219_arg_1_6 (I_makeT!219) Heap!1069)
(declare-fun makeT!219_arg_2_7 (I_makeT!219) Heap!1069)
(declare-sort I_merge!215 0)
(declare-fun merge!215_arg_0_8 (I_merge!215) Heap!1069)
(declare-fun merge!215_arg_1_9 (I_merge!215) Heap!1069)
(assert (forall ((?i I_hasLeftistProperty!210)) (and (= (hasLeftistProperty!210 (hasLeftistProperty!210_arg_0_1 ?i)) (ite ((_ is Leaf!1070) (hasLeftistProperty!210_arg_0_1 ?i)) true (ite ((_ is Node!1071) (hasLeftistProperty!210_arg_0_1 ?i)) (and (= (rightHeight!206 (hasLeftistProperty!210_arg_0_1 ?i)) (rank!208 (hasLeftistProperty!210_arg_0_1 ?i))) (not (bvslt (rightHeight!206 (left!1074 (hasLeftistProperty!210_arg_0_1 ?i))) (rightHeight!206 (right!1075 (hasLeftistProperty!210_arg_0_1 ?i))))) (hasLeftistProperty!210 (right!1075 (hasLeftistProperty!210_arg_0_1 ?i))) (hasLeftistProperty!210 (left!1074 (hasLeftistProperty!210_arg_0_1 ?i)))) error_value!1076))) (ite ((_ is Leaf!1070) (hasLeftistProperty!210_arg_0_1 ?i)) true (ite ((_ is Node!1071) (hasLeftistProperty!210_arg_0_1 ?i)) (and (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (hasLeftistProperty!210_arg_0_1 ?i))) )) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (hasLeftistProperty!210_arg_0_1 ?i))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (left!1074 (hasLeftistProperty!210_arg_0_1 ?i)))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (right!1075 (hasLeftistProperty!210_arg_0_1 ?i)))) )) (not (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) (right!1075 (hasLeftistProperty!210_arg_0_1 ?i)))) )) (not (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) (left!1074 (hasLeftistProperty!210_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_rightHeight!206)) (and (= (ite ((_ is Leaf!1070) (rightHeight!206_arg_0_2 ?i)) (_ bv0 32) (ite ((_ is Node!1071) (rightHeight!206_arg_0_2 ?i)) (bvadd (rightHeight!206 (right!1075 (rightHeight!206_arg_0_2 ?i))) (_ bv1 32)) error_value!1077)) (rightHeight!206 (rightHeight!206_arg_0_2 ?i))) (ite ((_ is Leaf!1070) (rightHeight!206_arg_0_2 ?i)) true (ite ((_ is Node!1071) (rightHeight!206_arg_0_2 ?i)) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (right!1075 (rightHeight!206_arg_0_2 ?i)))) )) true))) ))
(assert (forall ((?i I_rank!208)) (= (ite ((_ is Leaf!1070) (rank!208_arg_0_3 ?i)) (_ bv0 32) (ite ((_ is Node!1071) (rank!208_arg_0_3 ?i)) (rk!1072 (rank!208_arg_0_3 ?i)) error_value!1078)) (rank!208 (rank!208_arg_0_3 ?i))) ))
(assert (forall ((?i I_heapSize!212)) (and (= (ite ((_ is Leaf!1070) (heapSize!212_arg_0_4 ?i)) (_ bv0 32) (ite ((_ is Node!1071) (heapSize!212_arg_0_4 ?i)) (bvadd (heapSize!212 (left!1074 (heapSize!212_arg_0_4 ?i))) (bvadd (heapSize!212 (right!1075 (heapSize!212_arg_0_4 ?i))) (_ bv1 32))) error_value!1079)) (heapSize!212 (heapSize!212_arg_0_4 ?i))) (ite ((_ is Leaf!1070) (heapSize!212_arg_0_4 ?i)) true (ite ((_ is Node!1071) (heapSize!212_arg_0_4 ?i)) (and (not (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_4 ?z) (left!1074 (heapSize!212_arg_0_4 ?i)))) )) (not (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_4 ?z) (right!1075 (heapSize!212_arg_0_4 ?i)))) ))) true))) ))
(assert (forall ((?i I_makeT!219)) (and (= (makeT!219 (makeT!219_arg_0_5 ?i) (makeT!219_arg_1_6 ?i) (makeT!219_arg_2_7 ?i)) (ite (not (bvslt (rank!208 (makeT!219_arg_1_6 ?i)) (rank!208 (makeT!219_arg_2_7 ?i)))) (Node!1071 (bvadd (rank!208 (makeT!219_arg_2_7 ?i)) (_ bv1 32)) (makeT!219_arg_0_5 ?i) (makeT!219_arg_1_6 ?i) (makeT!219_arg_2_7 ?i)) (Node!1071 (bvadd (rank!208 (makeT!219_arg_1_6 ?i)) (_ bv1 32)) (makeT!219_arg_0_5 ?i) (makeT!219_arg_2_7 ?i) (makeT!219_arg_1_6 ?i)))) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_1_6 ?i))) )) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_2_7 ?i))) )) (ite (not (bvslt (rank!208 (makeT!219_arg_1_6 ?i)) (rank!208 (makeT!219_arg_2_7 ?i)))) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_2_7 ?i))) )) (not (forall ((?z I_rank!208)) (not (= (rank!208_arg_0_3 ?z) (makeT!219_arg_1_6 ?i))) )))) ))
(assert (forall ((?i I_merge!215)) (and (= (merge!215 (merge!215_arg_0_8 ?i) (merge!215_arg_1_9 ?i)) (ite ((_ is Leaf!1070) (merge!215_arg_0_8 ?i)) (merge!215_arg_1_9 ?i) (ite ((_ is Node!1071) (merge!215_arg_0_8 ?i)) (ite ((_ is Leaf!1070) (merge!215_arg_1_9 ?i)) (merge!215_arg_0_8 ?i) (ite ((_ is Node!1071) (merge!215_arg_1_9 ?i)) (ite (bvslt (value!1073 (merge!215_arg_1_9 ?i)) (value!1073 (merge!215_arg_0_8 ?i))) (makeT!219 (value!1073 (merge!215_arg_0_8 ?i)) (left!1074 (merge!215_arg_0_8 ?i)) (merge!215 (right!1075 (merge!215_arg_0_8 ?i)) (merge!215_arg_1_9 ?i))) (makeT!219 (value!1073 (merge!215_arg_1_9 ?i)) (left!1074 (merge!215_arg_1_9 ?i)) (merge!215 (merge!215_arg_0_8 ?i) (right!1075 (merge!215_arg_1_9 ?i))))) error_value!1080)) error_value!1081))) (ite ((_ is Leaf!1070) (merge!215_arg_0_8 ?i)) true (ite ((_ is Node!1071) (merge!215_arg_0_8 ?i)) (ite ((_ is Leaf!1070) (merge!215_arg_1_9 ?i)) true (ite ((_ is Node!1071) (merge!215_arg_1_9 ?i)) (ite (bvslt (value!1073 (merge!215_arg_1_9 ?i)) (value!1073 (merge!215_arg_0_8 ?i))) (and (not (forall ((?z I_makeT!219)) (not (and (= (makeT!219_arg_0_5 ?z) (value!1073 (merge!215_arg_0_8 ?i))) (= (makeT!219_arg_1_6 ?z) (left!1074 (merge!215_arg_0_8 ?i))) (= (makeT!219_arg_2_7 ?z) (merge!215 (right!1075 (merge!215_arg_0_8 ?i)) (merge!215_arg_1_9 ?i))))) )) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_8 ?z) (right!1075 (merge!215_arg_0_8 ?i))) (= (merge!215_arg_1_9 ?z) (merge!215_arg_1_9 ?i)))) ))) (and (not (forall ((?z I_makeT!219)) (not (and (= (makeT!219_arg_0_5 ?z) (value!1073 (merge!215_arg_1_9 ?i))) (= (makeT!219_arg_1_6 ?z) (left!1074 (merge!215_arg_1_9 ?i))) (= (makeT!219_arg_2_7 ?z) (merge!215 (merge!215_arg_0_8 ?i) (right!1075 (merge!215_arg_1_9 ?i)))))) )) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_8 ?z) (merge!215_arg_0_8 ?i)) (= (merge!215_arg_1_9 ?z) (right!1075 (merge!215_arg_1_9 ?i))))) )))) true)) true))) ))
(assert (not (forall ((heap!221 Heap!1069) (element!220 (_ BitVec 32))) (or (not (and (hasLeftistProperty!210 heap!221) (not (forall ((?z I_hasLeftistProperty!210)) (not (= (hasLeftistProperty!210_arg_0_1 ?z) heap!221)) )))) (or (= (heapSize!212 (merge!215 heap!221 (Node!1071 (_ bv1 32) element!220 Leaf!1070 Leaf!1070))) (bvadd (heapSize!212 heap!221) (_ bv1 32))) (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_4 ?z) (merge!215 heap!221 (Node!1071 (_ bv1 32) element!220 Leaf!1070 Leaf!1070)))) ) (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_8 ?z) heap!221) (= (merge!215_arg_1_9 ?z) (Node!1071 (_ bv1 32) element!220 Leaf!1070 Leaf!1070)))) ) (forall ((?z I_heapSize!212)) (not (= (heapSize!212_arg_0_4 ?z) heap!221)) ))) )))
(check-sat)
(exit)

