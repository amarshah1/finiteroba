(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!880 0)) (((Cons!881 (head!882 (_ BitVec 32)) (tail!883 List!880)) (Nil!884))
))
(declare-fun error_value!885 () Bool)
(declare-fun positive!206 (List!880) Bool)
(declare-fun error_value!886 () List!880)
(declare-fun positiveMap_failling_1!209 ((Array (_ BitVec 32) (_ BitVec 32)) List!880) List!880)
(declare-fun error_value!887 () List!880)
(declare-sort I_positive!206 0)
(declare-fun positive!206_arg_0_1 (I_positive!206) List!880)
(declare-sort I_positiveMap_failling_1!209 0)
(declare-fun positiveMap_failling_1!209_arg_0_2 (I_positiveMap_failling_1!209) (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun positiveMap_failling_1!209_arg_1_3 (I_positiveMap_failling_1!209) List!880)
(assert (forall ((?i I_positive!206)) (and (= (positive!206 (positive!206_arg_0_1 ?i)) (ite ((_ is Cons!881) (positive!206_arg_0_1 ?i)) (ite (bvslt (head!882 (positive!206_arg_0_1 ?i)) (_ bv0 32)) false (positive!206 (tail!883 (positive!206_arg_0_1 ?i)))) (ite ((_ is Nil!884) (positive!206_arg_0_1 ?i)) true error_value!885))) (ite ((_ is Cons!881) (positive!206_arg_0_1 ?i)) (ite (bvslt (head!882 (positive!206_arg_0_1 ?i)) (_ bv0 32)) true (not (forall ((?z I_positive!206)) (not (= (positive!206_arg_0_1 ?z) (tail!883 (positive!206_arg_0_1 ?i)))) ))) true)) ))
(assert (forall ((?i I_positiveMap_failling_1!209)) (and (= (positiveMap_failling_1!209 (positiveMap_failling_1!209_arg_0_2 ?i) (positiveMap_failling_1!209_arg_1_3 ?i)) (ite ((_ is Cons!881) (positiveMap_failling_1!209_arg_1_3 ?i)) (Cons!881 (ite (bvslt (select (positiveMap_failling_1!209_arg_0_2 ?i) (head!882 (positiveMap_failling_1!209_arg_1_3 ?i))) (_ bv4294967295 32)) (_ bv0 32) (select (positiveMap_failling_1!209_arg_0_2 ?i) (head!882 (positiveMap_failling_1!209_arg_1_3 ?i)))) (positiveMap_failling_1!209 (positiveMap_failling_1!209_arg_0_2 ?i) (tail!883 (positiveMap_failling_1!209_arg_1_3 ?i)))) (ite ((_ is Nil!884) (positiveMap_failling_1!209_arg_1_3 ?i)) Nil!884 error_value!886))) (ite ((_ is Cons!881) (positiveMap_failling_1!209_arg_1_3 ?i)) (not (forall ((?z I_positiveMap_failling_1!209)) (not (and (= (positiveMap_failling_1!209_arg_0_2 ?z) (positiveMap_failling_1!209_arg_0_2 ?i)) (= (positiveMap_failling_1!209_arg_1_3 ?z) (tail!883 (positiveMap_failling_1!209_arg_1_3 ?i))))) )) true)) ))
(assert (not (forall ((list!208 List!880) (f!207 (Array (_ BitVec 32) (_ BitVec 32)))) (or (positive!206 (ite ((_ is Cons!881) list!208) (Cons!881 (head!882 list!208) (positiveMap_failling_1!209 f!207 (tail!883 list!208))) (ite ((_ is Nil!884) list!208) Nil!884 error_value!887))) (forall ((?z I_positive!206)) (not (= (positive!206_arg_0_1 ?z) (ite ((_ is Cons!881) list!208) (Cons!881 (head!882 list!208) (positiveMap_failling_1!209 f!207 (tail!883 list!208))) (ite ((_ is Nil!884) list!208) Nil!884 error_value!887)))) ) (not (ite ((_ is Cons!881) list!208) (not (forall ((?z I_positiveMap_failling_1!209)) (not (and (= (positiveMap_failling_1!209_arg_0_2 ?z) f!207) (= (positiveMap_failling_1!209_arg_1_3 ?z) (tail!883 list!208)))) )) true))) )))
(check-sat)
(exit)

