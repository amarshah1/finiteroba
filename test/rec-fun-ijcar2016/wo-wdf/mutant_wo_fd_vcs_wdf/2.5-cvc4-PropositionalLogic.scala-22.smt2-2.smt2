(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1272 0)) (((And!1273 (lhs!1274 Formula!1272) (rhs!1275 Formula!1272)) (Implies!1276 (lhs!1277 Formula!1272) (rhs!1278 Formula!1272)) (Literal!1279 (id!1280 (_ BitVec 32))) (Not!1281 (f!1282 Formula!1272)) (Or!1283 (lhs!1284 Formula!1272) (rhs!1285 Formula!1272)))
))
(declare-fun error_value!1286 () Bool)
(declare-fun isNNF!212 (Formula!1272) Bool)
(declare-fun error_value!1287 () Formula!1272)
(declare-fun nnf!210 (Formula!1272) Formula!1272)
(declare-sort I_isNNF!212 0)
(declare-fun isNNF!212_arg_0_1 (I_isNNF!212) Formula!1272)
(declare-sort I_nnf!210 0)
(declare-fun nnf!210_arg_0_2 (I_nnf!210) Formula!1272)
(assert (forall ((?i I_isNNF!212)) (and (= (isNNF!212 (isNNF!212_arg_0_1 ?i)) (ite ((_ is And!1273) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1275 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1274 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Or!1283) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1285 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1284 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Implies!1276) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1278 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1277 (isNNF!212_arg_0_1 ?i)))) (ite (and ((_ is Literal!1279) (f!1282 (isNNF!212_arg_0_1 ?i))) ((_ is Not!1281) (isNNF!212_arg_0_1 ?i))) true (ite ((_ is Not!1281) (isNNF!212_arg_0_1 ?i)) false (ite ((_ is Literal!1279) (isNNF!212_arg_0_1 ?i)) true error_value!1286))))))) (ite ((_ is And!1273) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1275 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1274 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Or!1283) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1285 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1284 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1276) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1278 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1277 (isNNF!212_arg_0_1 ?i)))) ))) true)))) ))
(assert (forall ((?i I_nnf!210)) (and (= (nnf!210 (nnf!210_arg_0_2 ?i)) (ite ((_ is And!1273) (nnf!210_arg_0_2 ?i)) (And!1273 (nnf!210 (lhs!1274 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1275 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Or!1283) (nnf!210_arg_0_2 ?i)) (Or!1283 (nnf!210 (lhs!1284 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1285 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Implies!1276) (nnf!210_arg_0_2 ?i)) (Implies!1276 (nnf!210 (lhs!1277 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1278 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is And!1273) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (Or!1283 (nnf!210 (Not!1281 (lhs!1274 (f!1282 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1281 (rhs!1275 (f!1282 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Or!1283) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (And!1273 (nnf!210 (Not!1281 (lhs!1284 (f!1282 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1281 (rhs!1285 (f!1282 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Implies!1276) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (And!1273 (nnf!210 (lhs!1277 (f!1282 (nnf!210_arg_0_2 ?i)))) (nnf!210 (Not!1281 (rhs!1278 (f!1282 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Not!1281) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (nnf!210 (f!1282 (f!1282 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is Literal!1279) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (nnf!210_arg_0_2 ?i) (ite ((_ is Literal!1279) (nnf!210_arg_0_2 ?i)) (nnf!210_arg_0_2 ?i) error_value!1287)))))))))) (ite ((_ is And!1273) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1274 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1275 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Or!1283) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1284 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1285 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1276) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1277 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1278 (nnf!210_arg_0_2 ?i)))) ))) (ite (and ((_ is And!1273) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1281 (lhs!1274 (f!1282 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1281 (rhs!1275 (f!1282 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Or!1283) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1281 (lhs!1284 (f!1282 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1281 (rhs!1285 (f!1282 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Implies!1276) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1277 (f!1282 (nnf!210_arg_0_2 ?i))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1281 (rhs!1278 (f!1282 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Not!1281) (f!1282 (nnf!210_arg_0_2 ?i))) ((_ is Not!1281) (nnf!210_arg_0_2 ?i))) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (f!1282 (f!1282 (nnf!210_arg_0_2 ?i))))) )) true)))))))) ))
(assert (not (forall ((BOUND_VARIABLE_483 (_ BitVec 32))) (or (isNNF!212 (Literal!1279 BOUND_VARIABLE_483)) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (Literal!1279 BOUND_VARIABLE_483))) )) )))
(check-sat)
(exit)

