(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2381 0)(Nat!2386 0)) (((cons!2382 (head!2383 Nat!2386) (tail!2384 Lst!2381)) (nil!2385))
((succ!2387 (pred!2388 Nat!2386)) (zero!2389))
))
(declare-fun error_value!2390 () Nat!2386)
(declare-fun last!265 (Lst!2381) Nat!2386)
(declare-fun error_value!2391 () Lst!2381)
(declare-fun append!252 (Lst!2381 Lst!2381) Lst!2381)
(declare-sort I_last!265 0)
(declare-fun last!265_arg_0_1 (I_last!265) Lst!2381)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_2 (I_append!252) Lst!2381)
(declare-fun append!252_arg_1_3 (I_append!252) Lst!2381)
(assert (forall ((?i I_last!265)) (and (= (last!265 (last!265_arg_0_1 ?i)) (ite ((_ is nil!2385) (last!265_arg_0_1 ?i)) zero!2389 (ite ((_ is cons!2382) (last!265_arg_0_1 ?i)) (ite (= (tail!2384 (last!265_arg_0_1 ?i)) nil!2385) (head!2383 (last!265_arg_0_1 ?i)) (last!265 (tail!2384 (last!265_arg_0_1 ?i)))) error_value!2390))) (ite ((_ is nil!2385) (last!265_arg_0_1 ?i)) true (ite ((_ is cons!2382) (last!265_arg_0_1 ?i)) (ite (= (tail!2384 (last!265_arg_0_1 ?i)) nil!2385) true (not (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) (tail!2384 (last!265_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_2 ?i) (append!252_arg_1_3 ?i)) (ite ((_ is nil!2385) (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i) (ite ((_ is cons!2382) (append!252_arg_0_2 ?i)) (cons!2382 (head!2383 (append!252_arg_0_2 ?i)) (append!252 (tail!2384 (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i))) error_value!2391))) (ite ((_ is nil!2385) (append!252_arg_0_2 ?i)) true (ite ((_ is cons!2382) (append!252_arg_0_2 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) (tail!2384 (append!252_arg_0_2 ?i))) (= (append!252_arg_1_3 ?z) (append!252_arg_1_3 ?i)))) )) true))) ))
(assert (not (forall ((xs!474 Lst!2381)) (or (= (last!265 xs!474) (last!265 (append!252 xs!474 nil!2385))) (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) xs!474)) ) (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) (append!252 xs!474 nil!2385))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) xs!474) (= (append!252_arg_1_3 ?z) nil!2385))) )) )))
(check-sat)
(exit)

