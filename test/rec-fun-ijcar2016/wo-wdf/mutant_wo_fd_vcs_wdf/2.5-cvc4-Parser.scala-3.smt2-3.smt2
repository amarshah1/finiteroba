(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((TokenList!969 0)(Token!974 0)) (((Cons!970 (head!971 Token!974) (tail!972 TokenList!969)) (Nil!973))
((Div!975) (IntLit!976 (value!977 Bool)) (LParen!978) (Minus!979) (Plus!980) (RParen!981) (Times!982))
))
(declare-fun error_value!983 () (_ BitVec 32))
(declare-fun size!206 (TokenList!969) (_ BitVec 32))
(declare-fun error_value!984 () TokenList!969)
(declare-fun append!209 (TokenList!969 TokenList!969) TokenList!969)
(declare-fun error_value!985 () TokenList!969)
(declare-sort I_size!206 0)
(declare-fun size!206_arg_0_1 (I_size!206) TokenList!969)
(declare-sort I_append!209 0)
(declare-fun append!209_arg_0_2 (I_append!209) TokenList!969)
(declare-fun append!209_arg_1_3 (I_append!209) TokenList!969)
(assert (forall ((?i I_size!206)) (and (= (ite ((_ is Nil!973) (size!206_arg_0_1 ?i)) (_ bv0 32) (ite ((_ is Cons!970) (size!206_arg_0_1 ?i)) (bvadd (size!206 (tail!972 (size!206_arg_0_1 ?i))) (_ bv1 32)) error_value!983)) (size!206 (size!206_arg_0_1 ?i))) (ite ((_ is Nil!973) (size!206_arg_0_1 ?i)) true (ite ((_ is Cons!970) (size!206_arg_0_1 ?i)) (not (forall ((?z I_size!206)) (not (= (size!206_arg_0_1 ?z) (tail!972 (size!206_arg_0_1 ?i)))) )) true))) ))
(assert (forall ((?i I_append!209)) (and (= (append!209 (append!209_arg_0_2 ?i) (append!209_arg_1_3 ?i)) (ite ((_ is Nil!973) (append!209_arg_0_2 ?i)) (append!209_arg_1_3 ?i) (ite ((_ is Cons!970) (append!209_arg_0_2 ?i)) (Cons!970 (head!971 (append!209_arg_0_2 ?i)) (append!209 (tail!972 (append!209_arg_0_2 ?i)) (append!209_arg_1_3 ?i))) error_value!984))) (ite ((_ is Nil!973) (append!209_arg_0_2 ?i)) true (ite ((_ is Cons!970) (append!209_arg_0_2 ?i)) (not (forall ((?z I_append!209)) (not (and (= (append!209_arg_0_2 ?z) (tail!972 (append!209_arg_0_2 ?i))) (= (append!209_arg_1_3 ?z) (append!209_arg_1_3 ?i)))) )) true))) ))
(assert (not (forall ((l1!207 TokenList!969) (l2!208 TokenList!969)) (or (= (size!206 error_value!985) (bvadd (size!206 l1!207) (size!206 l2!208))) (forall ((?z I_size!206)) (not (= (size!206_arg_0_1 ?z) error_value!985)) ) (forall ((?z I_size!206)) (not (= (size!206_arg_0_1 ?z) l1!207)) ) (forall ((?z I_size!206)) (not (= (size!206_arg_0_1 ?z) l2!208)) )) )))
(check-sat)
(exit)

