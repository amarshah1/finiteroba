(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1368 0)) (((And!1369 (lhs!1370 Formula!1368) (rhs!1371 Formula!1368)) (Implies!1372 (lhs!1373 Formula!1368) (rhs!1374 Formula!1368)) (Literal!1375 (id!1376 (_ BitVec 32))) (Not!1377 (f!1378 Formula!1368)) (Or!1379 (lhs!1380 Formula!1368) (rhs!1381 Formula!1368)))
))
(declare-fun error_value!1382 () Bool)
(declare-fun isSimplified!208 (Formula!1368) Bool)
(declare-fun error_value!1383 () Formula!1368)
(declare-fun simplify!206 (Formula!1368) Formula!1368)
(declare-sort I_isSimplified!208 0)
(declare-fun isSimplified!208_arg_0_1 (I_isSimplified!208) Formula!1368)
(declare-sort I_simplify!206 0)
(declare-fun simplify!206_arg_0_2 (I_simplify!206) Formula!1368)
(assert (forall ((?i I_isSimplified!208)) (and (= (isSimplified!208 (isSimplified!208_arg_0_1 ?i)) (ite ((_ is And!1369) (isSimplified!208_arg_0_1 ?i)) (and (isSimplified!208 (rhs!1371 (isSimplified!208_arg_0_1 ?i))) (isSimplified!208 (lhs!1370 (isSimplified!208_arg_0_1 ?i)))) (ite ((_ is Or!1379) (isSimplified!208_arg_0_1 ?i)) (and (isSimplified!208 (rhs!1381 (isSimplified!208_arg_0_1 ?i))) (isSimplified!208 (lhs!1380 (isSimplified!208_arg_0_1 ?i)))) (ite ((_ is Implies!1372) (isSimplified!208_arg_0_1 ?i)) false (ite ((_ is Not!1377) (isSimplified!208_arg_0_1 ?i)) (isSimplified!208 (f!1378 (isSimplified!208_arg_0_1 ?i))) (ite ((_ is Literal!1375) (isSimplified!208_arg_0_1 ?i)) true error_value!1382)))))) (ite ((_ is And!1369) (isSimplified!208_arg_0_1 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (rhs!1371 (isSimplified!208_arg_0_1 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (lhs!1370 (isSimplified!208_arg_0_1 ?i)))) ))) (ite ((_ is Or!1379) (isSimplified!208_arg_0_1 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (rhs!1381 (isSimplified!208_arg_0_1 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (lhs!1380 (isSimplified!208_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1372) (isSimplified!208_arg_0_1 ?i)) true (ite ((_ is Not!1377) (isSimplified!208_arg_0_1 ?i)) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (f!1378 (isSimplified!208_arg_0_1 ?i)))) )) true))))) ))
(assert (forall ((?i I_simplify!206)) (and (= (simplify!206 (simplify!206_arg_0_2 ?i)) (ite ((_ is And!1369) (simplify!206_arg_0_2 ?i)) (And!1369 (simplify!206 (lhs!1370 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1371 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Or!1379) (simplify!206_arg_0_2 ?i)) (Or!1379 (simplify!206 (lhs!1380 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1381 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Implies!1372) (simplify!206_arg_0_2 ?i)) (Or!1379 (Not!1377 (simplify!206 (lhs!1373 (simplify!206_arg_0_2 ?i)))) (simplify!206 (rhs!1374 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Not!1377) (simplify!206_arg_0_2 ?i)) (Not!1377 (simplify!206 (f!1378 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Literal!1375) (simplify!206_arg_0_2 ?i)) (simplify!206_arg_0_2 ?i) error_value!1383)))))) (ite ((_ is And!1369) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1370 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1371 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Or!1379) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1380 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1381 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1372) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1373 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1374 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Not!1377) (simplify!206_arg_0_2 ?i)) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (f!1378 (simplify!206_arg_0_2 ?i)))) )) true))))) ))
(assert (not (forall ((BOUND_VARIABLE_415 Formula!1368)) (or (and (or (isSimplified!208 BOUND_VARIABLE_415) (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) BOUND_VARIABLE_415)) )) (not (and (= (simplify!206 BOUND_VARIABLE_415) BOUND_VARIABLE_415) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) BOUND_VARIABLE_415)) ))))) (not (and (isSimplified!208 (Not!1377 BOUND_VARIABLE_415)) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (Not!1377 BOUND_VARIABLE_415))) )))) (or (= (Not!1377 BOUND_VARIABLE_415) (simplify!206 (Not!1377 BOUND_VARIABLE_415))) (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (Not!1377 BOUND_VARIABLE_415))) ))) )))
(check-sat)
(exit)

