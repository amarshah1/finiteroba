(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2641 0)(Nat!2646 0)) (((cons!2642 (head!2643 Nat!2646) (tail!2644 Lst!2641)) (nil!2645))
((succ!2647 (pred!2648 Nat!2646)) (zero!2649))
))
(declare-datatypes ((ZLst!2650 0)(Pair!2655 0)) (((zcons!2651 (zhead!2652 Pair!2655) (ztail!2653 ZLst!2650)) (znil!2654))
((mkpair!2656 (first!2657 Nat!2646) (second!2658 Nat!2646)))
))
(declare-fun error_value!2659 () ZLst!2650)
(declare-fun zip!288 (Lst!2641 Lst!2641) ZLst!2650)
(declare-fun error_value!2660 () Lst!2641)
(declare-fun append!252 (Lst!2641 Lst!2641) Lst!2641)
(declare-fun error_value!2661 () ZLst!2650)
(declare-fun zappend!291 (ZLst!2650 ZLst!2650) ZLst!2650)
(declare-fun error_value!2662 () Lst!2641)
(declare-fun take!260 (Nat!2646 Lst!2641) Lst!2641)
(declare-fun error_value!2663 () Nat!2646)
(declare-fun len!254 (Lst!2641) Nat!2646)
(declare-fun error_value!2664 () Lst!2641)
(declare-fun drop!257 (Nat!2646 Lst!2641) Lst!2641)
(declare-sort I_zip!288 0)
(declare-fun zip!288_arg_0_1 (I_zip!288) Lst!2641)
(declare-fun zip!288_arg_1_2 (I_zip!288) Lst!2641)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_3 (I_append!252) Lst!2641)
(declare-fun append!252_arg_1_4 (I_append!252) Lst!2641)
(declare-sort I_zappend!291 0)
(declare-fun zappend!291_arg_0_5 (I_zappend!291) ZLst!2650)
(declare-fun zappend!291_arg_1_6 (I_zappend!291) ZLst!2650)
(declare-sort I_take!260 0)
(declare-fun take!260_arg_0_7 (I_take!260) Nat!2646)
(declare-fun take!260_arg_1_8 (I_take!260) Lst!2641)
(declare-sort I_len!254 0)
(declare-fun len!254_arg_0_9 (I_len!254) Lst!2641)
(declare-sort I_drop!257 0)
(declare-fun drop!257_arg_0_10 (I_drop!257) Nat!2646)
(declare-fun drop!257_arg_1_11 (I_drop!257) Lst!2641)
(assert (forall ((?i I_zip!288)) (and (= (zip!288 (zip!288_arg_0_1 ?i) (zip!288_arg_1_2 ?i)) (ite ((_ is nil!2645) (zip!288_arg_0_1 ?i)) znil!2654 (ite ((_ is nil!2645) (zip!288_arg_1_2 ?i)) znil!2654 (ite (and ((_ is cons!2642) (zip!288_arg_1_2 ?i)) ((_ is cons!2642) (zip!288_arg_0_1 ?i))) (zcons!2651 (mkpair!2656 (head!2643 (zip!288_arg_0_1 ?i)) (head!2643 (zip!288_arg_1_2 ?i))) (zip!288 (tail!2644 (zip!288_arg_0_1 ?i)) (tail!2644 (zip!288_arg_1_2 ?i)))) error_value!2659)))) (ite ((_ is nil!2645) (zip!288_arg_0_1 ?i)) true (ite ((_ is nil!2645) (zip!288_arg_1_2 ?i)) true (ite (and ((_ is cons!2642) (zip!288_arg_1_2 ?i)) ((_ is cons!2642) (zip!288_arg_0_1 ?i))) (not (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_1 ?z) (tail!2644 (zip!288_arg_0_1 ?i))) (= (zip!288_arg_1_2 ?z) (tail!2644 (zip!288_arg_1_2 ?i))))) )) true)))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_3 ?i) (append!252_arg_1_4 ?i)) (ite ((_ is nil!2645) (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i) (ite ((_ is cons!2642) (append!252_arg_0_3 ?i)) (cons!2642 (head!2643 (append!252_arg_0_3 ?i)) (append!252 (tail!2644 (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i))) error_value!2660))) (ite ((_ is nil!2645) (append!252_arg_0_3 ?i)) true (ite ((_ is cons!2642) (append!252_arg_0_3 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) (tail!2644 (append!252_arg_0_3 ?i))) (= (append!252_arg_1_4 ?z) (append!252_arg_1_4 ?i)))) )) true))) ))
(assert (forall ((?i I_zappend!291)) (and (= (zappend!291 (zappend!291_arg_0_5 ?i) (zappend!291_arg_1_6 ?i)) (ite ((_ is znil!2654) (zappend!291_arg_0_5 ?i)) (zappend!291_arg_1_6 ?i) (ite ((_ is zcons!2651) (zappend!291_arg_0_5 ?i)) (zcons!2651 (zhead!2652 (zappend!291_arg_0_5 ?i)) (zappend!291 (ztail!2653 (zappend!291_arg_0_5 ?i)) (zappend!291_arg_1_6 ?i))) error_value!2661))) (ite ((_ is znil!2654) (zappend!291_arg_0_5 ?i)) true (ite ((_ is zcons!2651) (zappend!291_arg_0_5 ?i)) (not (forall ((?z I_zappend!291)) (not (and (= (zappend!291_arg_0_5 ?z) (ztail!2653 (zappend!291_arg_0_5 ?i))) (= (zappend!291_arg_1_6 ?z) (zappend!291_arg_1_6 ?i)))) )) true))) ))
(assert (forall ((?i I_take!260)) (and (= (take!260 (take!260_arg_0_7 ?i) (take!260_arg_1_8 ?i)) (ite ((_ is nil!2645) (take!260_arg_1_8 ?i)) nil!2645 (ite ((_ is zero!2649) (take!260_arg_0_7 ?i)) nil!2645 (ite (and ((_ is cons!2642) (take!260_arg_1_8 ?i)) ((_ is succ!2647) (take!260_arg_0_7 ?i))) (cons!2642 (head!2643 (take!260_arg_1_8 ?i)) (take!260 (pred!2648 (take!260_arg_0_7 ?i)) (tail!2644 (take!260_arg_1_8 ?i)))) error_value!2662)))) (ite ((_ is nil!2645) (take!260_arg_1_8 ?i)) true (ite ((_ is zero!2649) (take!260_arg_0_7 ?i)) true (ite (and ((_ is cons!2642) (take!260_arg_1_8 ?i)) ((_ is succ!2647) (take!260_arg_0_7 ?i))) (not (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_7 ?z) (pred!2648 (take!260_arg_0_7 ?i))) (= (take!260_arg_1_8 ?z) (tail!2644 (take!260_arg_1_8 ?i))))) )) true)))) ))
(assert (forall ((?i I_len!254)) (and (= (len!254 (len!254_arg_0_9 ?i)) (ite ((_ is nil!2645) (len!254_arg_0_9 ?i)) zero!2649 (ite ((_ is cons!2642) (len!254_arg_0_9 ?i)) (succ!2647 (len!254 (tail!2644 (len!254_arg_0_9 ?i)))) error_value!2663))) (ite ((_ is nil!2645) (len!254_arg_0_9 ?i)) true (ite ((_ is cons!2642) (len!254_arg_0_9 ?i)) (not (forall ((?z I_len!254)) (not (= (len!254_arg_0_9 ?z) (tail!2644 (len!254_arg_0_9 ?i)))) )) true))) ))
(assert (forall ((?i I_drop!257)) (and (= (drop!257 (drop!257_arg_0_10 ?i) (drop!257_arg_1_11 ?i)) (ite ((_ is nil!2645) (drop!257_arg_1_11 ?i)) nil!2645 (ite ((_ is zero!2649) (drop!257_arg_0_10 ?i)) (drop!257_arg_1_11 ?i) (ite (and ((_ is cons!2642) (drop!257_arg_1_11 ?i)) ((_ is succ!2647) (drop!257_arg_0_10 ?i))) (drop!257 (pred!2648 (drop!257_arg_0_10 ?i)) (tail!2644 (drop!257_arg_1_11 ?i))) error_value!2664)))) (ite ((_ is nil!2645) (drop!257_arg_1_11 ?i)) true (ite ((_ is zero!2649) (drop!257_arg_0_10 ?i)) true (ite (and ((_ is cons!2642) (drop!257_arg_1_11 ?i)) ((_ is succ!2647) (drop!257_arg_0_10 ?i))) (not (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_10 ?z) (pred!2648 (drop!257_arg_0_10 ?i))) (= (drop!257_arg_1_11 ?z) (tail!2644 (drop!257_arg_1_11 ?i))))) )) true)))) ))
(assert (not (forall ((xs!549 Lst!2641) (ys!550 Lst!2641) (zs!551 Lst!2641)) (or (= (zip!288 (append!252 xs!549 ys!550) zs!551) (zappend!291 (zip!288 ys!550 (drop!257 (len!254 xs!549) zs!551)) (zip!288 xs!549 (take!260 (len!254 xs!549) zs!551)))) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_1 ?z) (append!252 xs!549 ys!550)) (= (zip!288_arg_1_2 ?z) zs!551))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) xs!549) (= (append!252_arg_1_4 ?z) ys!550))) ) (forall ((?z I_zappend!291)) (not (and (= (zappend!291_arg_0_5 ?z) (zip!288 ys!550 (drop!257 (len!254 xs!549) zs!551))) (= (zappend!291_arg_1_6 ?z) (zip!288 xs!549 (take!260 (len!254 xs!549) zs!551))))) ) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_1 ?z) ys!550) (= (zip!288_arg_1_2 ?z) (drop!257 (len!254 xs!549) zs!551)))) ) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_10 ?z) (len!254 xs!549)) (= (drop!257_arg_1_11 ?z) zs!551))) ) (forall ((?z I_len!254)) (not (= (len!254_arg_0_9 ?z) xs!549)) ) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_1 ?z) xs!549) (= (zip!288_arg_1_2 ?z) (take!260 (len!254 xs!549) zs!551)))) ) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_7 ?z) (len!254 xs!549)) (= (take!260_arg_1_8 ?z) zs!551))) ) (forall ((?z I_len!254)) (not (= (len!254_arg_0_9 ?z) xs!549)) )) )))
(check-sat)
(exit)

