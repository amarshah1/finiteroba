(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1320 0)) (((And!1321 (lhs!1322 Formula!1320) (rhs!1323 Formula!1320)) (Implies!1324 (lhs!1325 Formula!1320) (rhs!1326 Formula!1320)) (Literal!1327 (id!1328 (_ BitVec 32))) (Not!1329 (f!1330 Formula!1320)) (Or!1331 (lhs!1332 Formula!1320) (rhs!1333 Formula!1320)))
))
(declare-fun error_value!1334 () Bool)
(declare-fun isSimplified!208 (Formula!1320) Bool)
(declare-fun error_value!1335 () Formula!1320)
(declare-fun simplify!206 (Formula!1320) Formula!1320)
(declare-sort I_isSimplified!208 0)
(declare-fun isSimplified!208_arg_0_1 (I_isSimplified!208) Formula!1320)
(declare-sort I_simplify!206 0)
(declare-fun simplify!206_arg_0_2 (I_simplify!206) Formula!1320)
(assert (forall ((?i I_isSimplified!208)) (and (= (isSimplified!208 (isSimplified!208_arg_0_1 ?i)) (ite ((_ is And!1321) (isSimplified!208_arg_0_1 ?i)) (and (isSimplified!208 (rhs!1323 (isSimplified!208_arg_0_1 ?i))) (isSimplified!208 (lhs!1322 (isSimplified!208_arg_0_1 ?i)))) (ite ((_ is Or!1331) (isSimplified!208_arg_0_1 ?i)) (and (isSimplified!208 (rhs!1333 (isSimplified!208_arg_0_1 ?i))) (isSimplified!208 (lhs!1332 (isSimplified!208_arg_0_1 ?i)))) (ite ((_ is Implies!1324) (isSimplified!208_arg_0_1 ?i)) false (ite ((_ is Not!1329) (isSimplified!208_arg_0_1 ?i)) (isSimplified!208 (f!1330 (isSimplified!208_arg_0_1 ?i))) (ite ((_ is Literal!1327) (isSimplified!208_arg_0_1 ?i)) true error_value!1334)))))) (ite ((_ is And!1321) (isSimplified!208_arg_0_1 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (rhs!1323 (isSimplified!208_arg_0_1 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (lhs!1322 (isSimplified!208_arg_0_1 ?i)))) ))) (ite ((_ is Or!1331) (isSimplified!208_arg_0_1 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (rhs!1333 (isSimplified!208_arg_0_1 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (lhs!1332 (isSimplified!208_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1324) (isSimplified!208_arg_0_1 ?i)) true (ite ((_ is Not!1329) (isSimplified!208_arg_0_1 ?i)) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (f!1330 (isSimplified!208_arg_0_1 ?i)))) )) true))))) ))
(assert (forall ((?i I_simplify!206)) (and (= (simplify!206 (simplify!206_arg_0_2 ?i)) (ite ((_ is And!1321) (simplify!206_arg_0_2 ?i)) (And!1321 (simplify!206 (lhs!1322 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1323 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Or!1331) (simplify!206_arg_0_2 ?i)) (Or!1331 (simplify!206 (lhs!1332 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1333 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Implies!1324) (simplify!206_arg_0_2 ?i)) (Or!1331 (Not!1329 (simplify!206 (lhs!1325 (simplify!206_arg_0_2 ?i)))) (simplify!206 (rhs!1326 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Not!1329) (simplify!206_arg_0_2 ?i)) (Not!1329 (simplify!206 (f!1330 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Literal!1327) (simplify!206_arg_0_2 ?i)) (simplify!206_arg_0_2 ?i) error_value!1335)))))) (ite ((_ is And!1321) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1322 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1323 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Or!1331) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1332 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1333 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1324) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1325 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1326 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Not!1329) (simplify!206_arg_0_2 ?i)) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (f!1330 (simplify!206_arg_0_2 ?i)))) )) true))))) ))
(assert (not (forall ((BOUND_VARIABLE_433 Formula!1320) (BOUND_VARIABLE_434 Formula!1320)) (or (and (or (= (simplify!206 BOUND_VARIABLE_434) BOUND_VARIABLE_434) (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) BOUND_VARIABLE_434)) )) (not (and (isSimplified!208 BOUND_VARIABLE_434) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) BOUND_VARIABLE_434)) ))))) (and (or (isSimplified!208 BOUND_VARIABLE_433) (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) BOUND_VARIABLE_433)) )) (not (and (= (simplify!206 BOUND_VARIABLE_433) BOUND_VARIABLE_433) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) BOUND_VARIABLE_433)) ))))) (not (and (isSimplified!208 (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434)) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_1 ?z) (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434))) )))) (or (= (simplify!206 (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434)) (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434)) (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (And!1321 BOUND_VARIABLE_433 BOUND_VARIABLE_434))) ))) )))
(check-sat)
(exit)

