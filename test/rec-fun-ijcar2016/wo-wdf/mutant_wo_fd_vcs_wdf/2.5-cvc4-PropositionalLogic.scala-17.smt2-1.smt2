(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1189 0)) (((And!1190 (lhs!1191 Formula!1189) (rhs!1192 Formula!1189)) (Implies!1193 (lhs!1194 Formula!1189) (rhs!1195 Formula!1189)) (Literal!1196 (id!1197 (_ BitVec 32))) (Not!1198 (f!1199 Formula!1189)) (Or!1200 (lhs!1201 Formula!1189) (rhs!1202 Formula!1189)))
))
(declare-fun error_value!1203 () Bool)
(declare-fun isNNF!212 (Formula!1189) Bool)
(declare-fun error_value!1204 () Formula!1189)
(declare-fun error_value!1205 () Bool)
(declare-fun simplify!206 (Formula!1189) Formula!1189)
(declare-fun isSimplified!208 (Formula!1189) Bool)
(declare-sort I_isNNF!212 0)
(declare-fun isNNF!212_arg_0_1 (I_isNNF!212) Formula!1189)
(declare-sort I_simplify!206 0)
(declare-fun simplify!206_arg_0_2 (I_simplify!206) Formula!1189)
(declare-sort I_isSimplified!208 0)
(declare-fun isSimplified!208_arg_0_3 (I_isSimplified!208) Formula!1189)
(assert (forall ((?i I_isNNF!212)) (and (= (isNNF!212 (isNNF!212_arg_0_1 ?i)) (ite ((_ is And!1190) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1192 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1191 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Or!1200) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1202 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1201 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Implies!1193) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1195 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1194 (isNNF!212_arg_0_1 ?i)))) (ite (and ((_ is Literal!1196) (f!1199 (isNNF!212_arg_0_1 ?i))) ((_ is Not!1198) (isNNF!212_arg_0_1 ?i))) true (ite ((_ is Not!1198) (isNNF!212_arg_0_1 ?i)) false (ite ((_ is Literal!1196) (isNNF!212_arg_0_1 ?i)) true error_value!1203))))))) (ite ((_ is And!1190) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1192 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1191 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Or!1200) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1202 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1201 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1193) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1195 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1194 (isNNF!212_arg_0_1 ?i)))) ))) true)))) ))
(assert (forall ((?i I_simplify!206)) (and (= (simplify!206 (simplify!206_arg_0_2 ?i)) (ite ((_ is And!1190) (simplify!206_arg_0_2 ?i)) (And!1190 (simplify!206 (lhs!1191 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1192 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Or!1200) (simplify!206_arg_0_2 ?i)) (Or!1200 (simplify!206 (lhs!1201 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1202 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Implies!1193) (simplify!206_arg_0_2 ?i)) (Or!1200 (Not!1198 (simplify!206 (lhs!1194 (simplify!206_arg_0_2 ?i)))) (simplify!206 (rhs!1195 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Not!1198) (simplify!206_arg_0_2 ?i)) (Not!1198 (simplify!206 (f!1199 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Literal!1196) (simplify!206_arg_0_2 ?i)) (simplify!206_arg_0_2 ?i) error_value!1204)))))) (ite ((_ is And!1190) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1191 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1192 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Or!1200) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1201 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1202 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1193) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1194 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1195 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Not!1198) (simplify!206_arg_0_2 ?i)) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (f!1199 (simplify!206_arg_0_2 ?i)))) )) true))))) ))
(assert (forall ((?i I_isSimplified!208)) (and (= (isSimplified!208 (isSimplified!208_arg_0_3 ?i)) (ite ((_ is And!1190) (isSimplified!208_arg_0_3 ?i)) (and (isSimplified!208 (rhs!1192 (isSimplified!208_arg_0_3 ?i))) (isSimplified!208 (lhs!1191 (isSimplified!208_arg_0_3 ?i)))) (ite ((_ is Or!1200) (isSimplified!208_arg_0_3 ?i)) (and (isSimplified!208 (rhs!1202 (isSimplified!208_arg_0_3 ?i))) (isSimplified!208 (lhs!1201 (isSimplified!208_arg_0_3 ?i)))) (ite ((_ is Implies!1193) (isSimplified!208_arg_0_3 ?i)) false (ite ((_ is Not!1198) (isSimplified!208_arg_0_3 ?i)) (isSimplified!208 (f!1199 (isSimplified!208_arg_0_3 ?i))) (ite ((_ is Literal!1196) (isSimplified!208_arg_0_3 ?i)) true error_value!1205)))))) (ite ((_ is And!1190) (isSimplified!208_arg_0_3 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (rhs!1192 (isSimplified!208_arg_0_3 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (lhs!1191 (isSimplified!208_arg_0_3 ?i)))) ))) (ite ((_ is Or!1200) (isSimplified!208_arg_0_3 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (rhs!1202 (isSimplified!208_arg_0_3 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (lhs!1201 (isSimplified!208_arg_0_3 ?i)))) ))) (ite ((_ is Implies!1193) (isSimplified!208_arg_0_3 ?i)) true (ite ((_ is Not!1198) (isSimplified!208_arg_0_3 ?i)) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (f!1199 (isSimplified!208_arg_0_3 ?i)))) )) true))))) ))
(assert (not (forall ((BOUND_VARIABLE_462 (_ BitVec 32))) (or (or (isNNF!212 (Literal!1196 BOUND_VARIABLE_462)) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (Literal!1196 BOUND_VARIABLE_462))) )) (or (isNNF!212 (simplify!206 (Literal!1196 BOUND_VARIABLE_462))) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (simplify!206 (Literal!1196 BOUND_VARIABLE_462)))) ) (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (Literal!1196 BOUND_VARIABLE_462))) ))) )))
(check-sat)
(exit)

