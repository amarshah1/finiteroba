(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1256 0)) (((And!1257 (lhs!1258 Formula!1256) (rhs!1259 Formula!1256)) (Implies!1260 (lhs!1261 Formula!1256) (rhs!1262 Formula!1256)) (Literal!1263 (id!1264 (_ BitVec 32))) (Not!1265 (f!1266 Formula!1256)) (Or!1267 (lhs!1268 Formula!1256) (rhs!1269 Formula!1256)))
))
(declare-fun error_value!1270 () Bool)
(declare-fun isNNF!212 (Formula!1256) Bool)
(declare-fun error_value!1271 () Formula!1256)
(declare-fun nnf!210 (Formula!1256) Formula!1256)
(declare-sort I_isNNF!212 0)
(declare-fun isNNF!212_arg_0_1 (I_isNNF!212) Formula!1256)
(declare-sort I_nnf!210 0)
(declare-fun nnf!210_arg_0_2 (I_nnf!210) Formula!1256)
(assert (forall ((?i I_isNNF!212)) (and (= (isNNF!212 (isNNF!212_arg_0_1 ?i)) (ite ((_ is And!1257) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1259 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1258 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Or!1267) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1269 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1268 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Implies!1260) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1262 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1261 (isNNF!212_arg_0_1 ?i)))) (ite (and ((_ is Literal!1263) (f!1266 (isNNF!212_arg_0_1 ?i))) ((_ is Not!1265) (isNNF!212_arg_0_1 ?i))) true (ite ((_ is Not!1265) (isNNF!212_arg_0_1 ?i)) false (ite ((_ is Literal!1263) (isNNF!212_arg_0_1 ?i)) true error_value!1270))))))) (ite ((_ is And!1257) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1259 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1258 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Or!1267) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1269 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1268 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1260) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1262 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1261 (isNNF!212_arg_0_1 ?i)))) ))) true)))) ))
(assert (forall ((?i I_nnf!210)) (and (= (nnf!210 (nnf!210_arg_0_2 ?i)) (ite ((_ is And!1257) (nnf!210_arg_0_2 ?i)) (And!1257 (nnf!210 (lhs!1258 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1259 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Or!1267) (nnf!210_arg_0_2 ?i)) (Or!1267 (nnf!210 (lhs!1268 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1269 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Implies!1260) (nnf!210_arg_0_2 ?i)) (Implies!1260 (nnf!210 (lhs!1261 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1262 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is And!1257) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (Or!1267 (nnf!210 (Not!1265 (lhs!1258 (f!1266 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1265 (rhs!1259 (f!1266 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Or!1267) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (And!1257 (nnf!210 (Not!1265 (lhs!1268 (f!1266 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1265 (rhs!1269 (f!1266 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Implies!1260) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (And!1257 (nnf!210 (lhs!1261 (f!1266 (nnf!210_arg_0_2 ?i)))) (nnf!210 (Not!1265 (rhs!1262 (f!1266 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Not!1265) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (nnf!210 (f!1266 (f!1266 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is Literal!1263) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (nnf!210_arg_0_2 ?i) (ite ((_ is Literal!1263) (nnf!210_arg_0_2 ?i)) (nnf!210_arg_0_2 ?i) error_value!1271)))))))))) (ite ((_ is And!1257) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1258 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1259 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Or!1267) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1268 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1269 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1260) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1261 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1262 (nnf!210_arg_0_2 ?i)))) ))) (ite (and ((_ is And!1257) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1265 (lhs!1258 (f!1266 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1265 (rhs!1259 (f!1266 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Or!1267) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1265 (lhs!1268 (f!1266 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1265 (rhs!1269 (f!1266 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Implies!1260) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1261 (f!1266 (nnf!210_arg_0_2 ?i))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1265 (rhs!1262 (f!1266 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Not!1265) (f!1266 (nnf!210_arg_0_2 ?i))) ((_ is Not!1265) (nnf!210_arg_0_2 ?i))) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (f!1266 (f!1266 (nnf!210_arg_0_2 ?i))))) )) true)))))))) ))
(assert (not (forall ((BOUND_VARIABLE_523 Formula!1256) (BOUND_VARIABLE_524 Formula!1256)) (or (and (or (isNNF!212 BOUND_VARIABLE_524) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) BOUND_VARIABLE_524)) )) (not (and (= (nnf!210 BOUND_VARIABLE_524) BOUND_VARIABLE_524) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) BOUND_VARIABLE_524)) ))))) (and (or (isNNF!212 BOUND_VARIABLE_523) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) BOUND_VARIABLE_523)) )) (not (= (Implies!1260 BOUND_VARIABLE_523 BOUND_VARIABLE_524) BOUND_VARIABLE_523))) (not (and (isNNF!212 (nnf!210 BOUND_VARIABLE_523)) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (nnf!210 BOUND_VARIABLE_523))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) BOUND_VARIABLE_523)) )))) (or (= (nnf!210 (Implies!1260 BOUND_VARIABLE_523 BOUND_VARIABLE_524)) (Implies!1260 BOUND_VARIABLE_523 BOUND_VARIABLE_524)) (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Implies!1260 BOUND_VARIABLE_523 BOUND_VARIABLE_524))) ))) )))
(check-sat)
(exit)

