(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2595 0)) (((succ!2596 (pred!2597 Nat!2595)) (zero!2598))
))
(declare-datatypes ((Lst!2599 0)) (((cons!2600 (head!2601 Nat!2595) (tail!2602 Lst!2599)) (nil!2603))
))
(declare-fun error_value!2604 () Lst!2599)
(declare-fun take!260 (Nat!2595 Lst!2599) Lst!2599)
(declare-fun error_value!2605 () Lst!2599)
(declare-fun append!252 (Lst!2599 Lst!2599) Lst!2599)
(declare-fun error_value!2606 () Nat!2595)
(declare-fun minus!240 (Nat!2595 Nat!2595) Nat!2595)
(declare-fun error_value!2607 () Nat!2595)
(declare-fun len!254 (Lst!2599) Nat!2595)
(declare-sort I_take!260 0)
(declare-fun take!260_arg_0_1 (I_take!260) Nat!2595)
(declare-fun take!260_arg_1_2 (I_take!260) Lst!2599)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_3 (I_append!252) Lst!2599)
(declare-fun append!252_arg_1_4 (I_append!252) Lst!2599)
(declare-sort I_minus!240 0)
(declare-fun minus!240_arg_0_5 (I_minus!240) Nat!2595)
(declare-fun minus!240_arg_1_6 (I_minus!240) Nat!2595)
(declare-sort I_len!254 0)
(declare-fun len!254_arg_0_7 (I_len!254) Lst!2599)
(assert (forall ((?i I_take!260)) (and (= (take!260 (take!260_arg_0_1 ?i) (take!260_arg_1_2 ?i)) (ite ((_ is nil!2603) (take!260_arg_1_2 ?i)) nil!2603 (ite ((_ is zero!2598) (take!260_arg_0_1 ?i)) nil!2603 (ite (and ((_ is cons!2600) (take!260_arg_1_2 ?i)) ((_ is succ!2596) (take!260_arg_0_1 ?i))) (cons!2600 (head!2601 (take!260_arg_1_2 ?i)) (take!260 (pred!2597 (take!260_arg_0_1 ?i)) (tail!2602 (take!260_arg_1_2 ?i)))) error_value!2604)))) (ite ((_ is nil!2603) (take!260_arg_1_2 ?i)) true (ite ((_ is zero!2598) (take!260_arg_0_1 ?i)) true (ite (and ((_ is cons!2600) (take!260_arg_1_2 ?i)) ((_ is succ!2596) (take!260_arg_0_1 ?i))) (not (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_1 ?z) (pred!2597 (take!260_arg_0_1 ?i))) (= (take!260_arg_1_2 ?z) (tail!2602 (take!260_arg_1_2 ?i))))) )) true)))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_3 ?i) (append!252_arg_1_4 ?i)) (ite ((_ is nil!2603) (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i) (ite ((_ is cons!2600) (append!252_arg_0_3 ?i)) (cons!2600 (head!2601 (append!252_arg_0_3 ?i)) (append!252 (tail!2602 (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i))) error_value!2605))) (ite ((_ is nil!2603) (append!252_arg_0_3 ?i)) true (ite ((_ is cons!2600) (append!252_arg_0_3 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) (tail!2602 (append!252_arg_0_3 ?i))) (= (append!252_arg_1_4 ?z) (append!252_arg_1_4 ?i)))) )) true))) ))
(assert (forall ((?i I_minus!240)) (and (= (minus!240 (minus!240_arg_0_5 ?i) (minus!240_arg_1_6 ?i)) (ite ((_ is zero!2598) (minus!240_arg_0_5 ?i)) zero!2598 (ite ((_ is zero!2598) (minus!240_arg_1_6 ?i)) (minus!240_arg_0_5 ?i) (ite (and ((_ is succ!2596) (minus!240_arg_1_6 ?i)) ((_ is succ!2596) (minus!240_arg_0_5 ?i))) (minus!240 (pred!2597 (minus!240_arg_0_5 ?i)) (pred!2597 (minus!240_arg_1_6 ?i))) error_value!2606)))) (ite ((_ is zero!2598) (minus!240_arg_0_5 ?i)) true (ite ((_ is zero!2598) (minus!240_arg_1_6 ?i)) true (ite (and ((_ is succ!2596) (minus!240_arg_1_6 ?i)) ((_ is succ!2596) (minus!240_arg_0_5 ?i))) (not (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_5 ?z) (pred!2597 (minus!240_arg_0_5 ?i))) (= (minus!240_arg_1_6 ?z) (pred!2597 (minus!240_arg_1_6 ?i))))) )) true)))) ))
(assert (forall ((?i I_len!254)) (and (= (len!254 (len!254_arg_0_7 ?i)) (ite ((_ is nil!2603) (len!254_arg_0_7 ?i)) zero!2598 (ite ((_ is cons!2600) (len!254_arg_0_7 ?i)) (succ!2596 (len!254 (tail!2602 (len!254_arg_0_7 ?i)))) error_value!2607))) (ite ((_ is nil!2603) (len!254_arg_0_7 ?i)) true (ite ((_ is cons!2600) (len!254_arg_0_7 ?i)) (not (forall ((?z I_len!254)) (not (= (len!254_arg_0_7 ?z) (tail!2602 (len!254_arg_0_7 ?i)))) )) true))) ))
(assert (not (forall ((n!537 Nat!2595) (xs!538 Lst!2599) (ys!539 Lst!2599)) (or (= (take!260 n!537 xs!538) (append!252 (take!260 n!537 xs!538) (take!260 (minus!240 n!537 (len!254 (append!252 xs!538 ys!539))) ys!539))) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_1 ?z) n!537) (= (take!260_arg_1_2 ?z) xs!538))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) (take!260 n!537 xs!538)) (= (append!252_arg_1_4 ?z) (take!260 (minus!240 n!537 (len!254 (append!252 xs!538 ys!539))) ys!539)))) ) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_1 ?z) n!537) (= (take!260_arg_1_2 ?z) xs!538))) ) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_1 ?z) (minus!240 n!537 (len!254 (append!252 xs!538 ys!539)))) (= (take!260_arg_1_2 ?z) ys!539))) ) (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_5 ?z) n!537) (= (minus!240_arg_1_6 ?z) (len!254 (append!252 xs!538 ys!539))))) ) (forall ((?z I_len!254)) (not (= (len!254_arg_0_7 ?z) (append!252 xs!538 ys!539))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) xs!538) (= (append!252_arg_1_4 ?z) ys!539))) )) )))
(check-sat)
(exit)

