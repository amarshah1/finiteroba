(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2513 0)) (((succ!2514 (pred!2515 Nat!2513)) (zero!2516))
))
(declare-datatypes ((Lst!2517 0)) (((cons!2518 (head!2519 Nat!2513) (tail!2520 Lst!2517)) (nil!2521))
))
(declare-fun error_value!2522 () Lst!2517)
(declare-fun error_value!2523 () Lst!2517)
(declare-fun rev!275 (Lst!2517) Lst!2517)
(declare-fun append!252 (Lst!2517 Lst!2517) Lst!2517)
(declare-fun error_value!2524 () Lst!2517)
(declare-fun drop!257 (Nat!2513 Lst!2517) Lst!2517)
(declare-fun error_value!2525 () Lst!2517)
(declare-fun take!260 (Nat!2513 Lst!2517) Lst!2517)
(declare-fun error_value!2526 () Nat!2513)
(declare-fun minus!240 (Nat!2513 Nat!2513) Nat!2513)
(declare-fun error_value!2527 () Nat!2513)
(declare-fun len!254 (Lst!2517) Nat!2513)
(declare-sort I_rev!275 0)
(declare-fun rev!275_arg_0_1 (I_rev!275) Lst!2517)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_2 (I_append!252) Lst!2517)
(declare-fun append!252_arg_1_3 (I_append!252) Lst!2517)
(declare-sort I_drop!257 0)
(declare-fun drop!257_arg_0_4 (I_drop!257) Nat!2513)
(declare-fun drop!257_arg_1_5 (I_drop!257) Lst!2517)
(declare-sort I_take!260 0)
(declare-fun take!260_arg_0_6 (I_take!260) Nat!2513)
(declare-fun take!260_arg_1_7 (I_take!260) Lst!2517)
(declare-sort I_minus!240 0)
(declare-fun minus!240_arg_0_8 (I_minus!240) Nat!2513)
(declare-fun minus!240_arg_1_9 (I_minus!240) Nat!2513)
(declare-sort I_len!254 0)
(declare-fun len!254_arg_0_10 (I_len!254) Lst!2517)
(assert (forall ((?i I_rev!275)) (and (= (rev!275 (rev!275_arg_0_1 ?i)) (ite ((_ is nil!2521) (rev!275_arg_0_1 ?i)) nil!2521 (ite ((_ is cons!2518) (rev!275_arg_0_1 ?i)) (append!252 (rev!275 (tail!2520 (rev!275_arg_0_1 ?i))) (cons!2518 (head!2519 (rev!275_arg_0_1 ?i)) nil!2521)) error_value!2522))) (ite ((_ is nil!2521) (rev!275_arg_0_1 ?i)) true (ite ((_ is cons!2518) (rev!275_arg_0_1 ?i)) (and (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) (rev!275 (tail!2520 (rev!275_arg_0_1 ?i)))) (= (append!252_arg_1_3 ?z) (cons!2518 (head!2519 (rev!275_arg_0_1 ?i)) nil!2521)))) )) (not (forall ((?z I_rev!275)) (not (= (rev!275_arg_0_1 ?z) (tail!2520 (rev!275_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_2 ?i) (append!252_arg_1_3 ?i)) (ite ((_ is nil!2521) (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i) (ite ((_ is cons!2518) (append!252_arg_0_2 ?i)) (cons!2518 (head!2519 (append!252_arg_0_2 ?i)) (append!252 (tail!2520 (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i))) error_value!2523))) (ite ((_ is nil!2521) (append!252_arg_0_2 ?i)) true (ite ((_ is cons!2518) (append!252_arg_0_2 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) (tail!2520 (append!252_arg_0_2 ?i))) (= (append!252_arg_1_3 ?z) (append!252_arg_1_3 ?i)))) )) true))) ))
(assert (forall ((?i I_drop!257)) (and (= (drop!257 (drop!257_arg_0_4 ?i) (drop!257_arg_1_5 ?i)) (ite ((_ is nil!2521) (drop!257_arg_1_5 ?i)) nil!2521 (ite ((_ is zero!2516) (drop!257_arg_0_4 ?i)) (drop!257_arg_1_5 ?i) (ite (and ((_ is cons!2518) (drop!257_arg_1_5 ?i)) ((_ is succ!2514) (drop!257_arg_0_4 ?i))) (drop!257 (pred!2515 (drop!257_arg_0_4 ?i)) (tail!2520 (drop!257_arg_1_5 ?i))) error_value!2524)))) (ite ((_ is nil!2521) (drop!257_arg_1_5 ?i)) true (ite ((_ is zero!2516) (drop!257_arg_0_4 ?i)) true (ite (and ((_ is cons!2518) (drop!257_arg_1_5 ?i)) ((_ is succ!2514) (drop!257_arg_0_4 ?i))) (not (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_4 ?z) (pred!2515 (drop!257_arg_0_4 ?i))) (= (drop!257_arg_1_5 ?z) (tail!2520 (drop!257_arg_1_5 ?i))))) )) true)))) ))
(assert (forall ((?i I_take!260)) (and (= (take!260 (take!260_arg_0_6 ?i) (take!260_arg_1_7 ?i)) (ite ((_ is nil!2521) (take!260_arg_1_7 ?i)) nil!2521 (ite ((_ is zero!2516) (take!260_arg_0_6 ?i)) nil!2521 (ite (and ((_ is cons!2518) (take!260_arg_1_7 ?i)) ((_ is succ!2514) (take!260_arg_0_6 ?i))) (cons!2518 (head!2519 (take!260_arg_1_7 ?i)) (take!260 (pred!2515 (take!260_arg_0_6 ?i)) (tail!2520 (take!260_arg_1_7 ?i)))) error_value!2525)))) (ite ((_ is nil!2521) (take!260_arg_1_7 ?i)) true (ite ((_ is zero!2516) (take!260_arg_0_6 ?i)) true (ite (and ((_ is cons!2518) (take!260_arg_1_7 ?i)) ((_ is succ!2514) (take!260_arg_0_6 ?i))) (not (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_6 ?z) (pred!2515 (take!260_arg_0_6 ?i))) (= (take!260_arg_1_7 ?z) (tail!2520 (take!260_arg_1_7 ?i))))) )) true)))) ))
(assert (forall ((?i I_minus!240)) (and (= (minus!240 (minus!240_arg_0_8 ?i) (minus!240_arg_1_9 ?i)) (ite ((_ is zero!2516) (minus!240_arg_0_8 ?i)) zero!2516 (ite ((_ is zero!2516) (minus!240_arg_1_9 ?i)) (minus!240_arg_0_8 ?i) (ite (and ((_ is succ!2514) (minus!240_arg_1_9 ?i)) ((_ is succ!2514) (minus!240_arg_0_8 ?i))) (minus!240 (pred!2515 (minus!240_arg_0_8 ?i)) (pred!2515 (minus!240_arg_1_9 ?i))) error_value!2526)))) (ite ((_ is zero!2516) (minus!240_arg_0_8 ?i)) true (ite ((_ is zero!2516) (minus!240_arg_1_9 ?i)) true (ite (and ((_ is succ!2514) (minus!240_arg_1_9 ?i)) ((_ is succ!2514) (minus!240_arg_0_8 ?i))) (not (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_8 ?z) (pred!2515 (minus!240_arg_0_8 ?i))) (= (minus!240_arg_1_9 ?z) (pred!2515 (minus!240_arg_1_9 ?i))))) )) true)))) ))
(assert (forall ((?i I_len!254)) (and (= (len!254 (len!254_arg_0_10 ?i)) (ite ((_ is nil!2521) (len!254_arg_0_10 ?i)) zero!2516 (ite ((_ is cons!2518) (len!254_arg_0_10 ?i)) (succ!2514 (len!254 (tail!2520 (len!254_arg_0_10 ?i)))) error_value!2527))) (ite ((_ is nil!2521) (len!254_arg_0_10 ?i)) true (ite ((_ is cons!2518) (len!254_arg_0_10 ?i)) (not (forall ((?z I_len!254)) (not (= (len!254_arg_0_10 ?z) (tail!2520 (len!254_arg_0_10 ?i)))) )) true))) ))
(assert (not (forall ((i!514 Nat!2513) (xs!515 Lst!2517)) (or (= (drop!257 i!514 xs!515) (take!260 (minus!240 (len!254 xs!515) i!514) (rev!275 xs!515))) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_4 ?z) i!514) (= (drop!257_arg_1_5 ?z) xs!515))) ) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_6 ?z) (minus!240 (len!254 xs!515) i!514)) (= (take!260_arg_1_7 ?z) (rev!275 xs!515)))) ) (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_8 ?z) (len!254 xs!515)) (= (minus!240_arg_1_9 ?z) i!514))) ) (forall ((?z I_len!254)) (not (= (len!254_arg_0_10 ?z) xs!515)) ) (forall ((?z I_rev!275)) (not (= (rev!275_arg_0_1 ?z) xs!515)) )) )))
(check-sat)
(exit)

