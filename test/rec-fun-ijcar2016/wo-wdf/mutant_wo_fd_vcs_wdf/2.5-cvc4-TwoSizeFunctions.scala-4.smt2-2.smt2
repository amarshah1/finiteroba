(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!894 0)) (((Cons!895 (head!896 (_ BitVec 32)) (tail!897 List!894)) (Nil!898))
))
(declare-fun error_value!899 () Int)
(declare-fun error_value!900 () Int)
(declare-fun size2acc!211 (List!894 Int) Int)
(declare-fun size1!206 (List!894) Int)
(declare-fun error_value!901 () Int)
(declare-sort I_size2acc!211 0)
(declare-fun size2acc!211_arg_0_1 (I_size2acc!211) List!894)
(declare-fun size2acc!211_arg_1_2 (I_size2acc!211) Int)
(declare-sort I_size1!206 0)
(declare-fun size1!206_arg_0_3 (I_size1!206) List!894)
(assert (forall ((?i I_size2acc!211)) (and (= (size2acc!211 (size2acc!211_arg_0_1 ?i) (size2acc!211_arg_1_2 ?i)) (ite ((_ is Nil!898) (size2acc!211_arg_0_1 ?i)) (size2acc!211_arg_1_2 ?i) (ite ((_ is Cons!895) (size2acc!211_arg_0_1 ?i)) (size2acc!211 (tail!897 (size2acc!211_arg_0_1 ?i)) (+ 1 (size2acc!211_arg_1_2 ?i))) error_value!899))) (ite ((_ is Nil!898) (size2acc!211_arg_0_1 ?i)) true (ite ((_ is Cons!895) (size2acc!211_arg_0_1 ?i)) (not (forall ((?z I_size2acc!211)) (not (and (= (size2acc!211_arg_0_1 ?z) (tail!897 (size2acc!211_arg_0_1 ?i))) (= (size2acc!211_arg_1_2 ?z) (+ 1 (size2acc!211_arg_1_2 ?i))))) )) true))) ))
(assert (forall ((?i I_size1!206)) (and (= (size1!206 (size1!206_arg_0_3 ?i)) (ite ((_ is Cons!895) (size1!206_arg_0_3 ?i)) (+ 1 (size1!206 (tail!897 (size1!206_arg_0_3 ?i)))) (ite ((_ is Nil!898) (size1!206_arg_0_3 ?i)) 0 error_value!900))) (ite ((_ is Cons!895) (size1!206_arg_0_3 ?i)) (not (forall ((?z I_size1!206)) (not (= (size1!206_arg_0_3 ?z) (tail!897 (size1!206_arg_0_3 ?i)))) )) true)) ))
(assert (not (forall ((acc!210 Int) (l!209 List!894)) (or (not (>= acc!210 0)) (or (= acc!210 (+ (* (- 1) (size1!206 (tail!897 l!209))) (ite ((_ is Nil!898) l!209) acc!210 (ite ((_ is Cons!895) l!209) (size2acc!211 l!209 (+ 1 acc!210)) error_value!901)))) (forall ((?z I_size1!206)) (not (= (size1!206_arg_0_3 ?z) (tail!897 l!209))) ) (not (ite ((_ is Nil!898) l!209) true (ite ((_ is Cons!895) l!209) (not (forall ((?z I_size2acc!211)) (not (and (= (size2acc!211_arg_0_1 ?z) l!209) (= (size2acc!211_arg_1_2 ?z) (+ 1 acc!210)))) )) true))))) )))
(check-sat)
(exit)

