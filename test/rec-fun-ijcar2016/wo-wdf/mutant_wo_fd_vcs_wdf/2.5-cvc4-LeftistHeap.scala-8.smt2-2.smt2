(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Heap!968 0)) (((Leaf!969) (Node!970 (rk!971 (_ BitVec 32)) (value!972 (_ BitVec 32)) (left!973 Heap!968) (right!974 Heap!968)))
))
(declare-fun error_value!975 () Bool)
(declare-fun error_value!976 () (_ BitVec 32))
(declare-fun hasLeftistProperty!208 (Heap!968) Bool)
(declare-fun rightHeight!206 (Heap!968) (_ BitVec 32))
(declare-fun error_value!977 () (_ BitVec 32))
(declare-fun size!210 (Heap!968) (_ BitVec 32))
(declare-fun makeT!219 ((_ BitVec 32) Heap!968 Heap!968) Heap!968)
(declare-fun error_value!978 () Heap!968)
(declare-fun error_value!979 () Heap!968)
(declare-fun merge!215 (Heap!968 Heap!968) Heap!968)
(declare-fun error_value!980 () Heap!968)
(declare-fun error_value!981 () Heap!968)
(declare-sort I_hasLeftistProperty!208 0)
(declare-fun hasLeftistProperty!208_arg_0_1 (I_hasLeftistProperty!208) Heap!968)
(declare-sort I_rightHeight!206 0)
(declare-fun rightHeight!206_arg_0_2 (I_rightHeight!206) Heap!968)
(declare-sort I_size!210 0)
(declare-fun size!210_arg_0_3 (I_size!210) Heap!968)
(declare-sort I_makeT!219 0)
(declare-fun makeT!219_arg_0_4 (I_makeT!219) (_ BitVec 32))
(declare-fun makeT!219_arg_1_5 (I_makeT!219) Heap!968)
(declare-fun makeT!219_arg_2_6 (I_makeT!219) Heap!968)
(declare-sort I_merge!215 0)
(declare-fun merge!215_arg_0_7 (I_merge!215) Heap!968)
(declare-fun merge!215_arg_1_8 (I_merge!215) Heap!968)
(assert (forall ((?i I_hasLeftistProperty!208)) (and (= (hasLeftistProperty!208 (hasLeftistProperty!208_arg_0_1 ?i)) (ite ((_ is Leaf!969) (hasLeftistProperty!208_arg_0_1 ?i)) true (ite ((_ is Node!970) (hasLeftistProperty!208_arg_0_1 ?i)) (and (not (bvslt (rightHeight!206 (left!973 (hasLeftistProperty!208_arg_0_1 ?i))) (rightHeight!206 (right!974 (hasLeftistProperty!208_arg_0_1 ?i))))) (hasLeftistProperty!208 (right!974 (hasLeftistProperty!208_arg_0_1 ?i))) (hasLeftistProperty!208 (left!973 (hasLeftistProperty!208_arg_0_1 ?i)))) error_value!975))) (ite ((_ is Leaf!969) (hasLeftistProperty!208_arg_0_1 ?i)) true (ite ((_ is Node!970) (hasLeftistProperty!208_arg_0_1 ?i)) (and (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (left!973 (hasLeftistProperty!208_arg_0_1 ?i)))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (right!974 (hasLeftistProperty!208_arg_0_1 ?i)))) )) (not (forall ((?z I_hasLeftistProperty!208)) (not (= (hasLeftistProperty!208_arg_0_1 ?z) (right!974 (hasLeftistProperty!208_arg_0_1 ?i)))) )) (not (forall ((?z I_hasLeftistProperty!208)) (not (= (hasLeftistProperty!208_arg_0_1 ?z) (left!973 (hasLeftistProperty!208_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_rightHeight!206)) (and (= (ite ((_ is Leaf!969) (rightHeight!206_arg_0_2 ?i)) (_ bv0 32) (ite ((_ is Node!970) (rightHeight!206_arg_0_2 ?i)) (bvadd (rightHeight!206 (right!974 (rightHeight!206_arg_0_2 ?i))) (_ bv1 32)) error_value!976)) (rightHeight!206 (rightHeight!206_arg_0_2 ?i))) (ite ((_ is Leaf!969) (rightHeight!206_arg_0_2 ?i)) true (ite ((_ is Node!970) (rightHeight!206_arg_0_2 ?i)) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (right!974 (rightHeight!206_arg_0_2 ?i)))) )) true))) ))
(assert (forall ((?i I_size!210)) (and (= (ite ((_ is Leaf!969) (size!210_arg_0_3 ?i)) (_ bv0 32) (ite ((_ is Node!970) (size!210_arg_0_3 ?i)) (bvadd (size!210 (left!973 (size!210_arg_0_3 ?i))) (bvadd (size!210 (right!974 (size!210_arg_0_3 ?i))) (_ bv1 32))) error_value!977)) (size!210 (size!210_arg_0_3 ?i))) (ite ((_ is Leaf!969) (size!210_arg_0_3 ?i)) true (ite ((_ is Node!970) (size!210_arg_0_3 ?i)) (and (not (forall ((?z I_size!210)) (not (= (size!210_arg_0_3 ?z) (left!973 (size!210_arg_0_3 ?i)))) )) (not (forall ((?z I_size!210)) (not (= (size!210_arg_0_3 ?z) (right!974 (size!210_arg_0_3 ?i)))) ))) true))) ))
(assert (forall ((?i I_makeT!219)) (and (= (makeT!219 (makeT!219_arg_0_4 ?i) (makeT!219_arg_1_5 ?i) (makeT!219_arg_2_6 ?i)) (ite (not (bvslt (rightHeight!206 (makeT!219_arg_1_5 ?i)) (rightHeight!206 (makeT!219_arg_2_6 ?i)))) (Node!970 (bvadd (rightHeight!206 (makeT!219_arg_2_6 ?i)) (_ bv1 32)) (makeT!219_arg_0_4 ?i) (makeT!219_arg_1_5 ?i) (makeT!219_arg_2_6 ?i)) (Node!970 (bvadd (rightHeight!206 (makeT!219_arg_1_5 ?i)) (_ bv1 32)) (makeT!219_arg_0_4 ?i) (makeT!219_arg_2_6 ?i) (makeT!219_arg_1_5 ?i)))) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (makeT!219_arg_1_5 ?i))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (makeT!219_arg_2_6 ?i))) )) (ite (not (bvslt (rightHeight!206 (makeT!219_arg_1_5 ?i)) (rightHeight!206 (makeT!219_arg_2_6 ?i)))) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (makeT!219_arg_2_6 ?i))) )) (not (forall ((?z I_rightHeight!206)) (not (= (rightHeight!206_arg_0_2 ?z) (makeT!219_arg_1_5 ?i))) )))) ))
(assert (forall ((?i I_merge!215)) (and (= (merge!215 (merge!215_arg_0_7 ?i) (merge!215_arg_1_8 ?i)) (ite ((_ is Leaf!969) (merge!215_arg_0_7 ?i)) (merge!215_arg_1_8 ?i) (ite ((_ is Node!970) (merge!215_arg_0_7 ?i)) (ite ((_ is Leaf!969) (merge!215_arg_1_8 ?i)) (merge!215_arg_0_7 ?i) (ite ((_ is Node!970) (merge!215_arg_1_8 ?i)) (ite (bvslt (value!972 (merge!215_arg_1_8 ?i)) (value!972 (merge!215_arg_0_7 ?i))) (makeT!219 (value!972 (merge!215_arg_0_7 ?i)) (left!973 (merge!215_arg_0_7 ?i)) (merge!215 (right!974 (merge!215_arg_0_7 ?i)) (merge!215_arg_1_8 ?i))) (makeT!219 (value!972 (merge!215_arg_1_8 ?i)) (left!973 (merge!215_arg_1_8 ?i)) (merge!215 (merge!215_arg_0_7 ?i) (right!974 (merge!215_arg_1_8 ?i))))) error_value!978)) error_value!979))) (ite ((_ is Leaf!969) (merge!215_arg_0_7 ?i)) true (ite ((_ is Node!970) (merge!215_arg_0_7 ?i)) (ite ((_ is Leaf!969) (merge!215_arg_1_8 ?i)) true (ite ((_ is Node!970) (merge!215_arg_1_8 ?i)) (ite (bvslt (value!972 (merge!215_arg_1_8 ?i)) (value!972 (merge!215_arg_0_7 ?i))) (and (not (forall ((?z I_makeT!219)) (not (and (= (makeT!219_arg_0_4 ?z) (value!972 (merge!215_arg_0_7 ?i))) (= (makeT!219_arg_1_5 ?z) (left!973 (merge!215_arg_0_7 ?i))) (= (makeT!219_arg_2_6 ?z) (merge!215 (right!974 (merge!215_arg_0_7 ?i)) (merge!215_arg_1_8 ?i))))) )) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_7 ?z) (right!974 (merge!215_arg_0_7 ?i))) (= (merge!215_arg_1_8 ?z) (merge!215_arg_1_8 ?i)))) ))) (and (not (forall ((?z I_makeT!219)) (not (and (= (makeT!219_arg_0_4 ?z) (value!972 (merge!215_arg_1_8 ?i))) (= (makeT!219_arg_1_5 ?z) (left!973 (merge!215_arg_1_8 ?i))) (= (makeT!219_arg_2_6 ?z) (merge!215 (merge!215_arg_0_7 ?i) (right!974 (merge!215_arg_1_8 ?i)))))) )) (not (forall ((?z I_merge!215)) (not (and (= (merge!215_arg_0_7 ?z) (merge!215_arg_0_7 ?i)) (= (merge!215_arg_1_8 ?z) (right!974 (merge!215_arg_1_8 ?i))))) )))) true)) true))) ))
(assert (not (forall ((h1!213 Heap!968) (h2!214 Heap!968)) (or (not (and (hasLeftistProperty!208 h2!214) (not (forall ((?z I_hasLeftistProperty!208)) (not (= (hasLeftistProperty!208_arg_0_1 ?z) h2!214)) )))) (not (and (hasLeftistProperty!208 h1!213) (not (forall ((?z I_hasLeftistProperty!208)) (not (= (hasLeftistProperty!208_arg_0_1 ?z) h1!213)) )))) (or (= (size!210 (ite ((_ is Leaf!969) h1!213) h2!214 (right!974 h2!214))) (bvadd (size!210 h1!213) (size!210 h2!214))) (forall ((?z I_size!210)) (not (= (size!210_arg_0_3 ?z) (ite ((_ is Leaf!969) h1!213) h2!214 (right!974 h2!214)))) ) (forall ((?z I_size!210)) (not (= (size!210_arg_0_3 ?z) h1!213)) ) (forall ((?z I_size!210)) (not (= (size!210_arg_0_3 ?z) h2!214)) ))) )))
(check-sat)
(exit)

