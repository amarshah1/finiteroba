(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2565 0)(Nat!2570 0)) (((cons!2566 (head!2567 Nat!2570) (tail!2568 Lst!2565)) (nil!2569))
((succ!2571 (pred!2572 Nat!2570)) (zero!2573))
))
(declare-fun error_value!2574 () Bool)
(declare-fun error_value!2575 () Bool)
(declare-fun sorted!283 (Lst!2565) Bool)
(declare-fun leq!234 (Nat!2570 Nat!2570) Bool)
(declare-fun less!231 (Nat!2570 Nat!2570) Bool)
(declare-fun error_value!2576 () Lst!2565)
(declare-fun insort!281 (Nat!2570 Lst!2565) Lst!2565)
(declare-sort I_sorted!283 0)
(declare-fun sorted!283_arg_0_1 (I_sorted!283) Lst!2565)
(declare-sort I_leq!234 0)
(declare-fun leq!234_arg_0_2 (I_leq!234) Nat!2570)
(declare-fun leq!234_arg_1_3 (I_leq!234) Nat!2570)
(declare-sort I_less!231 0)
(declare-fun less!231_arg_0_4 (I_less!231) Nat!2570)
(declare-fun less!231_arg_1_5 (I_less!231) Nat!2570)
(declare-sort I_insort!281 0)
(declare-fun insort!281_arg_0_6 (I_insort!281) Nat!2570)
(declare-fun insort!281_arg_1_7 (I_insort!281) Lst!2565)
(assert (forall ((?i I_sorted!283)) (and (= (sorted!283 (sorted!283_arg_0_1 ?i)) (ite ((_ is nil!2569) (sorted!283_arg_0_1 ?i)) true (ite (and ((_ is nil!2569) (tail!2568 (sorted!283_arg_0_1 ?i))) ((_ is cons!2566) (sorted!283_arg_0_1 ?i))) true (ite (and ((_ is cons!2566) (tail!2568 (sorted!283_arg_0_1 ?i))) ((_ is cons!2566) (sorted!283_arg_0_1 ?i))) (and (leq!234 (head!2567 (sorted!283_arg_0_1 ?i)) (head!2567 (tail!2568 (sorted!283_arg_0_1 ?i)))) (sorted!283 (cons!2566 (head!2567 (tail!2568 (sorted!283_arg_0_1 ?i))) (tail!2568 (tail!2568 (sorted!283_arg_0_1 ?i)))))) error_value!2574)))) (ite ((_ is nil!2569) (sorted!283_arg_0_1 ?i)) true (ite (and ((_ is nil!2569) (tail!2568 (sorted!283_arg_0_1 ?i))) ((_ is cons!2566) (sorted!283_arg_0_1 ?i))) true (ite (and ((_ is cons!2566) (tail!2568 (sorted!283_arg_0_1 ?i))) ((_ is cons!2566) (sorted!283_arg_0_1 ?i))) (and (not (forall ((?z I_leq!234)) (not (and (= (leq!234_arg_0_2 ?z) (head!2567 (sorted!283_arg_0_1 ?i))) (= (leq!234_arg_1_3 ?z) (head!2567 (tail!2568 (sorted!283_arg_0_1 ?i)))))) )) (not (forall ((?z I_sorted!283)) (not (= (sorted!283_arg_0_1 ?z) (cons!2566 (head!2567 (tail!2568 (sorted!283_arg_0_1 ?i))) (tail!2568 (tail!2568 (sorted!283_arg_0_1 ?i)))))) ))) true)))) ))
(assert (forall ((?i I_leq!234)) (and (= (leq!234 (leq!234_arg_0_2 ?i) (leq!234_arg_1_3 ?i)) (or (less!231 (leq!234_arg_0_2 ?i) (leq!234_arg_1_3 ?i)) (= (leq!234_arg_0_2 ?i) (leq!234_arg_1_3 ?i)))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_4 ?z) (leq!234_arg_0_2 ?i)) (= (less!231_arg_1_5 ?z) (leq!234_arg_1_3 ?i)))) ))) ))
(assert (forall ((?i I_less!231)) (and (= (less!231 (less!231_arg_0_4 ?i) (less!231_arg_1_5 ?i)) (ite ((_ is zero!2573) (less!231_arg_1_5 ?i)) false (ite (and ((_ is succ!2571) (less!231_arg_1_5 ?i)) ((_ is zero!2573) (less!231_arg_0_4 ?i))) true (ite (and ((_ is succ!2571) (less!231_arg_1_5 ?i)) ((_ is succ!2571) (less!231_arg_0_4 ?i))) (less!231 (pred!2572 (less!231_arg_0_4 ?i)) (pred!2572 (less!231_arg_1_5 ?i))) error_value!2575)))) (ite ((_ is zero!2573) (less!231_arg_1_5 ?i)) true (ite (and ((_ is succ!2571) (less!231_arg_1_5 ?i)) ((_ is zero!2573) (less!231_arg_0_4 ?i))) true (ite (and ((_ is succ!2571) (less!231_arg_1_5 ?i)) ((_ is succ!2571) (less!231_arg_0_4 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_4 ?z) (pred!2572 (less!231_arg_0_4 ?i))) (= (less!231_arg_1_5 ?z) (pred!2572 (less!231_arg_1_5 ?i))))) )) true)))) ))
(assert (forall ((?i I_insort!281)) (and (= (insort!281 (insort!281_arg_0_6 ?i) (insort!281_arg_1_7 ?i)) (ite ((_ is nil!2569) (insort!281_arg_1_7 ?i)) (cons!2566 (insort!281_arg_0_6 ?i) nil!2569) (ite ((_ is cons!2566) (insort!281_arg_1_7 ?i)) (ite (less!231 (insort!281_arg_0_6 ?i) (head!2567 (insort!281_arg_1_7 ?i))) (cons!2566 (insort!281_arg_0_6 ?i) (cons!2566 (head!2567 (insort!281_arg_1_7 ?i)) (tail!2568 (insort!281_arg_1_7 ?i)))) (cons!2566 (head!2567 (insort!281_arg_1_7 ?i)) (insort!281 (insort!281_arg_0_6 ?i) (tail!2568 (insort!281_arg_1_7 ?i))))) error_value!2576))) (ite ((_ is nil!2569) (insort!281_arg_1_7 ?i)) true (ite ((_ is cons!2566) (insort!281_arg_1_7 ?i)) (and (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_4 ?z) (insort!281_arg_0_6 ?i)) (= (less!231_arg_1_5 ?z) (head!2567 (insort!281_arg_1_7 ?i))))) )) (ite (less!231 (insort!281_arg_0_6 ?i) (head!2567 (insort!281_arg_1_7 ?i))) true (not (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_6 ?z) (insort!281_arg_0_6 ?i)) (= (insort!281_arg_1_7 ?z) (tail!2568 (insort!281_arg_1_7 ?i))))) )))) true))) ))
(assert (not (forall ((l!529 Lst!2565)) (not (and (sorted!283 l!529) (not (forall ((?z I_sorted!283)) (not (= (sorted!283_arg_0_1 ?z) l!529)) )))) )))
(check-sat)
(exit)

