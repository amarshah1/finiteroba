(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1223 0)) (((And!1224 (lhs!1225 Formula!1223) (rhs!1226 Formula!1223)) (Implies!1227 (lhs!1228 Formula!1223) (rhs!1229 Formula!1223)) (Literal!1230 (id!1231 (_ BitVec 32))) (Not!1232 (f!1233 Formula!1223)) (Or!1234 (lhs!1235 Formula!1223) (rhs!1236 Formula!1223)))
))
(declare-fun error_value!1237 () Bool)
(declare-fun isNNF!212 (Formula!1223) Bool)
(declare-fun error_value!1238 () Formula!1223)
(declare-fun error_value!1239 () Bool)
(declare-fun simplify!206 (Formula!1223) Formula!1223)
(declare-fun isSimplified!208 (Formula!1223) Bool)
(declare-sort I_isNNF!212 0)
(declare-fun isNNF!212_arg_0_1 (I_isNNF!212) Formula!1223)
(declare-sort I_simplify!206 0)
(declare-fun simplify!206_arg_0_2 (I_simplify!206) Formula!1223)
(declare-sort I_isSimplified!208 0)
(declare-fun isSimplified!208_arg_0_3 (I_isSimplified!208) Formula!1223)
(assert (forall ((?i I_isNNF!212)) (and (= (isNNF!212 (isNNF!212_arg_0_1 ?i)) (ite ((_ is And!1224) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1226 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1225 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Or!1234) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1236 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1235 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Implies!1227) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1229 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1228 (isNNF!212_arg_0_1 ?i)))) (ite (and ((_ is Literal!1230) (f!1233 (isNNF!212_arg_0_1 ?i))) ((_ is Not!1232) (isNNF!212_arg_0_1 ?i))) true (ite ((_ is Not!1232) (isNNF!212_arg_0_1 ?i)) false (ite ((_ is Literal!1230) (isNNF!212_arg_0_1 ?i)) true error_value!1237))))))) (ite ((_ is And!1224) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1226 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1225 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Or!1234) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1236 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1235 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1227) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1229 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1228 (isNNF!212_arg_0_1 ?i)))) ))) true)))) ))
(assert (forall ((?i I_simplify!206)) (and (= (simplify!206 (simplify!206_arg_0_2 ?i)) (ite ((_ is And!1224) (simplify!206_arg_0_2 ?i)) (And!1224 (simplify!206 (lhs!1225 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1226 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Or!1234) (simplify!206_arg_0_2 ?i)) (Or!1234 (simplify!206 (lhs!1235 (simplify!206_arg_0_2 ?i))) (simplify!206 (rhs!1236 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Implies!1227) (simplify!206_arg_0_2 ?i)) (Or!1234 (Not!1232 (simplify!206 (lhs!1228 (simplify!206_arg_0_2 ?i)))) (simplify!206 (rhs!1229 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Not!1232) (simplify!206_arg_0_2 ?i)) (Not!1232 (simplify!206 (f!1233 (simplify!206_arg_0_2 ?i)))) (ite ((_ is Literal!1230) (simplify!206_arg_0_2 ?i)) (simplify!206_arg_0_2 ?i) error_value!1238)))))) (ite ((_ is And!1224) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1225 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1226 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Or!1234) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1235 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1236 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1227) (simplify!206_arg_0_2 ?i)) (and (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (lhs!1228 (simplify!206_arg_0_2 ?i)))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (rhs!1229 (simplify!206_arg_0_2 ?i)))) ))) (ite ((_ is Not!1232) (simplify!206_arg_0_2 ?i)) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (f!1233 (simplify!206_arg_0_2 ?i)))) )) true))))) ))
(assert (forall ((?i I_isSimplified!208)) (and (= (isSimplified!208 (isSimplified!208_arg_0_3 ?i)) (ite ((_ is And!1224) (isSimplified!208_arg_0_3 ?i)) (and (isSimplified!208 (rhs!1226 (isSimplified!208_arg_0_3 ?i))) (isSimplified!208 (lhs!1225 (isSimplified!208_arg_0_3 ?i)))) (ite ((_ is Or!1234) (isSimplified!208_arg_0_3 ?i)) (and (isSimplified!208 (rhs!1236 (isSimplified!208_arg_0_3 ?i))) (isSimplified!208 (lhs!1235 (isSimplified!208_arg_0_3 ?i)))) (ite ((_ is Implies!1227) (isSimplified!208_arg_0_3 ?i)) false (ite ((_ is Not!1232) (isSimplified!208_arg_0_3 ?i)) (isSimplified!208 (f!1233 (isSimplified!208_arg_0_3 ?i))) (ite ((_ is Literal!1230) (isSimplified!208_arg_0_3 ?i)) true error_value!1239)))))) (ite ((_ is And!1224) (isSimplified!208_arg_0_3 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (rhs!1226 (isSimplified!208_arg_0_3 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (lhs!1225 (isSimplified!208_arg_0_3 ?i)))) ))) (ite ((_ is Or!1234) (isSimplified!208_arg_0_3 ?i)) (and (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (rhs!1236 (isSimplified!208_arg_0_3 ?i)))) )) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (lhs!1235 (isSimplified!208_arg_0_3 ?i)))) ))) (ite ((_ is Implies!1227) (isSimplified!208_arg_0_3 ?i)) true (ite ((_ is Not!1232) (isSimplified!208_arg_0_3 ?i)) (not (forall ((?z I_isSimplified!208)) (not (= (isSimplified!208_arg_0_3 ?z) (f!1233 (isSimplified!208_arg_0_3 ?i)))) )) true))))) ))
(assert (not (forall ((BOUND_VARIABLE_502 Formula!1223) (BOUND_VARIABLE_503 Formula!1223)) (or (and (or (isNNF!212 (simplify!206 BOUND_VARIABLE_503)) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (simplify!206 BOUND_VARIABLE_503))) ) (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) BOUND_VARIABLE_503)) )) (not (and (isNNF!212 BOUND_VARIABLE_503) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) BOUND_VARIABLE_503)) ))))) (and (or (isNNF!212 BOUND_VARIABLE_502) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) BOUND_VARIABLE_502)) )) (not (and (isNNF!212 (simplify!206 BOUND_VARIABLE_502)) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (simplify!206 BOUND_VARIABLE_502))) )) (not (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) BOUND_VARIABLE_502)) ))))) (not (and (isNNF!212 (Or!1234 BOUND_VARIABLE_502 BOUND_VARIABLE_503)) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (Or!1234 BOUND_VARIABLE_502 BOUND_VARIABLE_503))) )))) (or (isNNF!212 (simplify!206 (Or!1234 BOUND_VARIABLE_502 BOUND_VARIABLE_503))) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (simplify!206 (Or!1234 BOUND_VARIABLE_502 BOUND_VARIABLE_503)))) ) (forall ((?z I_simplify!206)) (not (= (simplify!206_arg_0_2 ?z) (Or!1234 BOUND_VARIABLE_502 BOUND_VARIABLE_503))) ))) )))
(check-sat)
(exit)

