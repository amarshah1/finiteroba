(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2620 0)) (((succ!2621 (pred!2622 Nat!2620)) (zero!2623))
))
(declare-datatypes ((Lst!2624 0)) (((cons!2625 (head!2626 Nat!2620) (tail!2627 Lst!2624)) (nil!2628))
))
(declare-datatypes ((ZLst!2629 0)(Pair!2634 0)) (((zcons!2630 (zhead!2631 Pair!2634) (ztail!2632 ZLst!2629)) (znil!2633))
((mkpair!2635 (first!2636 Nat!2620) (second!2637 Nat!2620)))
))
(declare-fun error_value!2638 () ZLst!2629)
(declare-fun ztake!297 (Nat!2620 ZLst!2629) ZLst!2629)
(declare-fun error_value!2639 () ZLst!2629)
(declare-fun zip!288 (Lst!2624 Lst!2624) ZLst!2629)
(declare-fun error_value!2640 () Lst!2624)
(declare-fun take!260 (Nat!2620 Lst!2624) Lst!2624)
(declare-sort I_ztake!297 0)
(declare-fun ztake!297_arg_0_1 (I_ztake!297) Nat!2620)
(declare-fun ztake!297_arg_1_2 (I_ztake!297) ZLst!2629)
(declare-sort I_zip!288 0)
(declare-fun zip!288_arg_0_3 (I_zip!288) Lst!2624)
(declare-fun zip!288_arg_1_4 (I_zip!288) Lst!2624)
(declare-sort I_take!260 0)
(declare-fun take!260_arg_0_5 (I_take!260) Nat!2620)
(declare-fun take!260_arg_1_6 (I_take!260) Lst!2624)
(assert (forall ((?i I_ztake!297)) (and (= (ztake!297 (ztake!297_arg_0_1 ?i) (ztake!297_arg_1_2 ?i)) (ite ((_ is znil!2633) (ztake!297_arg_1_2 ?i)) znil!2633 (ite ((_ is zero!2623) (ztake!297_arg_0_1 ?i)) znil!2633 (ite (and ((_ is zcons!2630) (ztake!297_arg_1_2 ?i)) ((_ is succ!2621) (ztake!297_arg_0_1 ?i))) (zcons!2630 (zhead!2631 (ztake!297_arg_1_2 ?i)) (ztake!297 (pred!2622 (ztake!297_arg_0_1 ?i)) (ztail!2632 (ztake!297_arg_1_2 ?i)))) error_value!2638)))) (ite ((_ is znil!2633) (ztake!297_arg_1_2 ?i)) true (ite ((_ is zero!2623) (ztake!297_arg_0_1 ?i)) true (ite (and ((_ is zcons!2630) (ztake!297_arg_1_2 ?i)) ((_ is succ!2621) (ztake!297_arg_0_1 ?i))) (not (forall ((?z I_ztake!297)) (not (and (= (ztake!297_arg_0_1 ?z) (pred!2622 (ztake!297_arg_0_1 ?i))) (= (ztake!297_arg_1_2 ?z) (ztail!2632 (ztake!297_arg_1_2 ?i))))) )) true)))) ))
(assert (forall ((?i I_zip!288)) (and (= (zip!288 (zip!288_arg_0_3 ?i) (zip!288_arg_1_4 ?i)) (ite ((_ is nil!2628) (zip!288_arg_0_3 ?i)) znil!2633 (ite ((_ is nil!2628) (zip!288_arg_1_4 ?i)) znil!2633 (ite (and ((_ is cons!2625) (zip!288_arg_1_4 ?i)) ((_ is cons!2625) (zip!288_arg_0_3 ?i))) (zcons!2630 (mkpair!2635 (head!2626 (zip!288_arg_0_3 ?i)) (head!2626 (zip!288_arg_1_4 ?i))) (zip!288 (tail!2627 (zip!288_arg_0_3 ?i)) (tail!2627 (zip!288_arg_1_4 ?i)))) error_value!2639)))) (ite ((_ is nil!2628) (zip!288_arg_0_3 ?i)) true (ite ((_ is nil!2628) (zip!288_arg_1_4 ?i)) true (ite (and ((_ is cons!2625) (zip!288_arg_1_4 ?i)) ((_ is cons!2625) (zip!288_arg_0_3 ?i))) (not (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_3 ?z) (tail!2627 (zip!288_arg_0_3 ?i))) (= (zip!288_arg_1_4 ?z) (tail!2627 (zip!288_arg_1_4 ?i))))) )) true)))) ))
(assert (forall ((?i I_take!260)) (and (= (take!260 (take!260_arg_0_5 ?i) (take!260_arg_1_6 ?i)) (ite ((_ is nil!2628) (take!260_arg_1_6 ?i)) nil!2628 (ite ((_ is zero!2623) (take!260_arg_0_5 ?i)) nil!2628 (ite (and ((_ is cons!2625) (take!260_arg_1_6 ?i)) ((_ is succ!2621) (take!260_arg_0_5 ?i))) (cons!2625 (head!2626 (take!260_arg_1_6 ?i)) (take!260 (pred!2622 (take!260_arg_0_5 ?i)) (tail!2627 (take!260_arg_1_6 ?i)))) error_value!2640)))) (ite ((_ is nil!2628) (take!260_arg_1_6 ?i)) true (ite ((_ is zero!2623) (take!260_arg_0_5 ?i)) true (ite (and ((_ is cons!2625) (take!260_arg_1_6 ?i)) ((_ is succ!2621) (take!260_arg_0_5 ?i))) (not (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_5 ?z) (pred!2622 (take!260_arg_0_5 ?i))) (= (take!260_arg_1_6 ?z) (tail!2627 (take!260_arg_1_6 ?i))))) )) true)))) ))
(assert (not (forall ((n!545 Nat!2620) (xs!546 Lst!2624) (ys!547 Lst!2624)) (or (= (ztake!297 n!545 (zip!288 (take!260 n!545 xs!546) (take!260 n!545 ys!547))) (zip!288 xs!546 ys!547)) (forall ((?z I_ztake!297)) (not (and (= (ztake!297_arg_0_1 ?z) n!545) (= (ztake!297_arg_1_2 ?z) (zip!288 (take!260 n!545 xs!546) (take!260 n!545 ys!547))))) ) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_3 ?z) (take!260 n!545 xs!546)) (= (zip!288_arg_1_4 ?z) (take!260 n!545 ys!547)))) ) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_5 ?z) n!545) (= (take!260_arg_1_6 ?z) xs!546))) ) (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_5 ?z) n!545) (= (take!260_arg_1_6 ?z) ys!547))) ) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_3 ?z) xs!546) (= (zip!288_arg_1_4 ?z) ys!547))) )) )))
(check-sat)
(exit)

