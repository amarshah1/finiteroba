(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2022 0)) (((succ!2023 (pred!2024 Nat!2022)) (zero!2025))
))
(declare-datatypes ((Lst!2026 0)) (((cons!2027 (head!2028 Nat!2022) (tail!2029 Lst!2026)) (nil!2030))
))
(declare-fun error_value!2031 () Bool)
(declare-fun mem!270 (Nat!2022 Lst!2026) Bool)
(declare-fun error_value!2032 () Lst!2026)
(declare-fun append!252 (Lst!2026 Lst!2026) Lst!2026)
(declare-sort I_mem!270 0)
(declare-fun mem!270_arg_0_1 (I_mem!270) Nat!2022)
(declare-fun mem!270_arg_1_2 (I_mem!270) Lst!2026)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_3 (I_append!252) Lst!2026)
(declare-fun append!252_arg_1_4 (I_append!252) Lst!2026)
(assert (forall ((?i I_mem!270)) (and (= (mem!270 (mem!270_arg_0_1 ?i) (mem!270_arg_1_2 ?i)) (ite ((_ is nil!2030) (mem!270_arg_1_2 ?i)) false (ite ((_ is cons!2027) (mem!270_arg_1_2 ?i)) (or (mem!270 (mem!270_arg_0_1 ?i) (tail!2029 (mem!270_arg_1_2 ?i))) (= (mem!270_arg_0_1 ?i) (head!2028 (mem!270_arg_1_2 ?i)))) error_value!2031))) (ite ((_ is nil!2030) (mem!270_arg_1_2 ?i)) true (ite ((_ is cons!2027) (mem!270_arg_1_2 ?i)) (not (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) (mem!270_arg_0_1 ?i)) (= (mem!270_arg_1_2 ?z) (tail!2029 (mem!270_arg_1_2 ?i))))) )) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_3 ?i) (append!252_arg_1_4 ?i)) (ite ((_ is nil!2030) (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i) (ite ((_ is cons!2027) (append!252_arg_0_3 ?i)) (cons!2027 (head!2028 (append!252_arg_0_3 ?i)) (append!252 (tail!2029 (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i))) error_value!2032))) (ite ((_ is nil!2030) (append!252_arg_0_3 ?i)) true (ite ((_ is cons!2027) (append!252_arg_0_3 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) (tail!2029 (append!252_arg_0_3 ?i))) (= (append!252_arg_1_4 ?z) (append!252_arg_1_4 ?i)))) )) true))) ))
(assert (not (forall ((x!376 Nat!2022) (l!377 Lst!2026) (t!378 Lst!2026)) (or (or (mem!270 x!376 t!378) (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) x!376) (= (mem!270_arg_1_2 ?z) t!378))) )) (not (and (mem!270 x!376 l!377) (not (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) x!376) (= (mem!270_arg_1_2 ?z) l!377))) ))))) )))
(check-sat)
(exit)

