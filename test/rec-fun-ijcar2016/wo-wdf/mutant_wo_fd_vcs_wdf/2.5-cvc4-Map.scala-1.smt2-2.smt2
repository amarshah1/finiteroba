(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-sort T!204 0)
(declare-datatypes ((List!883 0)) (((Cons!884 (h!885 T!204) (t!886 List!883)) (Nil!887))
))
(declare-fun error_value!918 () List!883)
(declare-fun error_value!924 () Int)
(declare-fun List$map!899 (List!883 (Array T!204 T!204)) List!883)
(declare-fun List$$colon$colon!900 (List!883 T!204) List!883)
(declare-fun List$size!901 (List!883) Int)
(declare-sort I_List$map!899 0)
(declare-fun List$map!899_arg_0_1 (I_List$map!899) List!883)
(declare-fun List$map!899_arg_1_2 (I_List$map!899) (Array T!204 T!204))
(declare-sort I_List$$colon$colon!900 0)
(declare-fun List$$colon$colon!900_arg_0_3 (I_List$$colon$colon!900) List!883)
(declare-fun List$$colon$colon!900_arg_1_4 (I_List$$colon$colon!900) T!204)
(declare-sort I_List$size!901 0)
(declare-fun List$size!901_arg_0_5 (I_List$size!901) List!883)
(assert (forall ((?i I_List$map!899)) (and (= (List$map!899 (List$map!899_arg_0_1 ?i) (List$map!899_arg_1_2 ?i)) (ite ((_ is Nil!887) (List$map!899_arg_0_1 ?i)) Nil!887 (ite ((_ is Cons!884) (List$map!899_arg_0_1 ?i)) (List$$colon$colon!900 (List$map!899 (t!886 (List$map!899_arg_0_1 ?i)) (List$map!899_arg_1_2 ?i)) (select (List$map!899_arg_1_2 ?i) (h!885 (List$map!899_arg_0_1 ?i)))) error_value!918))) (ite ((_ is Nil!887) (List$map!899_arg_0_1 ?i)) true (ite ((_ is Cons!884) (List$map!899_arg_0_1 ?i)) (and (not (forall ((?z I_List$$colon$colon!900)) (not (and (= (List$$colon$colon!900_arg_0_3 ?z) (List$map!899 (t!886 (List$map!899_arg_0_1 ?i)) (List$map!899_arg_1_2 ?i))) (= (List$$colon$colon!900_arg_1_4 ?z) (select (List$map!899_arg_1_2 ?i) (h!885 (List$map!899_arg_0_1 ?i)))))) )) (not (forall ((?z I_List$map!899)) (not (and (= (List$map!899_arg_0_1 ?z) (t!886 (List$map!899_arg_0_1 ?i))) (= (List$map!899_arg_1_2 ?z) (List$map!899_arg_1_2 ?i)))) ))) true))) ))
(assert (forall ((?i I_List$$colon$colon!900)) (= (List$$colon$colon!900 (List$$colon$colon!900_arg_0_3 ?i) (List$$colon$colon!900_arg_1_4 ?i)) (Cons!884 (List$$colon$colon!900_arg_1_4 ?i) (List$$colon$colon!900_arg_0_3 ?i))) ))
(assert (forall ((?i I_List$size!901)) (and (= (List$size!901 (List$size!901_arg_0_5 ?i)) (ite ((_ is Nil!887) (List$size!901_arg_0_5 ?i)) 0 (ite ((_ is Cons!884) (List$size!901_arg_0_5 ?i)) (+ 1 (List$size!901 (t!886 (List$size!901_arg_0_5 ?i)))) error_value!924))) (ite ((_ is Nil!887) (List$size!901_arg_0_5 ?i)) true (ite ((_ is Cons!884) (List$size!901_arg_0_5 ?i)) (not (forall ((?z I_List$size!901)) (not (= (List$size!901_arg_0_5 ?z) (t!886 (List$size!901_arg_0_5 ?i)))) )) true))) ))
(assert (not (forall ((l!205 List!883) (f!206 (Array T!204 T!204))) (or (= (List$map!899 (List$map!899 l!205 f!206) f!206) (List$map!899 l!205 f!206)) (forall ((?z I_List$map!899)) (not (and (= (List$map!899_arg_0_1 ?z) (List$map!899 l!205 f!206)) (= (List$map!899_arg_1_2 ?z) f!206))) ) (forall ((?z I_List$map!899)) (not (and (= (List$map!899_arg_0_1 ?z) l!205) (= (List$map!899_arg_1_2 ?z) f!206))) ) (forall ((?z I_List$map!899)) (not (and (= (List$map!899_arg_0_1 ?z) l!205) (= (List$map!899_arg_1_2 ?z) f!206))) )) )))
(check-sat)
(exit)

