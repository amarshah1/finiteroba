(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!1831 0)) (((succ!1832 (pred!1833 Nat!1831)) (zero!1834))
))
(declare-datatypes ((Lst!1835 0)) (((cons!1836 (head!1837 Nat!1831) (tail!1838 Lst!1835)) (nil!1839))
))
(declare-fun error_value!1840 () Lst!1835)
(declare-fun append!252 (Lst!1835 Lst!1835) Lst!1835)
(declare-fun error_value!1841 () Lst!1835)
(declare-fun take!260 (Nat!1831 Lst!1835) Lst!1835)
(declare-fun error_value!1842 () Lst!1835)
(declare-fun drop!257 (Nat!1831 Lst!1835) Lst!1835)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_1 (I_append!252) Lst!1835)
(declare-fun append!252_arg_1_2 (I_append!252) Lst!1835)
(declare-sort I_take!260 0)
(declare-fun take!260_arg_0_3 (I_take!260) Nat!1831)
(declare-fun take!260_arg_1_4 (I_take!260) Lst!1835)
(declare-sort I_drop!257 0)
(declare-fun drop!257_arg_0_5 (I_drop!257) Nat!1831)
(declare-fun drop!257_arg_1_6 (I_drop!257) Lst!1835)
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_1 ?i) (append!252_arg_1_2 ?i)) (ite ((_ is nil!1839) (append!252_arg_0_1 ?i)) (append!252_arg_1_2 ?i) (ite ((_ is cons!1836) (append!252_arg_0_1 ?i)) (cons!1836 (head!1837 (append!252_arg_0_1 ?i)) (append!252 (tail!1838 (append!252_arg_0_1 ?i)) (append!252_arg_1_2 ?i))) error_value!1840))) (ite ((_ is nil!1839) (append!252_arg_0_1 ?i)) true (ite ((_ is cons!1836) (append!252_arg_0_1 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_1 ?z) (tail!1838 (append!252_arg_0_1 ?i))) (= (append!252_arg_1_2 ?z) (append!252_arg_1_2 ?i)))) )) true))) ))
(assert (forall ((?i I_take!260)) (and (= (take!260 (take!260_arg_0_3 ?i) (take!260_arg_1_4 ?i)) (ite ((_ is nil!1839) (take!260_arg_1_4 ?i)) nil!1839 (ite ((_ is zero!1834) (take!260_arg_0_3 ?i)) nil!1839 (ite (and ((_ is cons!1836) (take!260_arg_1_4 ?i)) ((_ is succ!1832) (take!260_arg_0_3 ?i))) (cons!1836 (head!1837 (take!260_arg_1_4 ?i)) (take!260 (pred!1833 (take!260_arg_0_3 ?i)) (tail!1838 (take!260_arg_1_4 ?i)))) error_value!1841)))) (ite ((_ is nil!1839) (take!260_arg_1_4 ?i)) true (ite ((_ is zero!1834) (take!260_arg_0_3 ?i)) true (ite (and ((_ is cons!1836) (take!260_arg_1_4 ?i)) ((_ is succ!1832) (take!260_arg_0_3 ?i))) (not (forall ((?z I_take!260)) (not (and (= (take!260_arg_0_3 ?z) (pred!1833 (take!260_arg_0_3 ?i))) (= (take!260_arg_1_4 ?z) (tail!1838 (take!260_arg_1_4 ?i))))) )) true)))) ))
(assert (forall ((?i I_drop!257)) (and (= (drop!257 (drop!257_arg_0_5 ?i) (drop!257_arg_1_6 ?i)) (ite ((_ is nil!1839) (drop!257_arg_1_6 ?i)) nil!1839 (ite ((_ is zero!1834) (drop!257_arg_0_5 ?i)) (drop!257_arg_1_6 ?i) (ite (and ((_ is cons!1836) (drop!257_arg_1_6 ?i)) ((_ is succ!1832) (drop!257_arg_0_5 ?i))) (drop!257 (pred!1833 (drop!257_arg_0_5 ?i)) (tail!1838 (drop!257_arg_1_6 ?i))) error_value!1842)))) (ite ((_ is nil!1839) (drop!257_arg_1_6 ?i)) true (ite ((_ is zero!1834) (drop!257_arg_0_5 ?i)) true (ite (and ((_ is cons!1836) (drop!257_arg_1_6 ?i)) ((_ is succ!1832) (drop!257_arg_0_5 ?i))) (not (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_5 ?z) (pred!1833 (drop!257_arg_0_5 ?i))) (= (drop!257_arg_1_6 ?z) (tail!1838 (drop!257_arg_1_6 ?i))))) )) true)))) ))
(assert (not (forall ((n!304 Nat!1831) (xs!305 Lst!1835)) (or (= (drop!257 n!304 xs!305) xs!305) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_5 ?z) n!304) (= (drop!257_arg_1_6 ?z) xs!305))) )) )))
(check-sat)
(exit)

