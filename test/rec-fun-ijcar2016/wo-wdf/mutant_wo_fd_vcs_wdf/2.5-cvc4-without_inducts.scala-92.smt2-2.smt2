(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2392 0)(Nat!2397 0)) (((cons!2393 (head!2394 Nat!2397) (tail!2395 Lst!2392)) (nil!2396))
((succ!2398 (pred!2399 Nat!2397)) (zero!2400))
))
(declare-fun error_value!2401 () Nat!2397)
(declare-fun last!265 (Lst!2392) Nat!2397)
(declare-fun error_value!2402 () Lst!2392)
(declare-fun append!252 (Lst!2392 Lst!2392) Lst!2392)
(declare-sort I_last!265 0)
(declare-fun last!265_arg_0_1 (I_last!265) Lst!2392)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_2 (I_append!252) Lst!2392)
(declare-fun append!252_arg_1_3 (I_append!252) Lst!2392)
(assert (forall ((?i I_last!265)) (and (= (last!265 (last!265_arg_0_1 ?i)) (ite ((_ is nil!2396) (last!265_arg_0_1 ?i)) zero!2400 (ite ((_ is cons!2393) (last!265_arg_0_1 ?i)) (ite (= (tail!2395 (last!265_arg_0_1 ?i)) nil!2396) (head!2394 (last!265_arg_0_1 ?i)) (last!265 (tail!2395 (last!265_arg_0_1 ?i)))) error_value!2401))) (ite ((_ is nil!2396) (last!265_arg_0_1 ?i)) true (ite ((_ is cons!2393) (last!265_arg_0_1 ?i)) (ite (= (tail!2395 (last!265_arg_0_1 ?i)) nil!2396) true (not (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) (tail!2395 (last!265_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_2 ?i) (append!252_arg_1_3 ?i)) (ite ((_ is nil!2396) (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i) (ite ((_ is cons!2393) (append!252_arg_0_2 ?i)) (cons!2393 (head!2394 (append!252_arg_0_2 ?i)) (append!252 (tail!2395 (append!252_arg_0_2 ?i)) (append!252_arg_1_3 ?i))) error_value!2402))) (ite ((_ is nil!2396) (append!252_arg_0_2 ?i)) true (ite ((_ is cons!2393) (append!252_arg_0_2 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) (tail!2395 (append!252_arg_0_2 ?i))) (= (append!252_arg_1_3 ?z) (append!252_arg_1_3 ?i)))) )) true))) ))
(assert (not (forall ((ys!478 Lst!2392) (xs!477 Lst!2392)) (or (or (= (last!265 ys!478) (last!265 (append!252 xs!477 ys!478))) (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) ys!478)) ) (forall ((?z I_last!265)) (not (= (last!265_arg_0_1 ?z) (append!252 xs!477 ys!478))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_2 ?z) xs!477) (= (append!252_arg_1_3 ?z) ys!478))) )) (= ys!478 nil!2396)) )))
(check-sat)
(exit)

