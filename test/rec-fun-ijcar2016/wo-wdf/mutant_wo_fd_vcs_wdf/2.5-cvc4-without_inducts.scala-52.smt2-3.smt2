(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!1971 0)) (((succ!1972 (pred!1973 Nat!1971)) (zero!1974))
))
(declare-datatypes ((Lst!1975 0)) (((cons!1976 (head!1977 Nat!1971) (tail!1978 Lst!1975)) (nil!1979))
))
(declare-fun error_value!1980 () Nat!1971)
(declare-fun len!254 (Lst!1975) Nat!1971)
(declare-fun error_value!1981 () Lst!1975)
(declare-fun drop!257 (Nat!1971 Lst!1975) Lst!1975)
(declare-fun error_value!1982 () Nat!1971)
(declare-fun minus!240 (Nat!1971 Nat!1971) Nat!1971)
(declare-sort I_len!254 0)
(declare-fun len!254_arg_0_1 (I_len!254) Lst!1975)
(declare-sort I_drop!257 0)
(declare-fun drop!257_arg_0_2 (I_drop!257) Nat!1971)
(declare-fun drop!257_arg_1_3 (I_drop!257) Lst!1975)
(declare-sort I_minus!240 0)
(declare-fun minus!240_arg_0_4 (I_minus!240) Nat!1971)
(declare-fun minus!240_arg_1_5 (I_minus!240) Nat!1971)
(assert (forall ((?i I_len!254)) (and (= (len!254 (len!254_arg_0_1 ?i)) (ite ((_ is nil!1979) (len!254_arg_0_1 ?i)) zero!1974 (ite ((_ is cons!1976) (len!254_arg_0_1 ?i)) (succ!1972 (len!254 (tail!1978 (len!254_arg_0_1 ?i)))) error_value!1980))) (ite ((_ is nil!1979) (len!254_arg_0_1 ?i)) true (ite ((_ is cons!1976) (len!254_arg_0_1 ?i)) (not (forall ((?z I_len!254)) (not (= (len!254_arg_0_1 ?z) (tail!1978 (len!254_arg_0_1 ?i)))) )) true))) ))
(assert (forall ((?i I_drop!257)) (and (= (drop!257 (drop!257_arg_0_2 ?i) (drop!257_arg_1_3 ?i)) (ite ((_ is nil!1979) (drop!257_arg_1_3 ?i)) nil!1979 (ite ((_ is zero!1974) (drop!257_arg_0_2 ?i)) (drop!257_arg_1_3 ?i) (ite (and ((_ is cons!1976) (drop!257_arg_1_3 ?i)) ((_ is succ!1972) (drop!257_arg_0_2 ?i))) (drop!257 (pred!1973 (drop!257_arg_0_2 ?i)) (tail!1978 (drop!257_arg_1_3 ?i))) error_value!1981)))) (ite ((_ is nil!1979) (drop!257_arg_1_3 ?i)) true (ite ((_ is zero!1974) (drop!257_arg_0_2 ?i)) true (ite (and ((_ is cons!1976) (drop!257_arg_1_3 ?i)) ((_ is succ!1972) (drop!257_arg_0_2 ?i))) (not (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_2 ?z) (pred!1973 (drop!257_arg_0_2 ?i))) (= (drop!257_arg_1_3 ?z) (tail!1978 (drop!257_arg_1_3 ?i))))) )) true)))) ))
(assert (forall ((?i I_minus!240)) (and (= (minus!240 (minus!240_arg_0_4 ?i) (minus!240_arg_1_5 ?i)) (ite ((_ is zero!1974) (minus!240_arg_0_4 ?i)) zero!1974 (ite ((_ is zero!1974) (minus!240_arg_1_5 ?i)) (minus!240_arg_0_4 ?i) (ite (and ((_ is succ!1972) (minus!240_arg_1_5 ?i)) ((_ is succ!1972) (minus!240_arg_0_4 ?i))) (minus!240 (pred!1973 (minus!240_arg_0_4 ?i)) (pred!1973 (minus!240_arg_1_5 ?i))) error_value!1982)))) (ite ((_ is zero!1974) (minus!240_arg_0_4 ?i)) true (ite ((_ is zero!1974) (minus!240_arg_1_5 ?i)) true (ite (and ((_ is succ!1972) (minus!240_arg_1_5 ?i)) ((_ is succ!1972) (minus!240_arg_0_4 ?i))) (not (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_4 ?z) (pred!1973 (minus!240_arg_0_4 ?i))) (= (minus!240_arg_1_5 ?z) (pred!1973 (minus!240_arg_1_5 ?i))))) )) true)))) ))
(assert (not (forall ((n!355 Nat!1971) (xs!356 Lst!1975)) (or (= (len!254 (drop!257 n!355 xs!356)) (len!254 xs!356)) (forall ((?z I_len!254)) (not (= (len!254_arg_0_1 ?z) (drop!257 n!355 xs!356))) ) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_2 ?z) n!355) (= (drop!257_arg_1_3 ?z) xs!356))) ) (forall ((?z I_len!254)) (not (= (len!254_arg_0_1 ?z) xs!356)) )) )))
(check-sat)
(exit)

