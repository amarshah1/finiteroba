(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Tree!1000 0)) (((DivTree!1001 (left!1002 Tree!1000) (right!1003 Tree!1000)) (IntLitTree!1004 (value!1005 Bool)) (MinusTree!1006 (left!1007 Tree!1000) (right!1008 Tree!1000)) (PlusTree!1009 (left!1010 Tree!1000) (right!1011 Tree!1000)) (TimesTree!1012 (left!1013 Tree!1000) (right!1014 Tree!1000)))
))
(declare-fun error_value!1015 () (_ BitVec 32))
(declare-fun treeSize!212 (Tree!1000) (_ BitVec 32))
(declare-fun error_value!1016 () (_ BitVec 32))
(declare-sort I_treeSize!212 0)
(declare-fun treeSize!212_arg_0_1 (I_treeSize!212) Tree!1000)
(assert (forall ((?i I_treeSize!212)) (and (= (ite ((_ is IntLitTree!1004) (treeSize!212_arg_0_1 ?i)) (_ bv1 32) (ite ((_ is PlusTree!1009) (treeSize!212_arg_0_1 ?i)) (bvadd (treeSize!212 (left!1010 (treeSize!212_arg_0_1 ?i))) (bvadd (treeSize!212 (right!1011 (treeSize!212_arg_0_1 ?i))) (_ bv1 32))) (ite ((_ is MinusTree!1006) (treeSize!212_arg_0_1 ?i)) (bvadd (treeSize!212 (left!1007 (treeSize!212_arg_0_1 ?i))) (bvadd (treeSize!212 (right!1008 (treeSize!212_arg_0_1 ?i))) (_ bv1 32))) (ite ((_ is TimesTree!1012) (treeSize!212_arg_0_1 ?i)) (bvadd (treeSize!212 (left!1013 (treeSize!212_arg_0_1 ?i))) (bvadd (treeSize!212 (right!1014 (treeSize!212_arg_0_1 ?i))) (_ bv1 32))) (ite ((_ is DivTree!1001) (treeSize!212_arg_0_1 ?i)) (bvadd (treeSize!212 (left!1002 (treeSize!212_arg_0_1 ?i))) (bvadd (treeSize!212 (right!1003 (treeSize!212_arg_0_1 ?i))) (_ bv1 32))) error_value!1015))))) (treeSize!212 (treeSize!212_arg_0_1 ?i))) (ite ((_ is IntLitTree!1004) (treeSize!212_arg_0_1 ?i)) true (ite ((_ is PlusTree!1009) (treeSize!212_arg_0_1 ?i)) (and (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (left!1010 (treeSize!212_arg_0_1 ?i)))) )) (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (right!1011 (treeSize!212_arg_0_1 ?i)))) ))) (ite ((_ is MinusTree!1006) (treeSize!212_arg_0_1 ?i)) (and (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (left!1007 (treeSize!212_arg_0_1 ?i)))) )) (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (right!1008 (treeSize!212_arg_0_1 ?i)))) ))) (ite ((_ is TimesTree!1012) (treeSize!212_arg_0_1 ?i)) (and (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (left!1013 (treeSize!212_arg_0_1 ?i)))) )) (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (right!1014 (treeSize!212_arg_0_1 ?i)))) ))) (ite ((_ is DivTree!1001) (treeSize!212_arg_0_1 ?i)) (and (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (left!1002 (treeSize!212_arg_0_1 ?i)))) )) (not (forall ((?z I_treeSize!212)) (not (= (treeSize!212_arg_0_1 ?z) (right!1003 (treeSize!212_arg_0_1 ?i)))) ))) true)))))) ))
(check-sat)
(exit)

