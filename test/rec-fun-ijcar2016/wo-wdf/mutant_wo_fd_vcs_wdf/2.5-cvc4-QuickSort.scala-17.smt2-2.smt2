(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!1109 0)) (((Cons!1110 (head!1111 (_ BitVec 32)) (tail!1112 List!1109)) (Nil!1113))
))
(declare-datatypes ((OptInt!1114 0)) (((None!1115) (Some!1116 (i!1117 (_ BitVec 32))))
))
(declare-fun error_value!1118 () OptInt!1114)
(declare-fun error_value!1119 () OptInt!1114)
(declare-fun max!216 (List!1109) OptInt!1114)
(declare-fun error_value!1120 () List!1109)
(declare-fun smaller!233 ((_ BitVec 32) List!1109) List!1109)
(declare-fun error_value!1121 () Bool)
(declare-fun error_value!1122 () Bool)
(declare-sort I_max!216 0)
(declare-fun max!216_arg_0_1 (I_max!216) List!1109)
(declare-sort I_smaller!233 0)
(declare-fun smaller!233_arg_0_2 (I_smaller!233) (_ BitVec 32))
(declare-fun smaller!233_arg_1_3 (I_smaller!233) List!1109)
(assert (forall ((?i I_max!216)) (and (= (max!216 (max!216_arg_0_1 ?i)) (ite ((_ is Nil!1113) (max!216_arg_0_1 ?i)) None!1115 (ite ((_ is Cons!1110) (max!216_arg_0_1 ?i)) (ite ((_ is Some!1116) (max!216 (tail!1112 (max!216_arg_0_1 ?i)))) (ite (not (bvslt (head!1111 (max!216_arg_0_1 ?i)) (i!1117 (max!216 (tail!1112 (max!216_arg_0_1 ?i)))))) (Some!1116 (head!1111 (max!216_arg_0_1 ?i))) (Some!1116 (i!1117 (max!216 (tail!1112 (max!216_arg_0_1 ?i)))))) (ite ((_ is None!1115) (max!216 (tail!1112 (max!216_arg_0_1 ?i)))) (Some!1116 (head!1111 (max!216_arg_0_1 ?i))) error_value!1118)) error_value!1119))) (ite ((_ is Nil!1113) (max!216_arg_0_1 ?i)) true (ite ((_ is Cons!1110) (max!216_arg_0_1 ?i)) (and (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1112 (max!216_arg_0_1 ?i)))) )) (ite ((_ is Some!1116) (max!216 (tail!1112 (max!216_arg_0_1 ?i)))) (and (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1112 (max!216_arg_0_1 ?i)))) )) (ite (not (bvslt (head!1111 (max!216_arg_0_1 ?i)) (i!1117 (max!216 (tail!1112 (max!216_arg_0_1 ?i)))))) true (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1112 (max!216_arg_0_1 ?i)))) )))) (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1112 (max!216_arg_0_1 ?i)))) )))) true))) ))
(assert (forall ((?i I_smaller!233)) (and (= (smaller!233 (smaller!233_arg_0_2 ?i) (smaller!233_arg_1_3 ?i)) (ite ((_ is Nil!1113) (smaller!233_arg_1_3 ?i)) Nil!1113 (ite ((_ is Cons!1110) (smaller!233_arg_1_3 ?i)) (ite (bvslt (head!1111 (smaller!233_arg_1_3 ?i)) (smaller!233_arg_0_2 ?i)) (Cons!1110 (head!1111 (smaller!233_arg_1_3 ?i)) (smaller!233 (smaller!233_arg_0_2 ?i) (tail!1112 (smaller!233_arg_1_3 ?i)))) (smaller!233 (smaller!233_arg_0_2 ?i) (tail!1112 (smaller!233_arg_1_3 ?i)))) error_value!1120))) (ite ((_ is Nil!1113) (smaller!233_arg_1_3 ?i)) true (ite ((_ is Cons!1110) (smaller!233_arg_1_3 ?i)) (ite (bvslt (head!1111 (smaller!233_arg_1_3 ?i)) (smaller!233_arg_0_2 ?i)) (not (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) (smaller!233_arg_0_2 ?i)) (= (smaller!233_arg_1_3 ?z) (tail!1112 (smaller!233_arg_1_3 ?i))))) )) (not (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) (smaller!233_arg_0_2 ?i)) (= (smaller!233_arg_1_3 ?z) (tail!1112 (smaller!233_arg_1_3 ?i))))) ))) true))) ))
(assert (not (forall ((n!234 (_ BitVec 32)) (BOUND_VARIABLE_396 (_ BitVec 32)) (BOUND_VARIABLE_397 List!1109)) (or (or (ite ((_ is Some!1116) (max!216 (smaller!233 n!234 (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) (not (and (bvslt (i!1117 (max!216 (smaller!233 n!234 BOUND_VARIABLE_397))) n!234) (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (smaller!233 n!234 BOUND_VARIABLE_397))) )) (not (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) n!234) (= (smaller!233_arg_1_3 ?z) BOUND_VARIABLE_397))) )))) (or (ite ((_ is None!1115) (max!216 (smaller!233 n!234 BOUND_VARIABLE_397))) false (not error_value!1121)) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (smaller!233 n!234 BOUND_VARIABLE_397))) ) (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) n!234) (= (smaller!233_arg_1_3 ?z) BOUND_VARIABLE_397))) ))) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (smaller!233 n!234 (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) ) (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) n!234) (= (smaller!233_arg_1_3 ?z) (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) )) (or (ite ((_ is Some!1116) (max!216 (smaller!233 n!234 BOUND_VARIABLE_397))) (or (bvslt (i!1117 (max!216 (smaller!233 n!234 (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) n!234) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (smaller!233 n!234 (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) ) (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) n!234) (= (smaller!233_arg_1_3 ?z) (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) )) (or (ite ((_ is None!1115) (max!216 (smaller!233 n!234 (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) true error_value!1122) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (smaller!233 n!234 (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) ) (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) n!234) (= (smaller!233_arg_1_3 ?z) (Cons!1110 BOUND_VARIABLE_396 BOUND_VARIABLE_397)))) ))) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (smaller!233 n!234 BOUND_VARIABLE_397))) ) (forall ((?z I_smaller!233)) (not (and (= (smaller!233_arg_0_2 ?z) n!234) (= (smaller!233_arg_1_3 ?z) BOUND_VARIABLE_397))) ))) )))
(check-sat)
(exit)

