(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Tree!2228 0)(Nat!2234 0)) (((leaf!2229) (node!2230 (data!2231 Nat!2234) (left!2232 Tree!2228) (right!2233 Tree!2228)))
((succ!2235 (pred!2236 Nat!2234)) (zero!2237))
))
(declare-fun error_value!2238 () Nat!2234)
(declare-fun error_value!2239 () Bool)
(declare-fun height!303 (Tree!2228) Nat!2234)
(declare-fun nmax!246 (Nat!2234 Nat!2234) Nat!2234)
(declare-fun less!231 (Nat!2234 Nat!2234) Bool)
(declare-fun error_value!2240 () Tree!2228)
(declare-fun mirror!301 (Tree!2228) Tree!2228)
(declare-sort I_height!303 0)
(declare-fun height!303_arg_0_1 (I_height!303) Tree!2228)
(declare-sort I_nmax!246 0)
(declare-fun nmax!246_arg_0_2 (I_nmax!246) Nat!2234)
(declare-fun nmax!246_arg_1_3 (I_nmax!246) Nat!2234)
(declare-sort I_less!231 0)
(declare-fun less!231_arg_0_4 (I_less!231) Nat!2234)
(declare-fun less!231_arg_1_5 (I_less!231) Nat!2234)
(declare-sort I_mirror!301 0)
(declare-fun mirror!301_arg_0_6 (I_mirror!301) Tree!2228)
(assert (forall ((?i I_height!303)) (and (= (height!303 (height!303_arg_0_1 ?i)) (ite ((_ is leaf!2229) (height!303_arg_0_1 ?i)) zero!2237 (ite ((_ is node!2230) (height!303_arg_0_1 ?i)) (succ!2235 (nmax!246 (height!303 (left!2232 (height!303_arg_0_1 ?i))) (height!303 (right!2233 (height!303_arg_0_1 ?i))))) error_value!2238))) (ite ((_ is leaf!2229) (height!303_arg_0_1 ?i)) true (ite ((_ is node!2230) (height!303_arg_0_1 ?i)) (and (not (forall ((?z I_nmax!246)) (not (and (= (nmax!246_arg_0_2 ?z) (height!303 (left!2232 (height!303_arg_0_1 ?i)))) (= (nmax!246_arg_1_3 ?z) (height!303 (right!2233 (height!303_arg_0_1 ?i)))))) )) (not (forall ((?z I_height!303)) (not (= (height!303_arg_0_1 ?z) (left!2232 (height!303_arg_0_1 ?i)))) )) (not (forall ((?z I_height!303)) (not (= (height!303_arg_0_1 ?z) (right!2233 (height!303_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_nmax!246)) (and (= (nmax!246 (nmax!246_arg_0_2 ?i) (nmax!246_arg_1_3 ?i)) (ite (less!231 (nmax!246_arg_0_2 ?i) (nmax!246_arg_1_3 ?i)) (nmax!246_arg_1_3 ?i) (nmax!246_arg_0_2 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_4 ?z) (nmax!246_arg_0_2 ?i)) (= (less!231_arg_1_5 ?z) (nmax!246_arg_1_3 ?i)))) ))) ))
(assert (forall ((?i I_less!231)) (and (= (less!231 (less!231_arg_0_4 ?i) (less!231_arg_1_5 ?i)) (ite ((_ is zero!2237) (less!231_arg_1_5 ?i)) false (ite (and ((_ is succ!2235) (less!231_arg_1_5 ?i)) ((_ is zero!2237) (less!231_arg_0_4 ?i))) true (ite (and ((_ is succ!2235) (less!231_arg_1_5 ?i)) ((_ is succ!2235) (less!231_arg_0_4 ?i))) (less!231 (pred!2236 (less!231_arg_0_4 ?i)) (pred!2236 (less!231_arg_1_5 ?i))) error_value!2239)))) (ite ((_ is zero!2237) (less!231_arg_1_5 ?i)) true (ite (and ((_ is succ!2235) (less!231_arg_1_5 ?i)) ((_ is zero!2237) (less!231_arg_0_4 ?i))) true (ite (and ((_ is succ!2235) (less!231_arg_1_5 ?i)) ((_ is succ!2235) (less!231_arg_0_4 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_4 ?z) (pred!2236 (less!231_arg_0_4 ?i))) (= (less!231_arg_1_5 ?z) (pred!2236 (less!231_arg_1_5 ?i))))) )) true)))) ))
(assert (forall ((?i I_mirror!301)) (and (= (mirror!301 (mirror!301_arg_0_6 ?i)) (ite ((_ is leaf!2229) (mirror!301_arg_0_6 ?i)) leaf!2229 (ite ((_ is node!2230) (mirror!301_arg_0_6 ?i)) (node!2230 (data!2231 (mirror!301_arg_0_6 ?i)) (mirror!301 (right!2233 (mirror!301_arg_0_6 ?i))) (mirror!301 (left!2232 (mirror!301_arg_0_6 ?i)))) error_value!2240))) (ite ((_ is leaf!2229) (mirror!301_arg_0_6 ?i)) true (ite ((_ is node!2230) (mirror!301_arg_0_6 ?i)) (and (not (forall ((?z I_mirror!301)) (not (= (mirror!301_arg_0_6 ?z) (right!2233 (mirror!301_arg_0_6 ?i)))) )) (not (forall ((?z I_mirror!301)) (not (= (mirror!301_arg_0_6 ?z) (left!2232 (mirror!301_arg_0_6 ?i)))) ))) true))) ))
(assert (not (forall ((a!433 Tree!2228)) (or (= (height!303 a!433) (height!303 (mirror!301 a!433))) (forall ((?z I_height!303)) (not (= (height!303_arg_0_1 ?z) a!433)) ) (forall ((?z I_height!303)) (not (= (height!303_arg_0_1 ?z) (mirror!301 a!433))) ) (forall ((?z I_mirror!301)) (not (= (mirror!301_arg_0_6 ?z) a!433)) )) )))
(check-sat)
(exit)

