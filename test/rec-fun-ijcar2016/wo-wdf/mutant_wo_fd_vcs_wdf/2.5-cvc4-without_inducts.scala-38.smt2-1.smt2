(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!1855 0)) (((succ!1856 (pred!1857 Nat!1855)) (zero!1858))
))
(declare-datatypes ((Lst!1859 0)) (((cons!1860 (head!1861 Nat!1855) (tail!1862 Lst!1859)) (nil!1863))
))
(declare-fun error_value!1864 () Bool)
(declare-fun leq!234 (Nat!1855 Nat!1855) Bool)
(declare-fun less!231 (Nat!1855 Nat!1855) Bool)
(declare-fun error_value!1865 () Nat!1855)
(declare-fun count!263 (Nat!1855 Lst!1859) Nat!1855)
(declare-fun error_value!1866 () Lst!1859)
(declare-fun append!252 (Lst!1859 Lst!1859) Lst!1859)
(declare-sort I_leq!234 0)
(declare-fun leq!234_arg_0_1 (I_leq!234) Nat!1855)
(declare-fun leq!234_arg_1_2 (I_leq!234) Nat!1855)
(declare-sort I_less!231 0)
(declare-fun less!231_arg_0_3 (I_less!231) Nat!1855)
(declare-fun less!231_arg_1_4 (I_less!231) Nat!1855)
(declare-sort I_count!263 0)
(declare-fun count!263_arg_0_5 (I_count!263) Nat!1855)
(declare-fun count!263_arg_1_6 (I_count!263) Lst!1859)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_7 (I_append!252) Lst!1859)
(declare-fun append!252_arg_1_8 (I_append!252) Lst!1859)
(assert (forall ((?i I_leq!234)) (and (= (leq!234 (leq!234_arg_0_1 ?i) (leq!234_arg_1_2 ?i)) (or (less!231 (leq!234_arg_0_1 ?i) (leq!234_arg_1_2 ?i)) (= (leq!234_arg_0_1 ?i) (leq!234_arg_1_2 ?i)))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_3 ?z) (leq!234_arg_0_1 ?i)) (= (less!231_arg_1_4 ?z) (leq!234_arg_1_2 ?i)))) ))) ))
(assert (forall ((?i I_less!231)) (and (= (less!231 (less!231_arg_0_3 ?i) (less!231_arg_1_4 ?i)) (ite ((_ is zero!1858) (less!231_arg_1_4 ?i)) false (ite (and ((_ is succ!1856) (less!231_arg_1_4 ?i)) ((_ is zero!1858) (less!231_arg_0_3 ?i))) true (ite (and ((_ is succ!1856) (less!231_arg_1_4 ?i)) ((_ is succ!1856) (less!231_arg_0_3 ?i))) (less!231 (pred!1857 (less!231_arg_0_3 ?i)) (pred!1857 (less!231_arg_1_4 ?i))) error_value!1864)))) (ite ((_ is zero!1858) (less!231_arg_1_4 ?i)) true (ite (and ((_ is succ!1856) (less!231_arg_1_4 ?i)) ((_ is zero!1858) (less!231_arg_0_3 ?i))) true (ite (and ((_ is succ!1856) (less!231_arg_1_4 ?i)) ((_ is succ!1856) (less!231_arg_0_3 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_3 ?z) (pred!1857 (less!231_arg_0_3 ?i))) (= (less!231_arg_1_4 ?z) (pred!1857 (less!231_arg_1_4 ?i))))) )) true)))) ))
(assert (forall ((?i I_count!263)) (and (= (count!263 (count!263_arg_0_5 ?i) (count!263_arg_1_6 ?i)) (ite ((_ is nil!1863) (count!263_arg_1_6 ?i)) zero!1858 (ite ((_ is cons!1860) (count!263_arg_1_6 ?i)) (ite (= (count!263_arg_0_5 ?i) (head!1861 (count!263_arg_1_6 ?i))) (succ!1856 (count!263 (count!263_arg_0_5 ?i) (tail!1862 (count!263_arg_1_6 ?i)))) (count!263 (count!263_arg_0_5 ?i) (tail!1862 (count!263_arg_1_6 ?i)))) error_value!1865))) (ite ((_ is nil!1863) (count!263_arg_1_6 ?i)) true (ite ((_ is cons!1860) (count!263_arg_1_6 ?i)) (ite (= (count!263_arg_0_5 ?i) (head!1861 (count!263_arg_1_6 ?i))) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_5 ?z) (count!263_arg_0_5 ?i)) (= (count!263_arg_1_6 ?z) (tail!1862 (count!263_arg_1_6 ?i))))) )) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_5 ?z) (count!263_arg_0_5 ?i)) (= (count!263_arg_1_6 ?z) (tail!1862 (count!263_arg_1_6 ?i))))) ))) true))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_7 ?i) (append!252_arg_1_8 ?i)) (ite ((_ is nil!1863) (append!252_arg_0_7 ?i)) (append!252_arg_1_8 ?i) (ite ((_ is cons!1860) (append!252_arg_0_7 ?i)) (cons!1860 (head!1861 (append!252_arg_0_7 ?i)) (append!252 (tail!1862 (append!252_arg_0_7 ?i)) (append!252_arg_1_8 ?i))) error_value!1866))) (ite ((_ is nil!1863) (append!252_arg_0_7 ?i)) true (ite ((_ is cons!1860) (append!252_arg_0_7 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_7 ?z) (tail!1862 (append!252_arg_0_7 ?i))) (= (append!252_arg_1_8 ?z) (append!252_arg_1_8 ?i)))) )) true))) ))
(assert (not (forall ((n!311 Nat!1855) (l!312 Lst!1859) (m!313 Lst!1859)) (or (leq!234 (count!263 n!311 l!312) (count!263 n!311 m!313)) (forall ((?z I_leq!234)) (not (and (= (leq!234_arg_0_1 ?z) (count!263 n!311 l!312)) (= (leq!234_arg_1_2 ?z) (count!263 n!311 m!313)))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_5 ?z) n!311) (= (count!263_arg_1_6 ?z) l!312))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_5 ?z) n!311) (= (count!263_arg_1_6 ?z) m!313))) )) )))
(check-sat)
(exit)

