(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!1153 0)) (((Cons!1154 (head!1155 (_ BitVec 32)) (tail!1156 List!1153)) (Nil!1157))
))
(declare-datatypes ((OptInt!1158 0)) (((None!1159) (Some!1160 (i!1161 (_ BitVec 32))))
))
(declare-fun error_value!1162 () OptInt!1158)
(declare-fun error_value!1163 () OptInt!1158)
(declare-fun max!216 (List!1153) OptInt!1158)
(declare-fun error_value!1164 () List!1153)
(declare-fun equals!239 ((_ BitVec 32) List!1153) List!1153)
(declare-fun error_value!1165 () Bool)
(declare-fun error_value!1166 () Bool)
(declare-sort I_max!216 0)
(declare-fun max!216_arg_0_1 (I_max!216) List!1153)
(declare-sort I_equals!239 0)
(declare-fun equals!239_arg_0_2 (I_equals!239) (_ BitVec 32))
(declare-fun equals!239_arg_1_3 (I_equals!239) List!1153)
(assert (forall ((?i I_max!216)) (and (= (max!216 (max!216_arg_0_1 ?i)) (ite ((_ is Nil!1157) (max!216_arg_0_1 ?i)) None!1159 (ite ((_ is Cons!1154) (max!216_arg_0_1 ?i)) (ite ((_ is Some!1160) (max!216 (tail!1156 (max!216_arg_0_1 ?i)))) (ite (not (bvslt (head!1155 (max!216_arg_0_1 ?i)) (i!1161 (max!216 (tail!1156 (max!216_arg_0_1 ?i)))))) (Some!1160 (head!1155 (max!216_arg_0_1 ?i))) (Some!1160 (i!1161 (max!216 (tail!1156 (max!216_arg_0_1 ?i)))))) (ite ((_ is None!1159) (max!216 (tail!1156 (max!216_arg_0_1 ?i)))) (Some!1160 (head!1155 (max!216_arg_0_1 ?i))) error_value!1162)) error_value!1163))) (ite ((_ is Nil!1157) (max!216_arg_0_1 ?i)) true (ite ((_ is Cons!1154) (max!216_arg_0_1 ?i)) (and (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1156 (max!216_arg_0_1 ?i)))) )) (ite ((_ is Some!1160) (max!216 (tail!1156 (max!216_arg_0_1 ?i)))) (and (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1156 (max!216_arg_0_1 ?i)))) )) (ite (not (bvslt (head!1155 (max!216_arg_0_1 ?i)) (i!1161 (max!216 (tail!1156 (max!216_arg_0_1 ?i)))))) true (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1156 (max!216_arg_0_1 ?i)))) )))) (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (tail!1156 (max!216_arg_0_1 ?i)))) )))) true))) ))
(assert (forall ((?i I_equals!239)) (and (= (equals!239 (equals!239_arg_0_2 ?i) (equals!239_arg_1_3 ?i)) (ite ((_ is Nil!1157) (equals!239_arg_1_3 ?i)) Nil!1157 (ite ((_ is Cons!1154) (equals!239_arg_1_3 ?i)) (ite (= (head!1155 (equals!239_arg_1_3 ?i)) (equals!239_arg_0_2 ?i)) (Cons!1154 (head!1155 (equals!239_arg_1_3 ?i)) (equals!239 (equals!239_arg_0_2 ?i) (tail!1156 (equals!239_arg_1_3 ?i)))) (equals!239 (equals!239_arg_0_2 ?i) (tail!1156 (equals!239_arg_1_3 ?i)))) error_value!1164))) (ite ((_ is Nil!1157) (equals!239_arg_1_3 ?i)) true (ite ((_ is Cons!1154) (equals!239_arg_1_3 ?i)) (ite (= (head!1155 (equals!239_arg_1_3 ?i)) (equals!239_arg_0_2 ?i)) (not (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) (equals!239_arg_0_2 ?i)) (= (equals!239_arg_1_3 ?z) (tail!1156 (equals!239_arg_1_3 ?i))))) )) (not (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) (equals!239_arg_0_2 ?i)) (= (equals!239_arg_1_3 ?z) (tail!1156 (equals!239_arg_1_3 ?i))))) ))) true))) ))
(assert (exists ((list!241 List!1153) (n!240 (_ BitVec 32))) (not (=> (and (and ((_ is Cons!1154) list!241) ((_ is Cons!1154) list!241)) (and (ite ((_ is Some!1160) (max!216 (equals!239 n!240 (tail!1156 list!241)))) (and (= n!240 (i!1161 (max!216 (equals!239 n!240 (tail!1156 list!241))))) (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (equals!239 n!240 (tail!1156 list!241)))) )) (not (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) n!240) (= (equals!239_arg_1_3 ?z) (tail!1156 list!241)))) ))) (and (ite ((_ is None!1159) (max!216 (equals!239 n!240 (tail!1156 list!241)))) true error_value!1165) (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (equals!239 n!240 (tail!1156 list!241)))) )) (not (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) n!240) (= (equals!239_arg_1_3 ?z) (tail!1156 list!241)))) )))) (not (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (equals!239 n!240 (tail!1156 list!241)))) )) (not (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) n!240) (= (equals!239_arg_1_3 ?z) (tail!1156 list!241)))) )))) (or (ite ((_ is Some!1160) (max!216 (equals!239 n!240 list!241))) (or (= n!240 (i!1161 (max!216 (equals!239 n!240 list!241)))) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (equals!239 n!240 list!241))) ) (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) n!240) (= (equals!239_arg_1_3 ?z) list!241))) )) (or (ite ((_ is None!1159) (max!216 (equals!239 n!240 list!241))) true error_value!1166) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (equals!239 n!240 list!241))) ) (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) n!240) (= (equals!239_arg_1_3 ?z) list!241))) ))) (forall ((?z I_max!216)) (not (= (max!216_arg_0_1 ?z) (equals!239 n!240 list!241))) ) (forall ((?z I_equals!239)) (not (and (= (equals!239_arg_0_2 ?z) n!240) (= (equals!239_arg_1_3 ?z) list!241))) )))) ))
(check-sat)
(exit)

