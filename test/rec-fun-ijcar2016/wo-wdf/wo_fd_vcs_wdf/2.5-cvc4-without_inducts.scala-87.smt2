(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2324 0)) (((succ!2325 (pred!2326 Nat!2324)) (zero!2327))
))
(declare-datatypes ((Lst!2328 0)) (((cons!2329 (head!2330 Nat!2324) (tail!2331 Lst!2328)) (nil!2332))
))
(declare-fun error_value!2333 () Lst!2328)
(declare-fun drop!257 (Nat!2324 Lst!2328) Lst!2328)
(declare-fun error_value!2334 () Lst!2328)
(declare-fun append!252 (Lst!2328 Lst!2328) Lst!2328)
(declare-fun error_value!2335 () Nat!2324)
(declare-fun minus!240 (Nat!2324 Nat!2324) Nat!2324)
(declare-fun error_value!2336 () Nat!2324)
(declare-fun len!254 (Lst!2328) Nat!2324)
(declare-sort I_drop!257 0)
(declare-fun drop!257_arg_0_1 (I_drop!257) Nat!2324)
(declare-fun drop!257_arg_1_2 (I_drop!257) Lst!2328)
(declare-sort I_append!252 0)
(declare-fun append!252_arg_0_3 (I_append!252) Lst!2328)
(declare-fun append!252_arg_1_4 (I_append!252) Lst!2328)
(declare-sort I_minus!240 0)
(declare-fun minus!240_arg_0_5 (I_minus!240) Nat!2324)
(declare-fun minus!240_arg_1_6 (I_minus!240) Nat!2324)
(declare-sort I_len!254 0)
(declare-fun len!254_arg_0_7 (I_len!254) Lst!2328)
(assert (forall ((?i I_drop!257)) (and (= (drop!257 (drop!257_arg_0_1 ?i) (drop!257_arg_1_2 ?i)) (ite ((_ is nil!2332) (drop!257_arg_1_2 ?i)) nil!2332 (ite ((_ is zero!2327) (drop!257_arg_0_1 ?i)) (drop!257_arg_1_2 ?i) (ite (and ((_ is cons!2329) (drop!257_arg_1_2 ?i)) ((_ is succ!2325) (drop!257_arg_0_1 ?i))) (drop!257 (pred!2326 (drop!257_arg_0_1 ?i)) (tail!2331 (drop!257_arg_1_2 ?i))) error_value!2333)))) (ite ((_ is nil!2332) (drop!257_arg_1_2 ?i)) true (ite ((_ is zero!2327) (drop!257_arg_0_1 ?i)) true (ite (and ((_ is cons!2329) (drop!257_arg_1_2 ?i)) ((_ is succ!2325) (drop!257_arg_0_1 ?i))) (not (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_1 ?z) (pred!2326 (drop!257_arg_0_1 ?i))) (= (drop!257_arg_1_2 ?z) (tail!2331 (drop!257_arg_1_2 ?i))))) )) true)))) ))
(assert (forall ((?i I_append!252)) (and (= (append!252 (append!252_arg_0_3 ?i) (append!252_arg_1_4 ?i)) (ite ((_ is nil!2332) (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i) (ite ((_ is cons!2329) (append!252_arg_0_3 ?i)) (cons!2329 (head!2330 (append!252_arg_0_3 ?i)) (append!252 (tail!2331 (append!252_arg_0_3 ?i)) (append!252_arg_1_4 ?i))) error_value!2334))) (ite ((_ is nil!2332) (append!252_arg_0_3 ?i)) true (ite ((_ is cons!2329) (append!252_arg_0_3 ?i)) (not (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) (tail!2331 (append!252_arg_0_3 ?i))) (= (append!252_arg_1_4 ?z) (append!252_arg_1_4 ?i)))) )) true))) ))
(assert (forall ((?i I_minus!240)) (and (= (minus!240 (minus!240_arg_0_5 ?i) (minus!240_arg_1_6 ?i)) (ite ((_ is zero!2327) (minus!240_arg_0_5 ?i)) zero!2327 (ite ((_ is zero!2327) (minus!240_arg_1_6 ?i)) (minus!240_arg_0_5 ?i) (ite (and ((_ is succ!2325) (minus!240_arg_1_6 ?i)) ((_ is succ!2325) (minus!240_arg_0_5 ?i))) (minus!240 (pred!2326 (minus!240_arg_0_5 ?i)) (pred!2326 (minus!240_arg_1_6 ?i))) error_value!2335)))) (ite ((_ is zero!2327) (minus!240_arg_0_5 ?i)) true (ite ((_ is zero!2327) (minus!240_arg_1_6 ?i)) true (ite (and ((_ is succ!2325) (minus!240_arg_1_6 ?i)) ((_ is succ!2325) (minus!240_arg_0_5 ?i))) (not (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_5 ?z) (pred!2326 (minus!240_arg_0_5 ?i))) (= (minus!240_arg_1_6 ?z) (pred!2326 (minus!240_arg_1_6 ?i))))) )) true)))) ))
(assert (forall ((?i I_len!254)) (and (= (len!254 (len!254_arg_0_7 ?i)) (ite ((_ is nil!2332) (len!254_arg_0_7 ?i)) zero!2327 (ite ((_ is cons!2329) (len!254_arg_0_7 ?i)) (succ!2325 (len!254 (tail!2331 (len!254_arg_0_7 ?i)))) error_value!2336))) (ite ((_ is nil!2332) (len!254_arg_0_7 ?i)) true (ite ((_ is cons!2329) (len!254_arg_0_7 ?i)) (not (forall ((?z I_len!254)) (not (= (len!254_arg_0_7 ?z) (tail!2331 (len!254_arg_0_7 ?i)))) )) true))) ))
(assert (exists ((n!458 Nat!2324) (xs!459 Lst!2328) (ys!460 Lst!2328)) (not (or (= (drop!257 n!458 (append!252 xs!459 ys!460)) (append!252 (drop!257 n!458 xs!459) (drop!257 (minus!240 n!458 (len!254 xs!459)) ys!460))) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_1 ?z) n!458) (= (drop!257_arg_1_2 ?z) (append!252 xs!459 ys!460)))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) xs!459) (= (append!252_arg_1_4 ?z) ys!460))) ) (forall ((?z I_append!252)) (not (and (= (append!252_arg_0_3 ?z) (drop!257 n!458 xs!459)) (= (append!252_arg_1_4 ?z) (drop!257 (minus!240 n!458 (len!254 xs!459)) ys!460)))) ) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_1 ?z) n!458) (= (drop!257_arg_1_2 ?z) xs!459))) ) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_1 ?z) (minus!240 n!458 (len!254 xs!459))) (= (drop!257_arg_1_2 ?z) ys!460))) ) (forall ((?z I_minus!240)) (not (and (= (minus!240_arg_0_5 ?z) n!458) (= (minus!240_arg_1_6 ?z) (len!254 xs!459)))) ) (forall ((?z I_len!254)) (not (= (len!254_arg_0_7 ?z) xs!459)) ))) ))
(check-sat)
(exit)

