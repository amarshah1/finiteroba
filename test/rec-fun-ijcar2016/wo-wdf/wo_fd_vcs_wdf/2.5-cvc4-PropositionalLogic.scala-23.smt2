(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1288 0)) (((And!1289 (lhs!1290 Formula!1288) (rhs!1291 Formula!1288)) (Implies!1292 (lhs!1293 Formula!1288) (rhs!1294 Formula!1288)) (Literal!1295 (id!1296 (_ BitVec 32))) (Not!1297 (f!1298 Formula!1288)) (Or!1299 (lhs!1300 Formula!1288) (rhs!1301 Formula!1288)))
))
(declare-fun error_value!1302 () Bool)
(declare-fun isNNF!212 (Formula!1288) Bool)
(declare-fun error_value!1303 () Formula!1288)
(declare-fun nnf!210 (Formula!1288) Formula!1288)
(declare-sort I_isNNF!212 0)
(declare-fun isNNF!212_arg_0_1 (I_isNNF!212) Formula!1288)
(declare-sort I_nnf!210 0)
(declare-fun nnf!210_arg_0_2 (I_nnf!210) Formula!1288)
(assert (forall ((?i I_isNNF!212)) (and (= (isNNF!212 (isNNF!212_arg_0_1 ?i)) (ite ((_ is And!1289) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1291 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1290 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Or!1299) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1301 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1300 (isNNF!212_arg_0_1 ?i)))) (ite ((_ is Implies!1292) (isNNF!212_arg_0_1 ?i)) (and (isNNF!212 (rhs!1294 (isNNF!212_arg_0_1 ?i))) (isNNF!212 (lhs!1293 (isNNF!212_arg_0_1 ?i)))) (ite (and ((_ is Literal!1295) (f!1298 (isNNF!212_arg_0_1 ?i))) ((_ is Not!1297) (isNNF!212_arg_0_1 ?i))) true (ite ((_ is Not!1297) (isNNF!212_arg_0_1 ?i)) false (ite ((_ is Literal!1295) (isNNF!212_arg_0_1 ?i)) true error_value!1302))))))) (ite ((_ is And!1289) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1291 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1290 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Or!1299) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1301 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1300 (isNNF!212_arg_0_1 ?i)))) ))) (ite ((_ is Implies!1292) (isNNF!212_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (rhs!1294 (isNNF!212_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (lhs!1293 (isNNF!212_arg_0_1 ?i)))) ))) true)))) ))
(assert (forall ((?i I_nnf!210)) (and (= (nnf!210 (nnf!210_arg_0_2 ?i)) (ite ((_ is And!1289) (nnf!210_arg_0_2 ?i)) (And!1289 (nnf!210 (lhs!1290 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1291 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Or!1299) (nnf!210_arg_0_2 ?i)) (Or!1299 (nnf!210 (lhs!1300 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1301 (nnf!210_arg_0_2 ?i)))) (ite ((_ is Implies!1292) (nnf!210_arg_0_2 ?i)) (Implies!1292 (nnf!210 (lhs!1293 (nnf!210_arg_0_2 ?i))) (nnf!210 (rhs!1294 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is And!1289) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (Or!1299 (nnf!210 (Not!1297 (lhs!1290 (f!1298 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1297 (rhs!1291 (f!1298 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Or!1299) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (And!1289 (nnf!210 (Not!1297 (lhs!1300 (f!1298 (nnf!210_arg_0_2 ?i))))) (nnf!210 (Not!1297 (rhs!1301 (f!1298 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Implies!1292) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (And!1289 (nnf!210 (lhs!1293 (f!1298 (nnf!210_arg_0_2 ?i)))) (nnf!210 (Not!1297 (rhs!1294 (f!1298 (nnf!210_arg_0_2 ?i)))))) (ite (and ((_ is Not!1297) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (nnf!210 (f!1298 (f!1298 (nnf!210_arg_0_2 ?i)))) (ite (and ((_ is Literal!1295) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (nnf!210_arg_0_2 ?i) (ite ((_ is Literal!1295) (nnf!210_arg_0_2 ?i)) (nnf!210_arg_0_2 ?i) error_value!1303)))))))))) (ite ((_ is And!1289) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1290 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1291 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Or!1299) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1300 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1301 (nnf!210_arg_0_2 ?i)))) ))) (ite ((_ is Implies!1292) (nnf!210_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1293 (nnf!210_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (rhs!1294 (nnf!210_arg_0_2 ?i)))) ))) (ite (and ((_ is And!1289) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1297 (lhs!1290 (f!1298 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1297 (rhs!1291 (f!1298 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Or!1299) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1297 (lhs!1300 (f!1298 (nnf!210_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1297 (rhs!1301 (f!1298 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Implies!1292) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (lhs!1293 (f!1298 (nnf!210_arg_0_2 ?i))))) )) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (Not!1297 (rhs!1294 (f!1298 (nnf!210_arg_0_2 ?i)))))) ))) (ite (and ((_ is Not!1297) (f!1298 (nnf!210_arg_0_2 ?i))) ((_ is Not!1297) (nnf!210_arg_0_2 ?i))) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (f!1298 (f!1298 (nnf!210_arg_0_2 ?i))))) )) true)))))))) ))
(assert (exists ((f!219 Formula!1288)) (not (=> (and (and (and ((_ is Not!1297) f!219) ((_ is Not!1297) f!219)) (and (isNNF!212 f!219) (not (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) f!219)) )))) (=> (or (isNNF!212 (f!1298 f!219)) (forall ((?z I_isNNF!212)) (not (= (isNNF!212_arg_0_1 ?z) (f!1298 f!219))) )) (and (= (nnf!210 (f!1298 f!219)) (f!1298 f!219)) (not (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) (f!1298 f!219))) ))))) (or (= (nnf!210 f!219) f!219) (forall ((?z I_nnf!210)) (not (= (nnf!210_arg_0_2 ?z) f!219)) )))) ))
(check-sat)
(exit)

