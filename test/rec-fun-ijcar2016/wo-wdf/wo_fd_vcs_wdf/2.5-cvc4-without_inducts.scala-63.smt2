(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2066 0)) (((succ!2067 (pred!2068 Nat!2066)) (zero!2069))
))
(declare-datatypes ((Lst!2070 0)) (((cons!2071 (head!2072 Nat!2066) (tail!2073 Lst!2070)) (nil!2074))
))
(declare-fun error_value!2075 () Bool)
(declare-fun mem!270 (Nat!2066 Lst!2070) Bool)
(declare-fun error_value!2076 () Lst!2070)
(declare-fun error_value!2077 () Bool)
(declare-fun insort!281 (Nat!2066 Lst!2070) Lst!2070)
(declare-fun less!231 (Nat!2066 Nat!2066) Bool)
(declare-sort I_mem!270 0)
(declare-fun mem!270_arg_0_1 (I_mem!270) Nat!2066)
(declare-fun mem!270_arg_1_2 (I_mem!270) Lst!2070)
(declare-sort I_insort!281 0)
(declare-fun insort!281_arg_0_3 (I_insort!281) Nat!2066)
(declare-fun insort!281_arg_1_4 (I_insort!281) Lst!2070)
(declare-sort I_less!231 0)
(declare-fun less!231_arg_0_5 (I_less!231) Nat!2066)
(declare-fun less!231_arg_1_6 (I_less!231) Nat!2066)
(assert (forall ((?i I_mem!270)) (and (= (mem!270 (mem!270_arg_0_1 ?i) (mem!270_arg_1_2 ?i)) (ite ((_ is nil!2074) (mem!270_arg_1_2 ?i)) false (ite ((_ is cons!2071) (mem!270_arg_1_2 ?i)) (or (mem!270 (mem!270_arg_0_1 ?i) (tail!2073 (mem!270_arg_1_2 ?i))) (= (mem!270_arg_0_1 ?i) (head!2072 (mem!270_arg_1_2 ?i)))) error_value!2075))) (ite ((_ is nil!2074) (mem!270_arg_1_2 ?i)) true (ite ((_ is cons!2071) (mem!270_arg_1_2 ?i)) (not (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) (mem!270_arg_0_1 ?i)) (= (mem!270_arg_1_2 ?z) (tail!2073 (mem!270_arg_1_2 ?i))))) )) true))) ))
(assert (forall ((?i I_insort!281)) (and (= (insort!281 (insort!281_arg_0_3 ?i) (insort!281_arg_1_4 ?i)) (ite ((_ is nil!2074) (insort!281_arg_1_4 ?i)) (cons!2071 (insort!281_arg_0_3 ?i) nil!2074) (ite ((_ is cons!2071) (insort!281_arg_1_4 ?i)) (ite (less!231 (insort!281_arg_0_3 ?i) (head!2072 (insort!281_arg_1_4 ?i))) (cons!2071 (insort!281_arg_0_3 ?i) (cons!2071 (head!2072 (insort!281_arg_1_4 ?i)) (tail!2073 (insort!281_arg_1_4 ?i)))) (cons!2071 (head!2072 (insort!281_arg_1_4 ?i)) (insort!281 (insort!281_arg_0_3 ?i) (tail!2073 (insort!281_arg_1_4 ?i))))) error_value!2076))) (ite ((_ is nil!2074) (insort!281_arg_1_4 ?i)) true (ite ((_ is cons!2071) (insort!281_arg_1_4 ?i)) (and (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_5 ?z) (insort!281_arg_0_3 ?i)) (= (less!231_arg_1_6 ?z) (head!2072 (insort!281_arg_1_4 ?i))))) )) (ite (less!231 (insort!281_arg_0_3 ?i) (head!2072 (insort!281_arg_1_4 ?i))) true (not (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_3 ?z) (insort!281_arg_0_3 ?i)) (= (insort!281_arg_1_4 ?z) (tail!2073 (insort!281_arg_1_4 ?i))))) )))) true))) ))
(assert (forall ((?i I_less!231)) (and (= (less!231 (less!231_arg_0_5 ?i) (less!231_arg_1_6 ?i)) (ite ((_ is zero!2069) (less!231_arg_1_6 ?i)) false (ite (and ((_ is succ!2067) (less!231_arg_1_6 ?i)) ((_ is zero!2069) (less!231_arg_0_5 ?i))) true (ite (and ((_ is succ!2067) (less!231_arg_1_6 ?i)) ((_ is succ!2067) (less!231_arg_0_5 ?i))) (less!231 (pred!2068 (less!231_arg_0_5 ?i)) (pred!2068 (less!231_arg_1_6 ?i))) error_value!2077)))) (ite ((_ is zero!2069) (less!231_arg_1_6 ?i)) true (ite (and ((_ is succ!2067) (less!231_arg_1_6 ?i)) ((_ is zero!2069) (less!231_arg_0_5 ?i))) true (ite (and ((_ is succ!2067) (less!231_arg_1_6 ?i)) ((_ is succ!2067) (less!231_arg_0_5 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_5 ?z) (pred!2068 (less!231_arg_0_5 ?i))) (= (less!231_arg_1_6 ?z) (pred!2068 (less!231_arg_1_6 ?i))))) )) true)))) ))
(assert (exists ((x!390 Nat!2066) (l!391 Lst!2070)) (not (or (mem!270 x!390 (insort!281 x!390 l!391)) (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) x!390) (= (mem!270_arg_1_2 ?z) (insort!281 x!390 l!391)))) ) (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_3 ?z) x!390) (= (insort!281_arg_1_4 ?z) l!391))) ))) ))
(check-sat)
(exit)

