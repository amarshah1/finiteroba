(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2300 0)) (((succ!2301 (pred!2302 Nat!2300)) (zero!2303))
))
(declare-datatypes ((Lst!2304 0)) (((cons!2305 (head!2306 Nat!2300) (tail!2307 Lst!2304)) (nil!2308))
))
(declare-fun error_value!2309 () Nat!2300)
(declare-fun count!263 (Nat!2300 Lst!2304) Nat!2300)
(declare-fun error_value!2310 () Lst!2304)
(declare-fun error_value!2311 () Lst!2304)
(declare-fun error_value!2312 () Bool)
(declare-fun sort!285 (Lst!2304) Lst!2304)
(declare-fun insort!281 (Nat!2300 Lst!2304) Lst!2304)
(declare-fun less!231 (Nat!2300 Nat!2300) Bool)
(declare-sort I_count!263 0)
(declare-fun count!263_arg_0_1 (I_count!263) Nat!2300)
(declare-fun count!263_arg_1_2 (I_count!263) Lst!2304)
(declare-sort I_sort!285 0)
(declare-fun sort!285_arg_0_3 (I_sort!285) Lst!2304)
(declare-sort I_insort!281 0)
(declare-fun insort!281_arg_0_4 (I_insort!281) Nat!2300)
(declare-fun insort!281_arg_1_5 (I_insort!281) Lst!2304)
(declare-sort I_less!231 0)
(declare-fun less!231_arg_0_6 (I_less!231) Nat!2300)
(declare-fun less!231_arg_1_7 (I_less!231) Nat!2300)
(assert (forall ((?i I_count!263)) (and (= (count!263 (count!263_arg_0_1 ?i) (count!263_arg_1_2 ?i)) (ite ((_ is nil!2308) (count!263_arg_1_2 ?i)) zero!2303 (ite ((_ is cons!2305) (count!263_arg_1_2 ?i)) (ite (= (count!263_arg_0_1 ?i) (head!2306 (count!263_arg_1_2 ?i))) (succ!2301 (count!263 (count!263_arg_0_1 ?i) (tail!2307 (count!263_arg_1_2 ?i)))) (count!263 (count!263_arg_0_1 ?i) (tail!2307 (count!263_arg_1_2 ?i)))) error_value!2309))) (ite ((_ is nil!2308) (count!263_arg_1_2 ?i)) true (ite ((_ is cons!2305) (count!263_arg_1_2 ?i)) (ite (= (count!263_arg_0_1 ?i) (head!2306 (count!263_arg_1_2 ?i))) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_1 ?z) (count!263_arg_0_1 ?i)) (= (count!263_arg_1_2 ?z) (tail!2307 (count!263_arg_1_2 ?i))))) )) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_1 ?z) (count!263_arg_0_1 ?i)) (= (count!263_arg_1_2 ?z) (tail!2307 (count!263_arg_1_2 ?i))))) ))) true))) ))
(assert (forall ((?i I_sort!285)) (and (= (sort!285 (sort!285_arg_0_3 ?i)) (ite ((_ is nil!2308) (sort!285_arg_0_3 ?i)) nil!2308 (ite ((_ is cons!2305) (sort!285_arg_0_3 ?i)) (insort!281 (head!2306 (sort!285_arg_0_3 ?i)) (sort!285 (tail!2307 (sort!285_arg_0_3 ?i)))) error_value!2310))) (ite ((_ is nil!2308) (sort!285_arg_0_3 ?i)) true (ite ((_ is cons!2305) (sort!285_arg_0_3 ?i)) (and (not (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_4 ?z) (head!2306 (sort!285_arg_0_3 ?i))) (= (insort!281_arg_1_5 ?z) (sort!285 (tail!2307 (sort!285_arg_0_3 ?i)))))) )) (not (forall ((?z I_sort!285)) (not (= (sort!285_arg_0_3 ?z) (tail!2307 (sort!285_arg_0_3 ?i)))) ))) true))) ))
(assert (forall ((?i I_insort!281)) (and (= (insort!281 (insort!281_arg_0_4 ?i) (insort!281_arg_1_5 ?i)) (ite ((_ is nil!2308) (insort!281_arg_1_5 ?i)) (cons!2305 (insort!281_arg_0_4 ?i) nil!2308) (ite ((_ is cons!2305) (insort!281_arg_1_5 ?i)) (ite (less!231 (insort!281_arg_0_4 ?i) (head!2306 (insort!281_arg_1_5 ?i))) (cons!2305 (insort!281_arg_0_4 ?i) (cons!2305 (head!2306 (insort!281_arg_1_5 ?i)) (tail!2307 (insort!281_arg_1_5 ?i)))) (cons!2305 (head!2306 (insort!281_arg_1_5 ?i)) (insort!281 (insort!281_arg_0_4 ?i) (tail!2307 (insort!281_arg_1_5 ?i))))) error_value!2311))) (ite ((_ is nil!2308) (insort!281_arg_1_5 ?i)) true (ite ((_ is cons!2305) (insort!281_arg_1_5 ?i)) (and (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_6 ?z) (insort!281_arg_0_4 ?i)) (= (less!231_arg_1_7 ?z) (head!2306 (insort!281_arg_1_5 ?i))))) )) (ite (less!231 (insort!281_arg_0_4 ?i) (head!2306 (insort!281_arg_1_5 ?i))) true (not (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_4 ?z) (insort!281_arg_0_4 ?i)) (= (insort!281_arg_1_5 ?z) (tail!2307 (insort!281_arg_1_5 ?i))))) )))) true))) ))
(assert (forall ((?i I_less!231)) (and (= (less!231 (less!231_arg_0_6 ?i) (less!231_arg_1_7 ?i)) (ite ((_ is zero!2303) (less!231_arg_1_7 ?i)) false (ite (and ((_ is succ!2301) (less!231_arg_1_7 ?i)) ((_ is zero!2303) (less!231_arg_0_6 ?i))) true (ite (and ((_ is succ!2301) (less!231_arg_1_7 ?i)) ((_ is succ!2301) (less!231_arg_0_6 ?i))) (less!231 (pred!2302 (less!231_arg_0_6 ?i)) (pred!2302 (less!231_arg_1_7 ?i))) error_value!2312)))) (ite ((_ is zero!2303) (less!231_arg_1_7 ?i)) true (ite (and ((_ is succ!2301) (less!231_arg_1_7 ?i)) ((_ is zero!2303) (less!231_arg_0_6 ?i))) true (ite (and ((_ is succ!2301) (less!231_arg_1_7 ?i)) ((_ is succ!2301) (less!231_arg_0_6 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_6 ?z) (pred!2302 (less!231_arg_0_6 ?i))) (= (less!231_arg_1_7 ?z) (pred!2302 (less!231_arg_1_7 ?i))))) )) true)))) ))
(assert (exists ((x!448 Nat!2300) (l!449 Lst!2304)) (not (or (= (count!263 x!448 l!449) (count!263 x!448 (sort!285 l!449))) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_1 ?z) x!448) (= (count!263_arg_1_2 ?z) l!449))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_1 ?z) x!448) (= (count!263_arg_1_2 ?z) (sort!285 l!449)))) ) (forall ((?z I_sort!285)) (not (= (sort!285_arg_0_3 ?z) l!449)) ))) ))
(check-sat)
(exit)

