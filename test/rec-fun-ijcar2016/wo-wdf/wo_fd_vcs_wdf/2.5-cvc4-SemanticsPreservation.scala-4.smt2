(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!953 0)) (((And!954 (lhs!955 Formula!953) (rhs!956 Formula!953)) (Not!957 (f!958 Formula!953)) (Or!959 (lhs!960 Formula!953) (rhs!961 Formula!953)) (Variable!962 (id!963 (_ BitVec 32))))
))
(declare-fun error_value!964 () Bool)
(declare-fun isNNF!208 (Formula!953) Bool)
(declare-fun error_value!965 () Formula!953)
(declare-fun nnf!206 (Formula!953) Formula!953)
(declare-fun error_value!966 () Formula!953)
(declare-sort I_isNNF!208 0)
(declare-fun isNNF!208_arg_0_1 (I_isNNF!208) Formula!953)
(declare-sort I_nnf!206 0)
(declare-fun nnf!206_arg_0_2 (I_nnf!206) Formula!953)
(assert (forall ((?i I_isNNF!208)) (and (= (isNNF!208 (isNNF!208_arg_0_1 ?i)) (ite ((_ is And!954) (isNNF!208_arg_0_1 ?i)) (and (isNNF!208 (rhs!956 (isNNF!208_arg_0_1 ?i))) (isNNF!208 (lhs!955 (isNNF!208_arg_0_1 ?i)))) (ite ((_ is Or!959) (isNNF!208_arg_0_1 ?i)) (and (isNNF!208 (rhs!961 (isNNF!208_arg_0_1 ?i))) (isNNF!208 (lhs!960 (isNNF!208_arg_0_1 ?i)))) (ite ((_ is Not!957) (isNNF!208_arg_0_1 ?i)) false (ite ((_ is Variable!962) (isNNF!208_arg_0_1 ?i)) true error_value!964))))) (ite ((_ is And!954) (isNNF!208_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!208)) (not (= (isNNF!208_arg_0_1 ?z) (rhs!956 (isNNF!208_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!208)) (not (= (isNNF!208_arg_0_1 ?z) (lhs!955 (isNNF!208_arg_0_1 ?i)))) ))) (ite ((_ is Or!959) (isNNF!208_arg_0_1 ?i)) (and (not (forall ((?z I_isNNF!208)) (not (= (isNNF!208_arg_0_1 ?z) (rhs!961 (isNNF!208_arg_0_1 ?i)))) )) (not (forall ((?z I_isNNF!208)) (not (= (isNNF!208_arg_0_1 ?z) (lhs!960 (isNNF!208_arg_0_1 ?i)))) ))) true))) ))
(assert (forall ((?i I_nnf!206)) (and (= (nnf!206 (nnf!206_arg_0_2 ?i)) (ite ((_ is And!954) (nnf!206_arg_0_2 ?i)) (And!954 (nnf!206 (lhs!955 (nnf!206_arg_0_2 ?i))) (nnf!206 (rhs!956 (nnf!206_arg_0_2 ?i)))) (ite ((_ is Or!959) (nnf!206_arg_0_2 ?i)) (Or!959 (nnf!206 (lhs!960 (nnf!206_arg_0_2 ?i))) (nnf!206 (rhs!961 (nnf!206_arg_0_2 ?i)))) (ite (and ((_ is And!954) (f!958 (nnf!206_arg_0_2 ?i))) ((_ is Not!957) (nnf!206_arg_0_2 ?i))) (Or!959 (nnf!206 (Not!957 (lhs!955 (f!958 (nnf!206_arg_0_2 ?i))))) (nnf!206 (Not!957 (rhs!956 (f!958 (nnf!206_arg_0_2 ?i)))))) (ite (and ((_ is Or!959) (f!958 (nnf!206_arg_0_2 ?i))) ((_ is Not!957) (nnf!206_arg_0_2 ?i))) (And!954 (nnf!206 (Not!957 (lhs!960 (f!958 (nnf!206_arg_0_2 ?i))))) (nnf!206 (Not!957 (rhs!961 (f!958 (nnf!206_arg_0_2 ?i)))))) (ite (and ((_ is Not!957) (f!958 (nnf!206_arg_0_2 ?i))) ((_ is Not!957) (nnf!206_arg_0_2 ?i))) (nnf!206 (f!958 (f!958 (nnf!206_arg_0_2 ?i)))) (ite ((_ is Not!957) (nnf!206_arg_0_2 ?i)) (nnf!206_arg_0_2 ?i) (ite ((_ is Variable!962) (nnf!206_arg_0_2 ?i)) (nnf!206_arg_0_2 ?i) error_value!965)))))))) (ite ((_ is And!954) (nnf!206_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (lhs!955 (nnf!206_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (rhs!956 (nnf!206_arg_0_2 ?i)))) ))) (ite ((_ is Or!959) (nnf!206_arg_0_2 ?i)) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (lhs!960 (nnf!206_arg_0_2 ?i)))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (rhs!961 (nnf!206_arg_0_2 ?i)))) ))) (ite (and ((_ is And!954) (f!958 (nnf!206_arg_0_2 ?i))) ((_ is Not!957) (nnf!206_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (lhs!955 (f!958 (nnf!206_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (rhs!956 (f!958 (nnf!206_arg_0_2 ?i)))))) ))) (ite (and ((_ is Or!959) (f!958 (nnf!206_arg_0_2 ?i))) ((_ is Not!957) (nnf!206_arg_0_2 ?i))) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (lhs!960 (f!958 (nnf!206_arg_0_2 ?i)))))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (rhs!961 (f!958 (nnf!206_arg_0_2 ?i)))))) ))) (ite (and ((_ is Not!957) (f!958 (nnf!206_arg_0_2 ?i))) ((_ is Not!957) (nnf!206_arg_0_2 ?i))) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (f!958 (f!958 (nnf!206_arg_0_2 ?i))))) )) true)))))) ))
(assert (exists ((formula!205 Formula!953)) (not (=> ((_ is Variable!962) formula!205) (or (isNNF!208 (ite ((_ is And!954) formula!205) (And!954 (nnf!206 (lhs!955 formula!205)) (nnf!206 (rhs!956 formula!205))) (ite ((_ is Or!959) formula!205) (Or!959 (nnf!206 (lhs!960 formula!205)) (nnf!206 (rhs!961 formula!205))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is And!954) (f!958 formula!205))) (Or!959 (nnf!206 (Not!957 (lhs!955 (f!958 formula!205)))) (nnf!206 (Not!957 (rhs!956 (f!958 formula!205))))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is Or!959) (f!958 formula!205))) (And!954 (nnf!206 (Not!957 (lhs!960 (f!958 formula!205)))) (nnf!206 (Not!957 (rhs!961 (f!958 formula!205))))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is Not!957) (f!958 formula!205))) (nnf!206 (f!958 (f!958 formula!205))) (ite ((_ is Not!957) formula!205) formula!205 (ite ((_ is Variable!962) formula!205) formula!205 error_value!966)))))))) (forall ((?z I_isNNF!208)) (not (= (isNNF!208_arg_0_1 ?z) (ite ((_ is And!954) formula!205) (And!954 (nnf!206 (lhs!955 formula!205)) (nnf!206 (rhs!956 formula!205))) (ite ((_ is Or!959) formula!205) (Or!959 (nnf!206 (lhs!960 formula!205)) (nnf!206 (rhs!961 formula!205))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is And!954) (f!958 formula!205))) (Or!959 (nnf!206 (Not!957 (lhs!955 (f!958 formula!205)))) (nnf!206 (Not!957 (rhs!956 (f!958 formula!205))))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is Or!959) (f!958 formula!205))) (And!954 (nnf!206 (Not!957 (lhs!960 (f!958 formula!205)))) (nnf!206 (Not!957 (rhs!961 (f!958 formula!205))))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is Not!957) (f!958 formula!205))) (nnf!206 (f!958 (f!958 formula!205))) (ite ((_ is Not!957) formula!205) formula!205 (ite ((_ is Variable!962) formula!205) formula!205 error_value!966))))))))) ) (not (ite ((_ is And!954) formula!205) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (lhs!955 formula!205))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (rhs!956 formula!205))) ))) (ite ((_ is Or!959) formula!205) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (lhs!960 formula!205))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (rhs!961 formula!205))) ))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is And!954) (f!958 formula!205))) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (lhs!955 (f!958 formula!205))))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (rhs!956 (f!958 formula!205))))) ))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is Or!959) (f!958 formula!205))) (and (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (lhs!960 (f!958 formula!205))))) )) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (Not!957 (rhs!961 (f!958 formula!205))))) ))) (ite (and (and ((_ is Not!957) formula!205) ((_ is Not!957) formula!205)) ((_ is Not!957) (f!958 formula!205))) (not (forall ((?z I_nnf!206)) (not (= (nnf!206_arg_0_2 ?z) (f!958 (f!958 formula!205)))) )) true))))))))) ))
(check-sat)
(exit)

