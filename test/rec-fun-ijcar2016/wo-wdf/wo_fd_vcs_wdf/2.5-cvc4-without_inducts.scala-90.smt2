(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2360 0)) (((succ!2361 (pred!2362 Nat!2360)) (zero!2363))
))
(declare-datatypes ((Lst!2364 0)) (((cons!2365 (head!2366 Nat!2360) (tail!2367 Lst!2364)) (nil!2368))
))
(declare-datatypes ((ZLst!2369 0)(Pair!2374 0)) (((zcons!2370 (zhead!2371 Pair!2374) (ztail!2372 ZLst!2369)) (znil!2373))
((mkpair!2375 (first!2376 Nat!2360) (second!2377 Nat!2360)))
))
(declare-fun error_value!2378 () ZLst!2369)
(declare-fun zdrop!294 (Nat!2360 ZLst!2369) ZLst!2369)
(declare-fun error_value!2379 () ZLst!2369)
(declare-fun zip!288 (Lst!2364 Lst!2364) ZLst!2369)
(declare-fun error_value!2380 () Lst!2364)
(declare-fun drop!257 (Nat!2360 Lst!2364) Lst!2364)
(declare-sort I_zdrop!294 0)
(declare-fun zdrop!294_arg_0_1 (I_zdrop!294) Nat!2360)
(declare-fun zdrop!294_arg_1_2 (I_zdrop!294) ZLst!2369)
(declare-sort I_zip!288 0)
(declare-fun zip!288_arg_0_3 (I_zip!288) Lst!2364)
(declare-fun zip!288_arg_1_4 (I_zip!288) Lst!2364)
(declare-sort I_drop!257 0)
(declare-fun drop!257_arg_0_5 (I_drop!257) Nat!2360)
(declare-fun drop!257_arg_1_6 (I_drop!257) Lst!2364)
(assert (forall ((?i I_zdrop!294)) (and (= (zdrop!294 (zdrop!294_arg_0_1 ?i) (zdrop!294_arg_1_2 ?i)) (ite ((_ is znil!2373) (zdrop!294_arg_1_2 ?i)) znil!2373 (ite ((_ is zero!2363) (zdrop!294_arg_0_1 ?i)) (zdrop!294_arg_1_2 ?i) (ite (and ((_ is zcons!2370) (zdrop!294_arg_1_2 ?i)) ((_ is succ!2361) (zdrop!294_arg_0_1 ?i))) (zdrop!294 (pred!2362 (zdrop!294_arg_0_1 ?i)) (ztail!2372 (zdrop!294_arg_1_2 ?i))) error_value!2378)))) (ite ((_ is znil!2373) (zdrop!294_arg_1_2 ?i)) true (ite ((_ is zero!2363) (zdrop!294_arg_0_1 ?i)) true (ite (and ((_ is zcons!2370) (zdrop!294_arg_1_2 ?i)) ((_ is succ!2361) (zdrop!294_arg_0_1 ?i))) (not (forall ((?z I_zdrop!294)) (not (and (= (zdrop!294_arg_0_1 ?z) (pred!2362 (zdrop!294_arg_0_1 ?i))) (= (zdrop!294_arg_1_2 ?z) (ztail!2372 (zdrop!294_arg_1_2 ?i))))) )) true)))) ))
(assert (forall ((?i I_zip!288)) (and (= (zip!288 (zip!288_arg_0_3 ?i) (zip!288_arg_1_4 ?i)) (ite ((_ is nil!2368) (zip!288_arg_0_3 ?i)) znil!2373 (ite ((_ is nil!2368) (zip!288_arg_1_4 ?i)) znil!2373 (ite (and ((_ is cons!2365) (zip!288_arg_1_4 ?i)) ((_ is cons!2365) (zip!288_arg_0_3 ?i))) (zcons!2370 (mkpair!2375 (head!2366 (zip!288_arg_0_3 ?i)) (head!2366 (zip!288_arg_1_4 ?i))) (zip!288 (tail!2367 (zip!288_arg_0_3 ?i)) (tail!2367 (zip!288_arg_1_4 ?i)))) error_value!2379)))) (ite ((_ is nil!2368) (zip!288_arg_0_3 ?i)) true (ite ((_ is nil!2368) (zip!288_arg_1_4 ?i)) true (ite (and ((_ is cons!2365) (zip!288_arg_1_4 ?i)) ((_ is cons!2365) (zip!288_arg_0_3 ?i))) (not (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_3 ?z) (tail!2367 (zip!288_arg_0_3 ?i))) (= (zip!288_arg_1_4 ?z) (tail!2367 (zip!288_arg_1_4 ?i))))) )) true)))) ))
(assert (forall ((?i I_drop!257)) (and (= (drop!257 (drop!257_arg_0_5 ?i) (drop!257_arg_1_6 ?i)) (ite ((_ is nil!2368) (drop!257_arg_1_6 ?i)) nil!2368 (ite ((_ is zero!2363) (drop!257_arg_0_5 ?i)) (drop!257_arg_1_6 ?i) (ite (and ((_ is cons!2365) (drop!257_arg_1_6 ?i)) ((_ is succ!2361) (drop!257_arg_0_5 ?i))) (drop!257 (pred!2362 (drop!257_arg_0_5 ?i)) (tail!2367 (drop!257_arg_1_6 ?i))) error_value!2380)))) (ite ((_ is nil!2368) (drop!257_arg_1_6 ?i)) true (ite ((_ is zero!2363) (drop!257_arg_0_5 ?i)) true (ite (and ((_ is cons!2365) (drop!257_arg_1_6 ?i)) ((_ is succ!2361) (drop!257_arg_0_5 ?i))) (not (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_5 ?z) (pred!2362 (drop!257_arg_0_5 ?i))) (= (drop!257_arg_1_6 ?z) (tail!2367 (drop!257_arg_1_6 ?i))))) )) true)))) ))
(assert (exists ((n!470 Nat!2360) (xs!471 Lst!2364) (ys!472 Lst!2364)) (not (or (= (zdrop!294 n!470 (zip!288 xs!471 ys!472)) (zip!288 (drop!257 n!470 xs!471) (drop!257 n!470 ys!472))) (forall ((?z I_zdrop!294)) (not (and (= (zdrop!294_arg_0_1 ?z) n!470) (= (zdrop!294_arg_1_2 ?z) (zip!288 xs!471 ys!472)))) ) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_3 ?z) xs!471) (= (zip!288_arg_1_4 ?z) ys!472))) ) (forall ((?z I_zip!288)) (not (and (= (zip!288_arg_0_3 ?z) (drop!257 n!470 xs!471)) (= (zip!288_arg_1_4 ?z) (drop!257 n!470 ys!472)))) ) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_5 ?z) n!470) (= (drop!257_arg_1_6 ?z) xs!471))) ) (forall ((?z I_drop!257)) (not (and (= (drop!257_arg_0_5 ?z) n!470) (= (drop!257_arg_1_6 ?z) ys!472))) ))) ))
(check-sat)
(exit)

