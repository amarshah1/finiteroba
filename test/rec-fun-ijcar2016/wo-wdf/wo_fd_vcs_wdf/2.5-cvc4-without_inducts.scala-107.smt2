(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2554 0)) (((succ!2555 (pred!2556 Nat!2554)) (zero!2557))
))
(declare-datatypes ((Lst!2558 0)) (((cons!2559 (head!2560 Nat!2554) (tail!2561 Lst!2558)) (nil!2562))
))
(declare-fun error_value!2563 () Nat!2554)
(declare-fun plus!237 (Nat!2554 Nat!2554) Nat!2554)
(declare-fun error_value!2564 () Nat!2554)
(declare-fun count!263 (Nat!2554 Lst!2558) Nat!2554)
(declare-sort I_plus!237 0)
(declare-fun plus!237_arg_0_1 (I_plus!237) Nat!2554)
(declare-fun plus!237_arg_1_2 (I_plus!237) Nat!2554)
(declare-sort I_count!263 0)
(declare-fun count!263_arg_0_3 (I_count!263) Nat!2554)
(declare-fun count!263_arg_1_4 (I_count!263) Lst!2558)
(assert (forall ((?i I_plus!237)) (and (= (plus!237 (plus!237_arg_0_1 ?i) (plus!237_arg_1_2 ?i)) (ite ((_ is zero!2557) (plus!237_arg_0_1 ?i)) (plus!237_arg_1_2 ?i) (ite ((_ is succ!2555) (plus!237_arg_0_1 ?i)) (succ!2555 (plus!237 (pred!2556 (plus!237_arg_0_1 ?i)) (plus!237_arg_1_2 ?i))) error_value!2563))) (ite ((_ is zero!2557) (plus!237_arg_0_1 ?i)) true (ite ((_ is succ!2555) (plus!237_arg_0_1 ?i)) (not (forall ((?z I_plus!237)) (not (and (= (plus!237_arg_0_1 ?z) (pred!2556 (plus!237_arg_0_1 ?i))) (= (plus!237_arg_1_2 ?z) (plus!237_arg_1_2 ?i)))) )) true))) ))
(assert (forall ((?i I_count!263)) (and (= (count!263 (count!263_arg_0_3 ?i) (count!263_arg_1_4 ?i)) (ite ((_ is nil!2562) (count!263_arg_1_4 ?i)) zero!2557 (ite ((_ is cons!2559) (count!263_arg_1_4 ?i)) (ite (= (count!263_arg_0_3 ?i) (head!2560 (count!263_arg_1_4 ?i))) (succ!2555 (count!263 (count!263_arg_0_3 ?i) (tail!2561 (count!263_arg_1_4 ?i)))) (count!263 (count!263_arg_0_3 ?i) (tail!2561 (count!263_arg_1_4 ?i)))) error_value!2564))) (ite ((_ is nil!2562) (count!263_arg_1_4 ?i)) true (ite ((_ is cons!2559) (count!263_arg_1_4 ?i)) (ite (= (count!263_arg_0_3 ?i) (head!2560 (count!263_arg_1_4 ?i))) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) (count!263_arg_0_3 ?i)) (= (count!263_arg_1_4 ?z) (tail!2561 (count!263_arg_1_4 ?i))))) )) (not (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) (count!263_arg_0_3 ?i)) (= (count!263_arg_1_4 ?z) (tail!2561 (count!263_arg_1_4 ?i))))) ))) true))) ))
(assert (exists ((n!524 Nat!2554) (t!526 Lst!2558) (h!525 Nat!2554)) (not (or (= (plus!237 (count!263 n!524 t!526) (count!263 n!524 (cons!2559 h!525 nil!2562))) (count!263 n!524 (cons!2559 h!525 t!526))) (forall ((?z I_plus!237)) (not (and (= (plus!237_arg_0_1 ?z) (count!263 n!524 t!526)) (= (plus!237_arg_1_2 ?z) (count!263 n!524 (cons!2559 h!525 nil!2562))))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) n!524) (= (count!263_arg_1_4 ?z) t!526))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) n!524) (= (count!263_arg_1_4 ?z) (cons!2559 h!525 nil!2562)))) ) (forall ((?z I_count!263)) (not (and (= (count!263_arg_0_3 ?z) n!524) (= (count!263_arg_1_4 ?z) (cons!2559 h!525 t!526)))) ))) ))
(check-sat)
(exit)

