(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2501 0)) (((succ!2502 (pred!2503 Nat!2501)) (zero!2504))
))
(declare-datatypes ((Lst!2505 0)) (((cons!2506 (head!2507 Nat!2501) (tail!2508 Lst!2505)) (nil!2509))
))
(declare-fun error_value!2510 () Bool)
(declare-fun mem!270 (Nat!2501 Lst!2505) Bool)
(declare-fun error_value!2511 () Lst!2505)
(declare-fun error_value!2512 () Bool)
(declare-fun insort!281 (Nat!2501 Lst!2505) Lst!2505)
(declare-fun less!231 (Nat!2501 Nat!2501) Bool)
(declare-sort I_mem!270 0)
(declare-fun mem!270_arg_0_1 (I_mem!270) Nat!2501)
(declare-fun mem!270_arg_1_2 (I_mem!270) Lst!2505)
(declare-sort I_insort!281 0)
(declare-fun insort!281_arg_0_3 (I_insort!281) Nat!2501)
(declare-fun insort!281_arg_1_4 (I_insort!281) Lst!2505)
(declare-sort I_less!231 0)
(declare-fun less!231_arg_0_5 (I_less!231) Nat!2501)
(declare-fun less!231_arg_1_6 (I_less!231) Nat!2501)
(assert (forall ((?i I_mem!270)) (and (= (mem!270 (mem!270_arg_0_1 ?i) (mem!270_arg_1_2 ?i)) (ite ((_ is nil!2509) (mem!270_arg_1_2 ?i)) false (ite ((_ is cons!2506) (mem!270_arg_1_2 ?i)) (or (mem!270 (mem!270_arg_0_1 ?i) (tail!2508 (mem!270_arg_1_2 ?i))) (= (mem!270_arg_0_1 ?i) (head!2507 (mem!270_arg_1_2 ?i)))) error_value!2510))) (ite ((_ is nil!2509) (mem!270_arg_1_2 ?i)) true (ite ((_ is cons!2506) (mem!270_arg_1_2 ?i)) (not (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) (mem!270_arg_0_1 ?i)) (= (mem!270_arg_1_2 ?z) (tail!2508 (mem!270_arg_1_2 ?i))))) )) true))) ))
(assert (forall ((?i I_insort!281)) (and (= (insort!281 (insort!281_arg_0_3 ?i) (insort!281_arg_1_4 ?i)) (ite ((_ is nil!2509) (insort!281_arg_1_4 ?i)) (cons!2506 (insort!281_arg_0_3 ?i) nil!2509) (ite ((_ is cons!2506) (insort!281_arg_1_4 ?i)) (ite (less!231 (insort!281_arg_0_3 ?i) (head!2507 (insort!281_arg_1_4 ?i))) (cons!2506 (insort!281_arg_0_3 ?i) (cons!2506 (head!2507 (insort!281_arg_1_4 ?i)) (tail!2508 (insort!281_arg_1_4 ?i)))) (cons!2506 (head!2507 (insort!281_arg_1_4 ?i)) (insort!281 (insort!281_arg_0_3 ?i) (tail!2508 (insort!281_arg_1_4 ?i))))) error_value!2511))) (ite ((_ is nil!2509) (insort!281_arg_1_4 ?i)) true (ite ((_ is cons!2506) (insort!281_arg_1_4 ?i)) (and (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_5 ?z) (insort!281_arg_0_3 ?i)) (= (less!231_arg_1_6 ?z) (head!2507 (insort!281_arg_1_4 ?i))))) )) (ite (less!231 (insort!281_arg_0_3 ?i) (head!2507 (insort!281_arg_1_4 ?i))) true (not (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_3 ?z) (insort!281_arg_0_3 ?i)) (= (insort!281_arg_1_4 ?z) (tail!2508 (insort!281_arg_1_4 ?i))))) )))) true))) ))
(assert (forall ((?i I_less!231)) (and (= (less!231 (less!231_arg_0_5 ?i) (less!231_arg_1_6 ?i)) (ite ((_ is zero!2504) (less!231_arg_1_6 ?i)) false (ite (and ((_ is succ!2502) (less!231_arg_1_6 ?i)) ((_ is zero!2504) (less!231_arg_0_5 ?i))) true (ite (and ((_ is succ!2502) (less!231_arg_1_6 ?i)) ((_ is succ!2502) (less!231_arg_0_5 ?i))) (less!231 (pred!2503 (less!231_arg_0_5 ?i)) (pred!2503 (less!231_arg_1_6 ?i))) error_value!2512)))) (ite ((_ is zero!2504) (less!231_arg_1_6 ?i)) true (ite (and ((_ is succ!2502) (less!231_arg_1_6 ?i)) ((_ is zero!2504) (less!231_arg_0_5 ?i))) true (ite (and ((_ is succ!2502) (less!231_arg_1_6 ?i)) ((_ is succ!2502) (less!231_arg_0_5 ?i))) (not (forall ((?z I_less!231)) (not (and (= (less!231_arg_0_5 ?z) (pred!2503 (less!231_arg_0_5 ?i))) (= (less!231_arg_1_6 ?z) (pred!2503 (less!231_arg_1_6 ?i))))) )) true)))) ))
(assert (exists ((x!510 Nat!2501) (y!511 Nat!2501) (l!512 Lst!2505)) (not (or (or (= x!510 y!511) (= x!510 y!511)) (or (= (mem!270 x!510 (insort!281 y!511 l!512)) (mem!270 x!510 l!512)) (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) x!510) (= (mem!270_arg_1_2 ?z) (insort!281 y!511 l!512)))) ) (forall ((?z I_insort!281)) (not (and (= (insort!281_arg_0_3 ?z) y!511) (= (insort!281_arg_1_4 ?z) l!512))) ) (forall ((?z I_mem!270)) (not (and (= (mem!270_arg_0_1 ?z) x!510) (= (mem!270_arg_1_2 ?z) l!512))) )))) ))
(check-sat)
(exit)

