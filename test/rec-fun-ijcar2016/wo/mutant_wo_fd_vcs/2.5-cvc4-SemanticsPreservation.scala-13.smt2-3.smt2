(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!1079 0)) (((And!1080 (lhs!1081 Formula!1079) (rhs!1082 Formula!1079)) (Not!1083 (f!1084 Formula!1079)) (Or!1085 (lhs!1086 Formula!1079) (rhs!1087 Formula!1079)) (Variable!1088 (id!1089 (_ BitVec 32))))
))
(declare-fun error_value!1090 () Bool)
(declare-fun error_value!1091 () Formula!1079)
(declare-fun error_value!1092 () Bool)
(declare-fun eval!210 (Formula!1079) Bool)
(declare-fun nnf!206 (Formula!1079) Formula!1079)
(declare-fun isNNF!208 (Formula!1079) Bool)
(assert (forall ((formula!209 Formula!1079)) (= (eval!210 formula!209) (ite ((_ is And!1080) formula!209) (and (and (eval!210 (lhs!1081 formula!209)) (eval!210 (lhs!1081 formula!209))) (eval!210 (rhs!1082 formula!209))) (ite ((_ is Or!1085) formula!209) (or (or (eval!210 (lhs!1086 formula!209)) (eval!210 (lhs!1086 formula!209))) (eval!210 (rhs!1087 formula!209))) (ite ((_ is Not!1083) formula!209) (not (eval!210 (f!1084 formula!209))) (ite ((_ is Variable!1088) formula!209) (bvsgt (id!1089 formula!209) (_ bv42 32)) error_value!1090))))) ))
(assert (forall ((formula!205 Formula!1079)) (= (nnf!206 formula!205) (ite ((_ is And!1080) formula!205) (And!1080 (nnf!206 (lhs!1081 formula!205)) (nnf!206 (rhs!1082 formula!205))) (ite ((_ is Or!1085) formula!205) (Or!1085 (nnf!206 (lhs!1086 formula!205)) (nnf!206 (rhs!1087 formula!205))) (ite (and (and ((_ is Not!1083) formula!205) ((_ is Not!1083) formula!205)) ((_ is And!1080) (f!1084 formula!205))) (Or!1085 (nnf!206 (Not!1083 (lhs!1081 (f!1084 formula!205)))) (nnf!206 (Not!1083 (rhs!1082 (f!1084 formula!205))))) (ite (and (and ((_ is Not!1083) formula!205) ((_ is Not!1083) formula!205)) ((_ is Or!1085) (f!1084 formula!205))) (And!1080 (nnf!206 (Not!1083 (lhs!1086 (f!1084 formula!205)))) (nnf!206 (Not!1083 (rhs!1087 (f!1084 formula!205))))) (ite (and (and ((_ is Not!1083) formula!205) ((_ is Not!1083) formula!205)) ((_ is Not!1083) (f!1084 formula!205))) (nnf!206 (f!1084 (f!1084 formula!205))) (ite ((_ is Not!1083) formula!205) formula!205 (ite ((_ is Variable!1088) formula!205) formula!205 error_value!1091)))))))) ))
(assert (forall ((f!207 Formula!1079)) (= (isNNF!208 f!207) (ite ((_ is And!1080) f!207) (and (and (isNNF!208 (lhs!1081 f!207)) (isNNF!208 (lhs!1081 f!207))) (isNNF!208 (rhs!1082 f!207))) (ite ((_ is Or!1085) f!207) (and (and (isNNF!208 (lhs!1086 f!207)) (isNNF!208 (lhs!1086 f!207))) (isNNF!208 (rhs!1087 f!207))) (ite ((_ is Not!1083) f!207) false (ite ((_ is Variable!1088) f!207) true error_value!1092))))) ))
(assert (not (forall ((BOUND_VARIABLE_490 Formula!1079)) (or (= (eval!210 BOUND_VARIABLE_490) (not (eval!210 (nnf!206 (nnf!206 (Not!1083 BOUND_VARIABLE_490)))))) (= (eval!210 (Not!1083 BOUND_VARIABLE_490)) (eval!210 BOUND_VARIABLE_490))) )))
(check-sat)
(exit)

