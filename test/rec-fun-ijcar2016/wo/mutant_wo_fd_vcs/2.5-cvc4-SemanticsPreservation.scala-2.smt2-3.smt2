(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!922 0)) (((And!923 (lhs!924 Formula!922) (rhs!925 Formula!922)) (Not!926 (f!927 Formula!922)) (Or!928 (lhs!929 Formula!922) (rhs!930 Formula!922)) (Variable!931 (id!932 (_ BitVec 32))))
))
(declare-fun error_value!933 () Bool)
(declare-fun isNNF!208 (Formula!922) Bool)
(declare-fun error_value!934 () Formula!922)
(declare-fun nnf!206 (Formula!922) Formula!922)
(declare-fun error_value!935 () Formula!922)
(declare-fun error_value!936 () Formula!922)
(assert (forall ((f!207 Formula!922)) (= (isNNF!208 f!207) (ite ((_ is And!923) f!207) (and (and (isNNF!208 (lhs!924 f!207)) (isNNF!208 (lhs!924 f!207))) (isNNF!208 (rhs!925 f!207))) (ite ((_ is Or!928) f!207) (and (and (isNNF!208 (lhs!929 f!207)) (isNNF!208 (lhs!929 f!207))) (isNNF!208 (rhs!930 f!207))) (ite ((_ is Not!926) f!207) false (ite ((_ is Variable!931) f!207) true error_value!933))))) ))
(assert (forall ((formula!205 Formula!922)) (= (nnf!206 formula!205) (ite ((_ is And!923) formula!205) (And!923 (nnf!206 (lhs!924 formula!205)) (nnf!206 (rhs!925 formula!205))) (ite ((_ is Or!928) formula!205) (Or!928 (nnf!206 (lhs!929 formula!205)) (nnf!206 (rhs!930 formula!205))) (ite (and (and ((_ is Not!926) formula!205) ((_ is Not!926) formula!205)) ((_ is And!923) (f!927 formula!205))) (Or!928 (nnf!206 (Not!926 (lhs!924 (f!927 formula!205)))) (nnf!206 (Not!926 (rhs!925 (f!927 formula!205))))) (ite (and (and ((_ is Not!926) formula!205) ((_ is Not!926) formula!205)) ((_ is Or!928) (f!927 formula!205))) (And!923 (nnf!206 (Not!926 (lhs!929 (f!927 formula!205)))) (nnf!206 (Not!926 (rhs!930 (f!927 formula!205))))) (ite (and (and ((_ is Not!926) formula!205) ((_ is Not!926) formula!205)) ((_ is Not!926) (f!927 formula!205))) (nnf!206 (f!927 (f!927 formula!205))) (ite ((_ is Not!926) formula!205) formula!205 (ite ((_ is Variable!931) formula!205) formula!205 error_value!934)))))))) ))
(assert (not (forall ((BOUND_VARIABLE_606 Formula!922)) (or (not (isNNF!208 (ite ((_ is And!923) BOUND_VARIABLE_606) (And!923 (nnf!206 (lhs!924 BOUND_VARIABLE_606)) (nnf!206 (rhs!925 BOUND_VARIABLE_606))) (ite ((_ is Or!928) BOUND_VARIABLE_606) (Or!928 (nnf!206 (lhs!929 BOUND_VARIABLE_606)) (nnf!206 (rhs!930 BOUND_VARIABLE_606))) (ite (and ((_ is And!923) (f!927 BOUND_VARIABLE_606)) ((_ is Not!926) BOUND_VARIABLE_606)) (Or!928 (nnf!206 (Not!926 (lhs!924 (f!927 BOUND_VARIABLE_606)))) (nnf!206 (Not!926 (rhs!925 (f!927 BOUND_VARIABLE_606))))) (ite (and ((_ is Or!928) (f!927 BOUND_VARIABLE_606)) ((_ is Not!926) BOUND_VARIABLE_606)) (And!923 (nnf!206 (Not!926 (lhs!929 (f!927 BOUND_VARIABLE_606)))) (nnf!206 (Not!926 (rhs!930 (f!927 BOUND_VARIABLE_606))))) (ite (and ((_ is Not!926) (f!927 BOUND_VARIABLE_606)) ((_ is Not!926) BOUND_VARIABLE_606)) (nnf!206 (f!927 (f!927 BOUND_VARIABLE_606))) (ite ((_ is Not!926) BOUND_VARIABLE_606) BOUND_VARIABLE_606 (ite ((_ is Variable!931) BOUND_VARIABLE_606) BOUND_VARIABLE_606 error_value!935))))))))) (isNNF!208 (ite ((_ is And!923) BOUND_VARIABLE_606) (Or!928 (nnf!206 (Not!926 (lhs!924 BOUND_VARIABLE_606))) (nnf!206 (Not!926 (Not!926 (lhs!929 BOUND_VARIABLE_606))))) (ite ((_ is Or!928) BOUND_VARIABLE_606) (And!923 (nnf!206 (rhs!925 BOUND_VARIABLE_606)) (nnf!206 (Not!926 (rhs!930 BOUND_VARIABLE_606)))) (ite ((_ is Not!926) BOUND_VARIABLE_606) (nnf!206 (f!927 BOUND_VARIABLE_606)) (Not!926 BOUND_VARIABLE_606)))))) )))
(check-sat)
(exit)

