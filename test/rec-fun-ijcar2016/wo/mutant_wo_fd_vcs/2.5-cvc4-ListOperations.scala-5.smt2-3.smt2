(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!1006 0)) (((Cons!1007 (head!1008 (_ BitVec 32)) (tail!1009 List!1006)) (Nil!1010))
))
(declare-fun error_value!1011 () Int)
(declare-fun size!206 (List!1006) Int)
(declare-datatypes ((IntPairList!1012 0)(IntPair!1017 0)) (((IPCons!1013 (head!1014 IntPair!1017) (tail!1015 IntPairList!1012)) (IPNil!1016))
((IP!1018 (fst!1019 (_ BitVec 32)) (snd!1020 (_ BitVec 32))))
))
(declare-fun error_value!1021 () Int)
(declare-fun iplSize!209 (IntPairList!1012) Int)
(declare-fun error_value!1022 () IntPairList!1012)
(declare-fun error_value!1023 () IntPairList!1012)
(declare-fun zip!212 (List!1006 List!1006) IntPairList!1012)
(declare-fun error_value!1024 () IntPairList!1012)
(declare-fun error_value!1025 () IntPairList!1012)
(assert (forall ((l!205 List!1006)) (= (size!206 l!205) (ite ((_ is Nil!1010) l!205) (- 0) (ite ((_ is Cons!1007) l!205) (+ 1 (size!206 (tail!1009 l!205))) error_value!1011))) ))
(assert (forall ((l!208 IntPairList!1012)) (= (iplSize!209 l!208) (ite ((_ is IPNil!1016) l!208) (- 0) (ite ((_ is IPCons!1013) l!208) (+ 1 (iplSize!209 (tail!1015 l!208))) error_value!1021))) ))
(assert (forall ((l1!210 List!1006) (l2!211 List!1006)) (= (zip!212 l1!210 l2!211) (ite ((_ is Nil!1010) l1!210) IPNil!1016 (ite ((_ is Cons!1007) l1!210) (ite ((_ is Cons!1007) l2!211) (IPCons!1013 (IP!1018 (head!1008 l1!210) (head!1008 l2!211)) (zip!212 (tail!1009 l1!210) (tail!1009 l2!211))) error_value!1022) error_value!1023))) ))
(assert (not (forall ((l1!210 List!1006) (l2!211 List!1006)) (or (not (= (size!206 l1!210) (size!206 l2!211))) (= (size!206 l1!210) (iplSize!209 (IPCons!1013 (IP!1018 (head!1008 l1!210) (head!1008 l2!211)) (zip!212 (tail!1009 l1!210) (tail!1009 l2!211)))))) )))
(check-sat)
(exit)

