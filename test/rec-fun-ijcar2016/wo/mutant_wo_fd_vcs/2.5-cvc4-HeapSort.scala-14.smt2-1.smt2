(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Heap!1069 0)) (((Leaf!1070) (Node!1071 (rk!1072 (_ BitVec 32)) (value!1073 (_ BitVec 32)) (left!1074 Heap!1069) (right!1075 Heap!1069)))
))
(declare-fun error_value!1076 () Bool)
(declare-fun error_value!1077 () (_ BitVec 32))
(declare-fun error_value!1078 () (_ BitVec 32))
(declare-fun hasLeftistProperty!210 (Heap!1069) Bool)
(declare-fun rightHeight!206 (Heap!1069) (_ BitVec 32))
(declare-fun rank!208 (Heap!1069) (_ BitVec 32))
(declare-fun error_value!1079 () (_ BitVec 32))
(declare-fun heapSize!212 (Heap!1069) (_ BitVec 32))
(declare-fun error_value!1080 () Heap!1069)
(declare-fun error_value!1081 () Heap!1069)
(declare-fun makeT!219 ((_ BitVec 32) Heap!1069 Heap!1069) Heap!1069)
(declare-fun merge!215 (Heap!1069 Heap!1069) Heap!1069)
(assert (forall ((h!209 Heap!1069)) (= (hasLeftistProperty!210 h!209) (ite ((_ is Leaf!1070) h!209) true (ite ((_ is Node!1071) h!209) (and (and (and (and (hasLeftistProperty!210 (left!1074 h!209)) (hasLeftistProperty!210 (left!1074 h!209))) (hasLeftistProperty!210 (right!1075 h!209))) (bvsge (rightHeight!206 (left!1074 h!209)) (rightHeight!206 (right!1075 h!209)))) (= (rank!208 h!209) (rightHeight!206 h!209))) error_value!1076))) ))
(assert (forall ((h!205 Heap!1069)) (= (rightHeight!206 h!205) (ite ((_ is Leaf!1070) h!205) (_ bv0 32) (ite ((_ is Node!1071) h!205) (bvadd (rightHeight!206 (right!1075 h!205)) (_ bv1 32)) error_value!1077))) ))
(assert (forall ((h!207 Heap!1069)) (= (rank!208 h!207) (ite ((_ is Leaf!1070) h!207) (_ bv0 32) (ite ((_ is Node!1071) h!207) (rk!1072 h!207) error_value!1078))) ))
(assert (forall ((t!211 Heap!1069)) (= (heapSize!212 t!211) (ite ((_ is Leaf!1070) t!211) (_ bv0 32) (ite ((_ is Node!1071) t!211) (bvadd (bvadd (heapSize!212 (left!1074 t!211)) (_ bv1 32)) (heapSize!212 (right!1075 t!211))) error_value!1079))) ))
(assert (forall ((value!216 (_ BitVec 32)) (left!217 Heap!1069) (right!218 Heap!1069)) (= (makeT!219 value!216 left!217 right!218) (ite (bvsge (rank!208 left!217) (rank!208 right!218)) (Node!1071 (bvadd (rank!208 right!218) (_ bv1 32)) value!216 left!217 right!218) (Node!1071 (bvadd (rank!208 left!217) (_ bv1 32)) value!216 right!218 left!217))) ))
(assert (forall ((h1!213 Heap!1069) (h2!214 Heap!1069)) (= (merge!215 h1!213 h2!214) (ite ((_ is Leaf!1070) h1!213) h2!214 (ite ((_ is Node!1071) h1!213) (ite ((_ is Leaf!1070) h2!214) h1!213 (ite ((_ is Node!1071) h2!214) (ite (bvsgt (value!1073 h1!213) (value!1073 h2!214)) (makeT!219 (value!1073 h1!213) (left!1074 h1!213) (merge!215 (right!1075 h1!213) h2!214)) (makeT!219 (value!1073 h2!214) (left!1074 h2!214) (merge!215 h1!213 (right!1075 h2!214)))) error_value!1080)) error_value!1081))) ))
(assert (not (forall ((heap!221 Heap!1069) (element!220 (_ BitVec 32))) (or (hasLeftistProperty!210 heap!221) (= (bvadd (heapSize!212 heap!221) (_ bv1 32)) (heapSize!212 (merge!215 (Node!1071 (_ bv1 32) element!220 Leaf!1070 Leaf!1070) heap!221)))) )))
(check-sat)
(exit)

