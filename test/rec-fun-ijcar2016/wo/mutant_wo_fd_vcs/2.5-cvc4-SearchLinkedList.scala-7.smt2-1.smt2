(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!929 0)) (((Cons!930 (head!931 (_ BitVec 32)) (tail!932 List!929)) (Nil!933))
))
(declare-fun error_value!934 () Int)
(declare-fun error_value!935 () Bool)
(declare-fun error_value!936 () Bool)
(declare-fun error_value!937 () Int)
(declare-fun firstZero!211 (List!929) Int)
(declare-fun contains!209 (List!929 (_ BitVec 32)) Bool)
(declare-fun firstZeroAtPos!214 (List!929 Int) Bool)
(declare-fun size!206 (List!929) Int)
(assert (forall ((list!210 List!929)) (= (firstZero!211 list!210) (ite ((_ is Nil!933) list!210) (- 0) (ite ((_ is Cons!930) list!210) (ite (= (head!931 list!210) (_ bv0 32)) (- 0) (+ (firstZero!211 (tail!932 list!210)) 1)) error_value!934))) ))
(assert (forall ((list!207 List!929) (elem!208 (_ BitVec 32))) (= (contains!209 list!207 elem!208) (ite ((_ is Nil!933) list!207) false (ite ((_ is Cons!930) list!207) (or (or (= (head!931 list!207) elem!208) (= (head!931 list!207) elem!208)) (contains!209 (tail!932 list!207) elem!208)) error_value!935))) ))
(assert (forall ((list!212 List!929) (pos!213 Int)) (= (firstZeroAtPos!214 list!212 pos!213) (ite ((_ is Nil!933) list!212) false (ite ((_ is Cons!930) list!212) (ite (= pos!213 (- 0)) (= (head!931 list!212) (_ bv0 32)) (and (and (not (= (head!931 list!212) (_ bv0 32))) (not (= (head!931 list!212) (_ bv0 32)))) (firstZeroAtPos!214 (tail!932 list!212) (- pos!213 1)))) error_value!936))) ))
(assert (forall ((list!205 List!929)) (= (size!206 list!205) (ite ((_ is Nil!933) list!205) (- 0) (ite ((_ is Cons!930) list!205) (+ 1 (size!206 (tail!932 list!205))) error_value!937))) ))
(assert (not (forall ((list!215 List!929)) (ite (firstZeroAtPos!214 list!215 (firstZero!211 list!215)) (contains!209 list!215 (_ bv0 32)) (= (firstZero!211 list!215) (size!206 list!215))) )))
(check-sat)
(exit)

