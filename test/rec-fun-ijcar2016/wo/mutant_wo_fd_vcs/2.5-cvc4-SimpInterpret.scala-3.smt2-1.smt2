(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((IntTree!973 0)(BoolTree!987 0)) (((Const!974 (c!975 (_ BitVec 32))) (If!976 (cond!977 BoolTree!987) (t!978 IntTree!973) (e!979 IntTree!973)) (Minus!980 (t1!981 IntTree!973) (t2!982 IntTree!973)) (Plus!983 (t1!984 IntTree!973) (t2!985 IntTree!973)) (Var!986))
((And!988 (t1!989 BoolTree!987) (t2!990 BoolTree!987)) (Eq!991 (t1!992 IntTree!973) (t2!993 IntTree!973)) (Less!994 (t1!995 IntTree!973) (t2!996 IntTree!973)) (Not!997 (t!998 BoolTree!987)))
))
(declare-fun repOk!206 (IntTree!973) Bool)
(declare-fun error_value!999 () (_ BitVec 32))
(declare-fun error_value!1000 () Bool)
(declare-fun computesPositive!215 (IntTree!973) Bool)
(declare-fun ieval!213 (IntTree!973 (_ BitVec 32)) (_ BitVec 32))
(declare-fun beval!210 (BoolTree!987 (_ BitVec 32)) Bool)
(declare-fun identityForPositive!217 (IntTree!973) Bool)
(assert (forall ((t!205 IntTree!973)) (= (repOk!206 t!205) true) ))
(assert (forall ((t!214 IntTree!973)) (= (computesPositive!215 t!214) (and (and (and (and (and (bvsge (ieval!213 t!214 (_ bv0 32)) (_ bv0 32)) (bvsge (ieval!213 t!214 (_ bv0 32)) (_ bv0 32))) (bvsge (ieval!213 t!214 (_ bv1 32)) (_ bv0 32))) (bvsge (ieval!213 t!214 (_ bv4294967295 32)) (_ bv0 32))) (bvsge (ieval!213 t!214 (_ bv4294967294 32)) (_ bv0 32))) (bvsge (ieval!213 t!214 (_ bv2 32)) (_ bv0 32)))) ))
(assert (forall ((t!211 IntTree!973) (x0!212 (_ BitVec 32))) (= (ieval!213 t!211 x0!212) (ite ((_ is Const!974) t!211) (c!975 t!211) (ite ((_ is Var!986) t!211) x0!212 (ite ((_ is Plus!983) t!211) (bvadd (ieval!213 (t1!984 t!211) x0!212) (ieval!213 (t2!985 t!211) x0!212)) (ite ((_ is Minus!980) t!211) (bvsub (ieval!213 (t1!981 t!211) x0!212) (ieval!213 (t2!982 t!211) x0!212)) (ite ((_ is If!976) t!211) (ite (beval!210 (cond!977 t!211) x0!212) (ieval!213 (t!978 t!211) x0!212) (ieval!213 (e!979 t!211) x0!212)) error_value!999)))))) ))
(assert (forall ((t!208 BoolTree!987) (x0!209 (_ BitVec 32))) (= (beval!210 t!208 x0!209) (ite ((_ is Less!994) t!208) (bvslt (ieval!213 (t1!995 t!208) x0!209) (ieval!213 (t2!996 t!208) x0!209)) (ite ((_ is Eq!991) t!208) (= (ieval!213 (t1!992 t!208) x0!209) (ieval!213 (t2!993 t!208) x0!209)) (ite ((_ is And!988) t!208) (and (and (beval!210 (t1!989 t!208) x0!209) (beval!210 (t1!989 t!208) x0!209)) (beval!210 (t2!990 t!208) x0!209)) (ite ((_ is Not!997) t!208) (not (beval!210 (t!998 t!208) x0!209)) error_value!1000))))) ))
(assert (forall ((t!216 IntTree!973)) (= (identityForPositive!217 t!216) (and (and (and (and (and (= (ieval!213 t!216 (_ bv5 32)) (_ bv5 32)) (= (ieval!213 t!216 (_ bv5 32)) (_ bv5 32))) (= (ieval!213 t!216 (_ bv33 32)) (_ bv33 32))) (= (ieval!213 t!216 (_ bv0 32)) (_ bv0 32))) (= (ieval!213 t!216 (_ bv4294967295 32)) (_ bv1 32))) (= (ieval!213 t!216 (_ bv4294967294 32)) (_ bv2 32)))) ))
(assert (not (forall ((t!218 IntTree!973)) (or (not (computesPositive!215 t!218)) (not (identityForPositive!217 t!218)) (not (repOk!206 t!218))) )))
(check-sat)
(exit)

