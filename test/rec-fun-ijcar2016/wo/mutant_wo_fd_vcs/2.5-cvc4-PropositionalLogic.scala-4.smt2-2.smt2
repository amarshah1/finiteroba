(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Formula!989 0)) (((And!990 (lhs!991 Formula!989) (rhs!992 Formula!989)) (Implies!993 (lhs!994 Formula!989) (rhs!995 Formula!989)) (Literal!996 (id!997 (_ BitVec 32))) (Not!998 (f!999 Formula!989)) (Or!1000 (lhs!1001 Formula!989) (rhs!1002 Formula!989)))
))
(declare-fun error_value!1003 () Bool)
(declare-fun isNNF!212 (Formula!989) Bool)
(declare-fun error_value!1004 () Formula!989)
(declare-fun nnf!210 (Formula!989) Formula!989)
(declare-fun error_value!1005 () Formula!989)
(assert (forall ((f!211 Formula!989)) (= (isNNF!212 f!211) (ite ((_ is And!990) f!211) (and (and (isNNF!212 (lhs!991 f!211)) (isNNF!212 (lhs!991 f!211))) (isNNF!212 (rhs!992 f!211))) (ite ((_ is Or!1000) f!211) (and (and (isNNF!212 (lhs!1001 f!211)) (isNNF!212 (lhs!1001 f!211))) (isNNF!212 (rhs!1002 f!211))) (ite ((_ is Implies!993) f!211) (and (and (isNNF!212 (lhs!994 f!211)) (isNNF!212 (lhs!994 f!211))) (isNNF!212 (rhs!995 f!211))) (ite (and (and ((_ is Not!998) f!211) ((_ is Not!998) f!211)) ((_ is Literal!996) (f!999 f!211))) true (ite ((_ is Not!998) f!211) false (ite ((_ is Literal!996) f!211) true error_value!1003))))))) ))
(assert (forall ((formula!209 Formula!989)) (= (nnf!210 formula!209) (ite ((_ is And!990) formula!209) (And!990 (nnf!210 (lhs!991 formula!209)) (nnf!210 (rhs!992 formula!209))) (ite ((_ is Or!1000) formula!209) (Or!1000 (nnf!210 (lhs!1001 formula!209)) (nnf!210 (rhs!1002 formula!209))) (ite ((_ is Implies!993) formula!209) (Implies!993 (nnf!210 (lhs!994 formula!209)) (nnf!210 (rhs!995 formula!209))) (ite (and (and ((_ is Not!998) formula!209) ((_ is Not!998) formula!209)) ((_ is And!990) (f!999 formula!209))) (Or!1000 (nnf!210 (Not!998 (lhs!991 (f!999 formula!209)))) (nnf!210 (Not!998 (rhs!992 (f!999 formula!209))))) (ite (and (and ((_ is Not!998) formula!209) ((_ is Not!998) formula!209)) ((_ is Or!1000) (f!999 formula!209))) (And!990 (nnf!210 (Not!998 (lhs!1001 (f!999 formula!209)))) (nnf!210 (Not!998 (rhs!1002 (f!999 formula!209))))) (ite (and (and ((_ is Not!998) formula!209) ((_ is Not!998) formula!209)) ((_ is Implies!993) (f!999 formula!209))) (And!990 (nnf!210 (lhs!994 (f!999 formula!209))) (nnf!210 (Not!998 (rhs!995 (f!999 formula!209))))) (ite (and (and ((_ is Not!998) formula!209) ((_ is Not!998) formula!209)) ((_ is Not!998) (f!999 formula!209))) (nnf!210 (f!999 (f!999 formula!209))) (ite (and (and ((_ is Not!998) formula!209) ((_ is Not!998) formula!209)) ((_ is Literal!996) (f!999 formula!209))) formula!209 (ite ((_ is Literal!996) formula!209) formula!209 error_value!1004)))))))))) ))
(assert (not (forall ((formula!209 Formula!989)) (isNNF!212 (ite ((_ is And!990) formula!209) (And!990 (nnf!210 (lhs!991 formula!209)) (nnf!210 (rhs!992 formula!209))) (ite ((_ is Or!1000) formula!209) (Or!1000 (nnf!210 (lhs!1001 formula!209)) (nnf!210 (rhs!1002 formula!209))) (ite ((_ is Implies!993) formula!209) (Implies!993 (nnf!210 (lhs!994 formula!209)) (nnf!210 (nnf!210 (Not!998 (rhs!1002 (f!999 formula!209)))))) (ite (and ((_ is And!990) (f!999 formula!209)) ((_ is Not!998) formula!209)) (Or!1000 (nnf!210 (Not!998 (lhs!991 (f!999 formula!209)))) (nnf!210 (Not!998 (rhs!992 (f!999 formula!209))))) (ite (and ((_ is Or!1000) (f!999 formula!209)) ((_ is Not!998) formula!209)) (And!990 (nnf!210 (Not!998 (lhs!1001 (f!999 formula!209)))) (rhs!995 formula!209)) (ite (and ((_ is Implies!993) (f!999 formula!209)) ((_ is Not!998) formula!209)) (And!990 (nnf!210 (lhs!994 (f!999 formula!209))) (nnf!210 (Not!998 (rhs!995 (f!999 formula!209))))) (ite (and ((_ is Not!998) (f!999 formula!209)) ((_ is Not!998) formula!209)) (nnf!210 (f!999 (f!999 formula!209))) (ite (and ((_ is Literal!996) (f!999 formula!209)) ((_ is Not!998) formula!209)) formula!209 (ite ((_ is Literal!996) formula!209) formula!209 error_value!1005)))))))))) )))
(check-sat)
(exit)

