(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2264 0)(Nat!2269 0)) (((cons!2265 (head!2266 Nat!2269) (tail!2267 Lst!2264)) (nil!2268))
((succ!2270 (pred!2271 Nat!2269)) (zero!2272))
))
(declare-fun error_value!2273 () Lst!2264)
(declare-fun butlast!267 (Lst!2264) Lst!2264)
(declare-fun error_value!2274 () Lst!2264)
(declare-fun take!260 (Nat!2269 Lst!2264) Lst!2264)
(declare-fun error_value!2275 () Nat!2269)
(declare-fun minus!240 (Nat!2269 Nat!2269) Nat!2269)
(declare-fun error_value!2276 () Nat!2269)
(declare-fun len!254 (Lst!2264) Nat!2269)
(assert (forall ((l!266 Lst!2264)) (= (butlast!267 l!266) (ite ((_ is nil!2268) l!266) nil!2268 (ite ((_ is cons!2265) l!266) (ite (= (tail!2267 l!266) nil!2268) nil!2268 (cons!2265 (head!2266 l!266) (butlast!267 (tail!2267 l!266)))) error_value!2273))) ))
(assert (forall ((n!258 Nat!2269) (l!259 Lst!2264)) (= (take!260 n!258 l!259) (ite ((_ is nil!2268) l!259) nil!2268 (ite ((_ is zero!2272) n!258) nil!2268 (ite (and (and ((_ is succ!2270) n!258) ((_ is succ!2270) n!258)) ((_ is cons!2265) l!259)) (cons!2265 (head!2266 l!259) (take!260 (pred!2271 n!258) (tail!2267 l!259))) error_value!2274)))) ))
(assert (forall ((x!238 Nat!2269) (y!239 Nat!2269)) (= (minus!240 x!238 y!239) (ite ((_ is zero!2272) x!238) zero!2272 (ite ((_ is zero!2272) y!239) x!238 (ite (and (and ((_ is succ!2270) x!238) ((_ is succ!2270) x!238)) ((_ is succ!2270) y!239)) (minus!240 (pred!2271 x!238) (pred!2271 y!239)) error_value!2275)))) ))
(assert (forall ((l!253 Lst!2264)) (= (len!254 l!253) (ite ((_ is nil!2268) l!253) zero!2272 (ite ((_ is cons!2265) l!253) (succ!2270 (len!254 (tail!2267 l!253))) error_value!2276))) ))
(assert (not (forall ((xs!440 Lst!2264)) (= xs!440 (take!260 (minus!240 (len!254 (butlast!267 xs!440)) (succ!2270 zero!2272)) xs!440)) )))
(check-sat)
(exit)

