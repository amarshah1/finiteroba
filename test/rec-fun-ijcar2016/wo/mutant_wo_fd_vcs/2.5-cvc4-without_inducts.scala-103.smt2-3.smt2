(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2501 0)) (((succ!2502 (pred!2503 Nat!2501)) (zero!2504))
))
(declare-datatypes ((Lst!2505 0)) (((cons!2506 (head!2507 Nat!2501) (tail!2508 Lst!2505)) (nil!2509))
))
(declare-fun error_value!2510 () Bool)
(declare-fun mem!270 (Nat!2501 Lst!2505) Bool)
(declare-fun error_value!2511 () Lst!2505)
(declare-fun error_value!2512 () Bool)
(declare-fun insort!281 (Nat!2501 Lst!2505) Lst!2505)
(declare-fun less!231 (Nat!2501 Nat!2501) Bool)
(assert (forall ((n!268 Nat!2501) (l!269 Lst!2505)) (= (mem!270 n!268 l!269) (ite ((_ is nil!2509) l!269) false (ite ((_ is cons!2506) l!269) (or (or (= n!268 (head!2507 l!269)) (= n!268 (head!2507 l!269))) (mem!270 n!268 (tail!2508 l!269))) error_value!2510))) ))
(assert (forall ((n!279 Nat!2501) (l!280 Lst!2505)) (= (insort!281 n!279 l!280) (ite ((_ is nil!2509) l!280) (cons!2506 n!279 nil!2509) (ite ((_ is cons!2506) l!280) (ite (less!231 n!279 (head!2507 l!280)) (cons!2506 n!279 (cons!2506 (head!2507 l!280) (tail!2508 l!280))) (cons!2506 (head!2507 l!280) (insort!281 n!279 (tail!2508 l!280)))) error_value!2511))) ))
(assert (forall ((x!229 Nat!2501) (y!230 Nat!2501)) (= (less!231 x!229 y!230) (ite ((_ is zero!2504) y!230) false (ite (and (and ((_ is zero!2504) x!229) ((_ is zero!2504) x!229)) ((_ is succ!2502) y!230)) true (ite (and (and ((_ is succ!2502) x!229) ((_ is succ!2502) x!229)) ((_ is succ!2502) y!230)) (less!231 (pred!2503 x!229) (pred!2503 y!230)) error_value!2512)))) ))
(assert (not (forall ((x!510 Nat!2501) (y!511 Nat!2501) (l!512 Lst!2505)) (or (= (mem!270 x!510 (insort!281 x!510 l!512)) (mem!270 y!511 l!512)) (= x!510 y!511)) )))
(check-sat)
(exit)

