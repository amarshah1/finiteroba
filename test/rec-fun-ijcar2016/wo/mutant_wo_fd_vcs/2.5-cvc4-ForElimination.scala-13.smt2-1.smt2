(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Statement!1828 0)(Expression!1850 0)(List!1889 0)) (((Assign!1829 (varID!1830 (_ BitVec 32)) (expr!1831 Expression!1850)) (Block!1832 (body!1833 List!1889)) (For!1834 (init!1835 Statement!1828) (expr!1836 Expression!1850) (step!1837 Statement!1828) (body!1838 Statement!1828)) (IfThenElse!1839 (expr!1840 Expression!1850) (then!1841 Statement!1828) (elze!1842 Statement!1828)) (Print!1843 (msg!1844 (_ BitVec 32)) (varID!1845 (_ BitVec 32))) (Skip!1846) (While!1847 (expr!1848 Expression!1850) (body!1849 Statement!1828)))
((And!1851 (lhs!1852 Expression!1850) (rhs!1853 Expression!1850)) (Division!1854 (lhs!1855 Expression!1850) (rhs!1856 Expression!1850)) (Equals!1857 (lhs!1858 Expression!1850) (rhs!1859 Expression!1850)) (GreaterThan!1860 (lhs!1861 Expression!1850) (rhs!1862 Expression!1850)) (IntLiteral!1863 (value!1864 (_ BitVec 32))) (LessThan!1865 (lhs!1866 Expression!1850) (rhs!1867 Expression!1850)) (Minus!1868 (lhs!1869 Expression!1850) (rhs!1870 Expression!1850)) (Modulo!1871 (lhs!1872 Expression!1850) (rhs!1873 Expression!1850)) (Neg!1874 (expr!1875 Expression!1850)) (Not!1876 (expr!1877 Expression!1850)) (Or!1878 (lhs!1879 Expression!1850) (rhs!1880 Expression!1850)) (Plus!1881 (lhs!1882 Expression!1850) (rhs!1883 Expression!1850)) (Times!1884 (lhs!1885 Expression!1850) (rhs!1886 Expression!1850)) (Var!1887 (varID!1888 (_ BitVec 32))))
((Cons!1890 (head!1891 Statement!1828) (tail!1892 List!1889)) (Nil!1893))
))
(declare-fun error_value!1894 () Bool)
(declare-fun isForFree!225 (Statement!1828) Bool)
(declare-fun isForFreeList!223 (List!1889) Bool)
(declare-fun error_value!1895 () List!1889)
(declare-fun eliminateForLoopsList!215 (List!1889) List!1889)
(declare-fun eliminateForLoops!217 (Statement!1828) Statement!1828)
(assert (forall ((stat!224 Statement!1828)) (= (isForFree!225 stat!224) (ite ((_ is Block!1832) stat!224) (isForFreeList!223 (body!1833 stat!224)) (ite ((_ is IfThenElse!1839) stat!224) (and (and (isForFree!225 (then!1841 stat!224)) (isForFree!225 (then!1841 stat!224))) (isForFree!225 (elze!1842 stat!224))) (ite ((_ is While!1847) stat!224) (isForFree!225 (body!1849 stat!224)) (ite ((_ is For!1834) stat!224) false true))))) ))
(assert (forall ((l!222 List!1889)) (= (isForFreeList!223 l!222) (ite ((_ is Nil!1893) l!222) true (ite ((_ is Cons!1890) l!222) (and (and (isForFree!225 (head!1891 l!222)) (isForFree!225 (head!1891 l!222))) (isForFreeList!223 (tail!1892 l!222))) error_value!1894))) ))
(assert (forall ((l!214 List!1889)) (= (eliminateForLoopsList!215 l!214) (ite ((_ is Nil!1893) l!214) Nil!1893 (ite ((_ is Cons!1890) l!214) (Cons!1890 (eliminateForLoops!217 (head!1891 l!214)) (eliminateForLoopsList!215 (tail!1892 l!214))) error_value!1895))) ))
(assert (forall ((stat!216 Statement!1828)) (= (eliminateForLoops!217 stat!216) (ite ((_ is Block!1832) stat!216) (Block!1832 (eliminateForLoopsList!215 (body!1833 stat!216))) (ite ((_ is IfThenElse!1839) stat!216) (IfThenElse!1839 (expr!1840 stat!216) (eliminateForLoops!217 (then!1841 stat!216)) (eliminateForLoops!217 (elze!1842 stat!216))) (ite ((_ is While!1847) stat!216) (While!1847 (expr!1848 stat!216) (eliminateForLoops!217 (body!1849 stat!216))) (ite ((_ is For!1834) stat!216) (Block!1832 (Cons!1890 (eliminateForLoops!217 (init!1835 stat!216)) (Cons!1890 (While!1847 (expr!1836 stat!216) (Block!1832 (Cons!1890 (eliminateForLoops!217 (body!1838 stat!216)) (Cons!1890 (eliminateForLoops!217 (step!1837 stat!216)) Nil!1893)))) Nil!1893))) stat!216))))) ))
(assert (not (forall ((BOUND_VARIABLE_732 Expression!1850) (BOUND_VARIABLE_733 Statement!1828)) (or (not (isForFree!225 (ite ((_ is Block!1832) BOUND_VARIABLE_733) (Block!1832 (eliminateForLoopsList!215 (Cons!1890 (eliminateForLoops!217 (body!1838 BOUND_VARIABLE_733)) (Cons!1890 (eliminateForLoops!217 (step!1837 BOUND_VARIABLE_733)) Nil!1893)))) (ite ((_ is IfThenElse!1839) BOUND_VARIABLE_733) (IfThenElse!1839 (expr!1840 BOUND_VARIABLE_733) (eliminateForLoops!217 (then!1841 BOUND_VARIABLE_733)) (eliminateForLoops!217 (elze!1842 BOUND_VARIABLE_733))) (ite ((_ is While!1847) BOUND_VARIABLE_733) (While!1847 (expr!1848 BOUND_VARIABLE_733) (eliminateForLoops!217 (body!1849 BOUND_VARIABLE_733))) (ite ((_ is For!1834) BOUND_VARIABLE_733) (Block!1832 (Cons!1890 (eliminateForLoops!217 (init!1835 BOUND_VARIABLE_733)) (Cons!1890 (While!1847 (expr!1836 BOUND_VARIABLE_733) (Block!1832 (body!1833 BOUND_VARIABLE_733))) Nil!1893))) BOUND_VARIABLE_733)))))) (isForFree!225 (While!1847 BOUND_VARIABLE_732 (eliminateForLoops!217 BOUND_VARIABLE_733)))) )))
(check-sat)
(exit)

