(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Tree!1306 0)) (((Leaf!1307) (Node!1308 (left!1309 Tree!1306) (value!1310 (_ BitVec 32)) (right!1311 Tree!1306) (rank!1312 (_ BitVec 32))))
))
(declare-fun error_value!1313 () Bool)
(declare-fun error_value!1314 () (_ BitVec 32))
(declare-fun rankHeight!234 (Tree!1306) Bool)
(declare-fun height!226 (Tree!1306) (_ BitVec 32))
(declare-fun error_value!1315 () (_ BitVec 32))
(declare-fun error_value!1316 () Bool)
(declare-fun error_value!1317 () Bool)
(declare-fun error_value!1318 () (_ BitVec 32))
(declare-fun rank!222 (Tree!1306) (_ BitVec 32))
(declare-fun offByOne!244 (Tree!1306) Bool)
(declare-fun isAVL!238 (Tree!1306) Bool)
(declare-fun balanceFactor!236 (Tree!1306) (_ BitVec 32))
(declare-fun rotateLeft!256 (Tree!1306) Tree!1306)
(declare-fun max!219 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun rotateRight!254 (Tree!1306) Tree!1306)
(declare-fun error_value!1319 () Tree!1306)
(assert (forall ((t!233 Tree!1306)) (= (rankHeight!234 t!233) (ite ((_ is Leaf!1307) t!233) true (ite ((_ is Node!1308) t!233) (and (and (and (rankHeight!234 (left!1309 t!233)) (rankHeight!234 (left!1309 t!233))) (rankHeight!234 (right!1311 t!233))) (= (rank!1312 t!233) (height!226 t!233))) error_value!1313))) ))
(assert (forall ((t!225 Tree!1306)) (= (height!226 t!225) (ite ((_ is Leaf!1307) t!225) (_ bv0 32) (ite ((_ is Node!1308) t!225) (ite (bvsgt (height!226 (left!1309 t!225)) (height!226 (right!1311 t!225))) (bvadd (height!226 (left!1309 t!225)) (_ bv1 32)) (bvadd (height!226 (right!1311 t!225)) (_ bv1 32))) error_value!1314))) ))
(assert (forall ((t!221 Tree!1306)) (= (rank!222 t!221) (ite ((_ is Leaf!1307) t!221) (_ bv0 32) (ite ((_ is Node!1308) t!221) (rank!1312 t!221) error_value!1315))) ))
(assert (forall ((t!243 Tree!1306)) (= (offByOne!244 t!243) (ite ((_ is Leaf!1307) t!243) true (ite ((_ is Node!1308) t!243) (and (and (and (and (isAVL!238 (left!1309 t!243)) (isAVL!238 (left!1309 t!243))) (isAVL!238 (right!1311 t!243))) (bvsge (balanceFactor!236 t!243) (_ bv4294967294 32))) (bvsle (balanceFactor!236 t!243) (_ bv2 32))) error_value!1316))) ))
(assert (forall ((t!237 Tree!1306)) (= (isAVL!238 t!237) (ite ((_ is Leaf!1307) t!237) true (ite ((_ is Node!1308) t!237) (and (and (and (and (and (isAVL!238 (left!1309 t!237)) (isAVL!238 (left!1309 t!237))) (isAVL!238 (right!1311 t!237))) (bvsge (balanceFactor!236 t!237) (_ bv4294967295 32))) (bvsle (balanceFactor!236 t!237) (_ bv1 32))) (rankHeight!234 t!237)) error_value!1317))) ))
(assert (forall ((t!235 Tree!1306)) (= (balanceFactor!236 t!235) (ite ((_ is Leaf!1307) t!235) (_ bv0 32) (ite ((_ is Node!1308) t!235) (bvsub (rank!222 (left!1309 t!235)) (rank!222 (right!1311 t!235))) error_value!1318))) ))
(assert (forall ((t!255 Tree!1306)) (= (rotateLeft!256 t!255) (ite (and (and ((_ is Node!1308) t!255) ((_ is Node!1308) t!255)) ((_ is Node!1308) (right!1311 t!255))) (Node!1308 (Node!1308 (left!1309 t!255) (value!1310 t!255) (left!1309 (right!1311 t!255)) (bvadd (max!219 (rank!222 (left!1309 t!255)) (rank!222 (left!1309 (right!1311 t!255)))) (_ bv1 32))) (value!1310 (right!1311 t!255)) (right!1311 (right!1311 t!255)) (bvadd (max!219 (bvadd (max!219 (rank!222 (left!1309 t!255)) (rank!222 (left!1309 (right!1311 t!255)))) (_ bv1 32)) (rank!222 (right!1311 (right!1311 t!255)))) (_ bv1 32))) t!255)) ))
(assert (forall ((i1!217 (_ BitVec 32)) (i2!218 (_ BitVec 32))) (= (max!219 i1!217 i2!218) (ite (bvsge i1!217 i2!218) i1!217 i2!218)) ))
(assert (forall ((t!253 Tree!1306)) (= (rotateRight!254 t!253) (ite (and (and ((_ is Node!1308) t!253) ((_ is Node!1308) t!253)) ((_ is Node!1308) (left!1309 t!253))) (Node!1308 (left!1309 (left!1309 t!253)) (value!1310 (left!1309 t!253)) (Node!1308 (right!1311 (left!1309 t!253)) (value!1310 t!253) (right!1311 t!253) (bvadd (max!219 (rank!222 (right!1311 (left!1309 t!253))) (rank!222 (right!1311 t!253))) (_ bv1 32))) (bvadd (max!219 (rank!222 (left!1309 (left!1309 t!253))) (bvadd (max!219 (rank!222 (right!1311 (left!1309 t!253))) (rank!222 (right!1311 t!253))) (_ bv1 32))) (_ bv1 32))) t!253)) ))
(assert (not (forall ((t!251 Tree!1306)) (or (not (offByOne!244 t!251)) (not (rankHeight!234 t!251)) (isAVL!238 (ite ((_ is Leaf!1307) t!251) Leaf!1307 (ite ((_ is Node!1308) t!251) (ite (bvslt (_ bv1 32) (balanceFactor!236 t!251)) (rotateRight!254 (Node!1308 (ite (bvslt (balanceFactor!236 (left!1309 t!251)) (_ bv0 32)) (rotateLeft!256 (left!1309 t!251)) (left!1309 t!251)) (value!1310 t!251) (right!1311 t!251) (bvadd (max!219 (rank!222 (ite (bvslt (balanceFactor!236 (left!1309 t!251)) (_ bv0 32)) (rotateLeft!256 (left!1309 t!251)) (left!1309 t!251))) (rank!222 (right!1311 t!251))) (_ bv1 32)))) (ite (bvslt (balanceFactor!236 t!251) (_ bv4294967295 32)) (rotateLeft!256 (ite (bvslt (_ bv0 32) (balanceFactor!236 (right!1311 t!251))) (rotateRight!254 (right!1311 t!251)) (right!1311 t!251))) t!251)) error_value!1319)))) )))
(check-sat)
(exit)

