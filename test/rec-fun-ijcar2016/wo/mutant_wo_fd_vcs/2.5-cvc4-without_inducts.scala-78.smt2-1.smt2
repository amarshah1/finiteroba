(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Tree!2228 0)(Nat!2234 0)) (((leaf!2229) (node!2230 (data!2231 Nat!2234) (left!2232 Tree!2228) (right!2233 Tree!2228)))
((succ!2235 (pred!2236 Nat!2234)) (zero!2237))
))
(declare-fun error_value!2238 () Nat!2234)
(declare-fun error_value!2239 () Bool)
(declare-fun height!303 (Tree!2228) Nat!2234)
(declare-fun nmax!246 (Nat!2234 Nat!2234) Nat!2234)
(declare-fun less!231 (Nat!2234 Nat!2234) Bool)
(declare-fun error_value!2240 () Tree!2228)
(declare-fun mirror!301 (Tree!2228) Tree!2228)
(assert (forall ((t!302 Tree!2228)) (= (height!303 t!302) (ite ((_ is leaf!2229) t!302) zero!2237 (ite ((_ is node!2230) t!302) (succ!2235 (nmax!246 (height!303 (left!2232 t!302)) (height!303 (right!2233 t!302)))) error_value!2238))) ))
(assert (forall ((n!244 Nat!2234) (m!245 Nat!2234)) (= (nmax!246 n!244 m!245) (ite (less!231 n!244 m!245) m!245 n!244)) ))
(assert (forall ((x!229 Nat!2234) (y!230 Nat!2234)) (= (less!231 x!229 y!230) (ite ((_ is zero!2237) y!230) false (ite (and (and ((_ is zero!2237) x!229) ((_ is zero!2237) x!229)) ((_ is succ!2235) y!230)) true (ite (and (and ((_ is succ!2235) x!229) ((_ is succ!2235) x!229)) ((_ is succ!2235) y!230)) (less!231 (pred!2236 x!229) (pred!2236 y!230)) error_value!2239)))) ))
(assert (forall ((t!300 Tree!2228)) (= (mirror!301 t!300) (ite ((_ is leaf!2229) t!300) leaf!2229 (ite ((_ is node!2230) t!300) (node!2230 (data!2231 t!300) (mirror!301 (right!2233 t!300)) (mirror!301 (left!2232 t!300))) error_value!2240))) ))
(assert (not (forall ((a!433 Tree!2228)) (= (height!303 a!433) (height!303 (mirror!301 a!433))) )))
(check-sat)
(exit)

