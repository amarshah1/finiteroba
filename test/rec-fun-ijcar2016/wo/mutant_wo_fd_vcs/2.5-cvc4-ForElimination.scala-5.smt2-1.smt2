(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!1285 0)(Statement!1290 0)(Expression!1312 0)) (((Cons!1286 (head!1287 Statement!1290) (tail!1288 List!1285)) (Nil!1289))
((Assign!1291 (varID!1292 (_ BitVec 32)) (expr!1293 Expression!1312)) (Block!1294 (body!1295 List!1285)) (For!1296 (init!1297 Statement!1290) (expr!1298 Expression!1312) (step!1299 Statement!1290) (body!1300 Statement!1290)) (IfThenElse!1301 (expr!1302 Expression!1312) (then!1303 Statement!1290) (elze!1304 Statement!1290)) (Print!1305 (msg!1306 (_ BitVec 32)) (varID!1307 (_ BitVec 32))) (Skip!1308) (While!1309 (expr!1310 Expression!1312) (body!1311 Statement!1290)))
((And!1313 (lhs!1314 Expression!1312) (rhs!1315 Expression!1312)) (Division!1316 (lhs!1317 Expression!1312) (rhs!1318 Expression!1312)) (Equals!1319 (lhs!1320 Expression!1312) (rhs!1321 Expression!1312)) (GreaterThan!1322 (lhs!1323 Expression!1312) (rhs!1324 Expression!1312)) (IntLiteral!1325 (value!1326 (_ BitVec 32))) (LessThan!1327 (lhs!1328 Expression!1312) (rhs!1329 Expression!1312)) (Minus!1330 (lhs!1331 Expression!1312) (rhs!1332 Expression!1312)) (Modulo!1333 (lhs!1334 Expression!1312) (rhs!1335 Expression!1312)) (Neg!1336 (expr!1337 Expression!1312)) (Not!1338 (expr!1339 Expression!1312)) (Or!1340 (lhs!1341 Expression!1312) (rhs!1342 Expression!1312)) (Plus!1343 (lhs!1344 Expression!1312) (rhs!1345 Expression!1312)) (Times!1346 (lhs!1347 Expression!1312) (rhs!1348 Expression!1312)) (Var!1349 (varID!1350 (_ BitVec 32))))
))
(declare-fun error_value!1351 () Bool)
(declare-fun isForFreeList!223 (List!1285) Bool)
(declare-fun isForFree!225 (Statement!1290) Bool)
(declare-fun error_value!1352 () List!1285)
(declare-fun eliminateForLoops!217 (Statement!1290) Statement!1290)
(declare-fun eliminateForLoopsList!215 (List!1285) List!1285)
(declare-fun error_value!1353 () List!1285)
(assert (forall ((l!222 List!1285)) (= (isForFreeList!223 l!222) (ite ((_ is Nil!1289) l!222) true (ite ((_ is Cons!1286) l!222) (and (and (isForFree!225 (head!1287 l!222)) (isForFree!225 (head!1287 l!222))) (isForFreeList!223 (tail!1288 l!222))) error_value!1351))) ))
(assert (forall ((stat!224 Statement!1290)) (= (isForFree!225 stat!224) (ite ((_ is Block!1294) stat!224) (isForFreeList!223 (body!1295 stat!224)) (ite ((_ is IfThenElse!1301) stat!224) (and (and (isForFree!225 (then!1303 stat!224)) (isForFree!225 (then!1303 stat!224))) (isForFree!225 (elze!1304 stat!224))) (ite ((_ is While!1309) stat!224) (isForFree!225 (body!1311 stat!224)) (ite ((_ is For!1296) stat!224) false true))))) ))
(assert (forall ((stat!216 Statement!1290)) (= (eliminateForLoops!217 stat!216) (ite ((_ is Block!1294) stat!216) (Block!1294 (eliminateForLoopsList!215 (body!1295 stat!216))) (ite ((_ is IfThenElse!1301) stat!216) (IfThenElse!1301 (expr!1302 stat!216) (eliminateForLoops!217 (then!1303 stat!216)) (eliminateForLoops!217 (elze!1304 stat!216))) (ite ((_ is While!1309) stat!216) (While!1309 (expr!1310 stat!216) (eliminateForLoops!217 (body!1311 stat!216))) (ite ((_ is For!1296) stat!216) (Block!1294 (Cons!1286 (eliminateForLoops!217 (init!1297 stat!216)) (Cons!1286 (While!1309 (expr!1298 stat!216) (Block!1294 (Cons!1286 (eliminateForLoops!217 (body!1300 stat!216)) (Cons!1286 (eliminateForLoops!217 (step!1299 stat!216)) Nil!1289)))) Nil!1289))) stat!216))))) ))
(assert (forall ((l!214 List!1285)) (= (eliminateForLoopsList!215 l!214) (ite ((_ is Nil!1289) l!214) Nil!1289 (ite ((_ is Cons!1286) l!214) (Cons!1286 (eliminateForLoops!217 (head!1287 l!214)) (eliminateForLoopsList!215 (tail!1288 l!214))) error_value!1352))) ))
(assert (not (forall ((l!214 List!1285)) (isForFreeList!223 (ite ((_ is Cons!1286) l!214) Nil!1289 (ite ((_ is Nil!1289) l!214) (Cons!1286 (eliminateForLoops!217 (head!1287 l!214)) (eliminateForLoopsList!215 (tail!1288 l!214))) error_value!1353))) )))
(check-sat)
(exit)

