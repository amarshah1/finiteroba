(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((List!1258 0)) (((Cons!1259 (head!1260 (_ BitVec 32)) (tail!1261 List!1258)) (Nil!1262))
))
(declare-fun error_value!1263 () (_ BitVec 32))
(declare-fun listSize!229 (List!1258) (_ BitVec 32))
(declare-datatypes ((Heap!1264 0)) (((Leaf!1265) (Node!1266 (rk!1267 (_ BitVec 32)) (value!1268 (_ BitVec 32)) (left!1269 Heap!1264) (right!1270 Heap!1264)))
))
(declare-fun error_value!1271 () (_ BitVec 32))
(declare-fun error_value!1272 () Bool)
(declare-fun error_value!1273 () (_ BitVec 32))
(declare-fun error_value!1274 () (_ BitVec 32))
(declare-fun error_value!1275 () Heap!1264)
(declare-fun error_value!1276 () Heap!1264)
(declare-fun error_value!1277 () Heap!1264)
(declare-fun insert!222 ((_ BitVec 32) Heap!1264) Heap!1264)
(declare-fun heapSize!212 (Heap!1264) (_ BitVec 32))
(declare-fun hasLeftistProperty!210 (Heap!1264) Bool)
(declare-fun rightHeight!206 (Heap!1264) (_ BitVec 32))
(declare-fun makeT!219 ((_ BitVec 32) Heap!1264 Heap!1264) Heap!1264)
(declare-fun rank!208 (Heap!1264) (_ BitVec 32))
(declare-fun buildHeap!235 (List!1258 Heap!1264) Heap!1264)
(declare-fun merge!215 (Heap!1264 Heap!1264) Heap!1264)
(declare-fun error_value!1278 () (_ BitVec 32))
(declare-fun error_value!1279 () Heap!1264)
(declare-fun findMax!224 (Heap!1264) (_ BitVec 32))
(declare-fun removeMax!226 (Heap!1264) Heap!1264)
(declare-fun removeElements!232 (Heap!1264 List!1258) List!1258)
(assert (forall ((l!228 List!1258)) (= (listSize!229 l!228) (ite ((_ is Nil!1262) l!228) (_ bv0 32) (ite ((_ is Cons!1259) l!228) (bvadd (_ bv1 32) (listSize!229 (tail!1261 l!228))) error_value!1263))) ))
(assert (forall ((element!220 (_ BitVec 32)) (heap!221 Heap!1264)) (= (insert!222 element!220 heap!221) (merge!215 (Node!1266 (_ bv1 32) element!220 Leaf!1265 Leaf!1265) heap!221)) ))
(assert (forall ((t!211 Heap!1264)) (= (heapSize!212 t!211) (ite ((_ is Leaf!1265) t!211) (_ bv0 32) (ite ((_ is Node!1266) t!211) (bvadd (bvadd (heapSize!212 (left!1269 t!211)) (_ bv1 32)) (heapSize!212 (right!1270 t!211))) error_value!1271))) ))
(assert (forall ((h!209 Heap!1264)) (= (hasLeftistProperty!210 h!209) (ite ((_ is Leaf!1265) h!209) true (ite ((_ is Node!1266) h!209) (and (and (and (and (hasLeftistProperty!210 (left!1269 h!209)) (hasLeftistProperty!210 (left!1269 h!209))) (hasLeftistProperty!210 (right!1270 h!209))) (bvsge (rightHeight!206 (left!1269 h!209)) (rightHeight!206 (right!1270 h!209)))) (= (rank!208 h!209) (rightHeight!206 h!209))) error_value!1272))) ))
(assert (forall ((h!205 Heap!1264)) (= (rightHeight!206 h!205) (ite ((_ is Leaf!1265) h!205) (_ bv0 32) (ite ((_ is Node!1266) h!205) (bvadd (rightHeight!206 (right!1270 h!205)) (_ bv1 32)) error_value!1273))) ))
(assert (forall ((value!216 (_ BitVec 32)) (left!217 Heap!1264) (right!218 Heap!1264)) (= (makeT!219 value!216 left!217 right!218) (ite (bvsge (rank!208 left!217) (rank!208 right!218)) (Node!1266 (bvadd (rank!208 right!218) (_ bv1 32)) value!216 left!217 right!218) (Node!1266 (bvadd (rank!208 left!217) (_ bv1 32)) value!216 right!218 left!217))) ))
(assert (forall ((h!207 Heap!1264)) (= (rank!208 h!207) (ite ((_ is Leaf!1265) h!207) (_ bv0 32) (ite ((_ is Node!1266) h!207) (rk!1267 h!207) error_value!1274))) ))
(assert (forall ((l!233 List!1258) (h!234 Heap!1264)) (= (buildHeap!235 l!233 h!234) (ite ((_ is Nil!1262) l!233) h!234 (ite ((_ is Cons!1259) l!233) (buildHeap!235 (tail!1261 l!233) (insert!222 (head!1260 l!233) h!234)) error_value!1275))) ))
(assert (forall ((h1!213 Heap!1264) (h2!214 Heap!1264)) (= (merge!215 h1!213 h2!214) (ite ((_ is Leaf!1265) h1!213) h2!214 (ite ((_ is Node!1266) h1!213) (ite ((_ is Leaf!1265) h2!214) h1!213 (ite ((_ is Node!1266) h2!214) (ite (bvsgt (value!1268 h1!213) (value!1268 h2!214)) (makeT!219 (value!1268 h1!213) (left!1269 h1!213) (merge!215 (right!1270 h1!213) h2!214)) (makeT!219 (value!1268 h2!214) (left!1269 h2!214) (merge!215 h1!213 (right!1270 h2!214)))) error_value!1276)) error_value!1277))) ))
(assert (forall ((h!223 Heap!1264)) (= (findMax!224 h!223) (ite ((_ is Node!1266) h!223) (value!1268 h!223) (ite ((_ is Leaf!1265) h!223) (_ bv4294966296 32) error_value!1278))) ))
(assert (forall ((h!225 Heap!1264)) (= (removeMax!226 h!225) (ite ((_ is Node!1266) h!225) (merge!215 (left!1269 h!225) (right!1270 h!225)) (ite ((_ is Leaf!1265) h!225) h!225 error_value!1279))) ))
(assert (forall ((h!230 Heap!1264) (l!231 List!1258)) (= (removeElements!232 h!230 l!231) (ite ((_ is Leaf!1265) h!230) l!231 (removeElements!232 (removeMax!226 h!230) (Cons!1259 (findMax!224 h!230) l!231)))) ))
(assert (exists ((l!236 List!1258)) (not (= (listSize!229 (removeElements!232 (buildHeap!235 l!236 Leaf!1265) Nil!1262)) (listSize!229 l!236))) ))
(check-sat)
(exit)

