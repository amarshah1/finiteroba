(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Tree!1062 0)) (((DivTree!1063 (left!1064 Tree!1062) (right!1065 Tree!1062)) (IntLitTree!1066 (value!1067 Bool)) (MinusTree!1068 (left!1069 Tree!1062) (right!1070 Tree!1062)) (PlusTree!1071 (left!1072 Tree!1062) (right!1073 Tree!1062)) (TimesTree!1074 (left!1075 Tree!1062) (right!1076 Tree!1062)))
))
(declare-datatypes ((TokenList!1077 0)(Token!1082 0)) (((Cons!1078 (head!1079 Token!1082) (tail!1080 TokenList!1077)) (Nil!1081))
((Div!1083) (IntLit!1084 (value!1085 Bool)) (LParen!1086) (Minus!1087) (Plus!1088) (RParen!1089) (Times!1090))
))
(declare-fun error_value!1091 () TokenList!1077)
(declare-fun error_value!1092 () TokenList!1077)
(declare-fun error_value!1093 () (_ BitVec 32))
(declare-fun print!216 (Tree!1062) TokenList!1077)
(declare-fun append!209 (TokenList!1077 TokenList!1077) TokenList!1077)
(declare-fun size!206 (TokenList!1077) (_ BitVec 32))
(assert (forall ((tree!215 Tree!1062)) (= (print!216 tree!215) (ite ((_ is IntLitTree!1066) tree!215) (Cons!1078 (IntLit!1084 (value!1067 tree!215)) Nil!1081) (ite ((_ is PlusTree!1071) tree!215) (append!209 (print!216 (left!1072 tree!215)) (Cons!1078 Plus!1088 (print!216 (right!1073 tree!215)))) (ite ((_ is MinusTree!1068) tree!215) (append!209 (print!216 (left!1069 tree!215)) (Cons!1078 Minus!1087 (print!216 (right!1070 tree!215)))) (ite ((_ is TimesTree!1074) tree!215) (append!209 (print!216 (left!1075 tree!215)) (Cons!1078 Times!1090 (print!216 (right!1076 tree!215)))) (ite ((_ is DivTree!1063) tree!215) (append!209 (print!216 (left!1064 tree!215)) (Cons!1078 Div!1083 (print!216 (right!1065 tree!215)))) error_value!1091)))))) ))
(assert (forall ((l1!207 TokenList!1077) (l2!208 TokenList!1077)) (= (append!209 l1!207 l2!208) (ite ((_ is Nil!1081) l1!207) l2!208 (ite ((_ is Cons!1078) l1!207) (Cons!1078 (head!1079 l1!207) (append!209 (tail!1080 l1!207) l2!208)) error_value!1092))) ))
(assert (forall ((l!205 TokenList!1077)) (= (size!206 l!205) (ite ((_ is Nil!1081) l!205) (_ bv0 32) (ite ((_ is Cons!1078) l!205) (bvadd (_ bv1 32) (size!206 (tail!1080 l!205))) error_value!1093))) ))
(assert (exists ((tree!220 Tree!1062)) (not (not (= (print!216 tree!220) (Cons!1078 (IntLit!1084 false) (Cons!1078 Plus!1088 (Cons!1078 (IntLit!1084 true) Nil!1081)))))) ))
(check-sat)
(exit)

