(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Statement!1217 0)(Expression!1239 0)(List!1278 0)) (((Assign!1218 (varID!1219 (_ BitVec 32)) (expr!1220 Expression!1239)) (Block!1221 (body!1222 List!1278)) (For!1223 (init!1224 Statement!1217) (expr!1225 Expression!1239) (step!1226 Statement!1217) (body!1227 Statement!1217)) (IfThenElse!1228 (expr!1229 Expression!1239) (then!1230 Statement!1217) (elze!1231 Statement!1217)) (Print!1232 (msg!1233 (_ BitVec 32)) (varID!1234 (_ BitVec 32))) (Skip!1235) (While!1236 (expr!1237 Expression!1239) (body!1238 Statement!1217)))
((And!1240 (lhs!1241 Expression!1239) (rhs!1242 Expression!1239)) (Division!1243 (lhs!1244 Expression!1239) (rhs!1245 Expression!1239)) (Equals!1246 (lhs!1247 Expression!1239) (rhs!1248 Expression!1239)) (GreaterThan!1249 (lhs!1250 Expression!1239) (rhs!1251 Expression!1239)) (IntLiteral!1252 (value!1253 (_ BitVec 32))) (LessThan!1254 (lhs!1255 Expression!1239) (rhs!1256 Expression!1239)) (Minus!1257 (lhs!1258 Expression!1239) (rhs!1259 Expression!1239)) (Modulo!1260 (lhs!1261 Expression!1239) (rhs!1262 Expression!1239)) (Neg!1263 (expr!1264 Expression!1239)) (Not!1265 (expr!1266 Expression!1239)) (Or!1267 (lhs!1268 Expression!1239) (rhs!1269 Expression!1239)) (Plus!1270 (lhs!1271 Expression!1239) (rhs!1272 Expression!1239)) (Times!1273 (lhs!1274 Expression!1239) (rhs!1275 Expression!1239)) (Var!1276 (varID!1277 (_ BitVec 32))))
((Cons!1279 (head!1280 Statement!1217) (tail!1281 List!1278)) (Nil!1282))
))
(declare-fun error_value!1283 () Bool)
(declare-fun isWhileFree!221 (Statement!1217) Bool)
(declare-fun isWhileFreeList!219 (List!1278) Bool)
(declare-fun error_value!1284 () List!1278)
(declare-fun eliminateWhileLoopsList!211 (List!1278) List!1278)
(declare-fun eliminateWhileLoops!213 (Statement!1217) Statement!1217)
(assert (forall ((stat!220 Statement!1217)) (= (isWhileFree!221 stat!220) (ite ((_ is Block!1221) stat!220) (isWhileFreeList!219 (body!1222 stat!220)) (ite ((_ is IfThenElse!1228) stat!220) (and (and (isWhileFree!221 (then!1230 stat!220)) (isWhileFree!221 (then!1230 stat!220))) (isWhileFree!221 (elze!1231 stat!220))) (ite ((_ is While!1236) stat!220) false (ite ((_ is For!1223) stat!220) (and (and (and (isWhileFree!221 (init!1224 stat!220)) (isWhileFree!221 (init!1224 stat!220))) (isWhileFree!221 (step!1226 stat!220))) (isWhileFree!221 (body!1227 stat!220))) true))))) ))
(assert (forall ((l!218 List!1278)) (= (isWhileFreeList!219 l!218) (ite ((_ is Nil!1282) l!218) true (ite ((_ is Cons!1279) l!218) (and (and (isWhileFree!221 (head!1280 l!218)) (isWhileFree!221 (head!1280 l!218))) (isWhileFreeList!219 (tail!1281 l!218))) error_value!1283))) ))
(assert (forall ((l!210 List!1278)) (= (eliminateWhileLoopsList!211 l!210) (ite ((_ is Nil!1282) l!210) Nil!1282 (ite ((_ is Cons!1279) l!210) (Cons!1279 (eliminateWhileLoops!213 (head!1280 l!210)) (eliminateWhileLoopsList!211 (tail!1281 l!210))) error_value!1284))) ))
(assert (forall ((stat!212 Statement!1217)) (= (eliminateWhileLoops!213 stat!212) (ite ((_ is Block!1221) stat!212) (Block!1221 (eliminateWhileLoopsList!211 (body!1222 stat!212))) (ite ((_ is IfThenElse!1228) stat!212) (IfThenElse!1228 (expr!1229 stat!212) (eliminateWhileLoops!213 (then!1230 stat!212)) (eliminateWhileLoops!213 (elze!1231 stat!212))) (ite ((_ is While!1236) stat!212) (For!1223 Skip!1235 (expr!1237 stat!212) Skip!1235 (eliminateWhileLoops!213 (body!1238 stat!212))) (ite ((_ is For!1223) stat!212) (For!1223 (eliminateWhileLoops!213 (init!1224 stat!212)) (expr!1225 stat!212) (eliminateWhileLoops!213 (step!1226 stat!212)) (eliminateWhileLoops!213 (body!1227 stat!212))) stat!212))))) ))
(assert (exists ((stat!212 Statement!1217)) (not (isWhileFree!221 (ite ((_ is Block!1221) stat!212) (Block!1221 (eliminateWhileLoopsList!211 (body!1222 stat!212))) (ite ((_ is IfThenElse!1228) stat!212) (IfThenElse!1228 (expr!1229 stat!212) (eliminateWhileLoops!213 (then!1230 stat!212)) (eliminateWhileLoops!213 (elze!1231 stat!212))) (ite ((_ is While!1236) stat!212) (For!1223 Skip!1235 (expr!1237 stat!212) Skip!1235 (eliminateWhileLoops!213 (body!1238 stat!212))) (ite ((_ is For!1223) stat!212) (For!1223 (eliminateWhileLoops!213 (init!1224 stat!212)) (expr!1225 stat!212) (eliminateWhileLoops!213 (step!1226 stat!212)) (eliminateWhileLoops!213 (body!1227 stat!212))) stat!212)))))) ))
(check-sat)
(exit)

