(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-sort T!204 0)
(declare-datatypes ((List!883 0)) (((Cons!884 (h!885 T!204) (t!886 List!883)) (Nil!887))
))
(declare-fun error_value!918 () List!883)
(declare-fun error_value!924 () Int)
(declare-fun List$map!899 (List!883 (Array T!204 T!204)) List!883)
(declare-fun List$$colon$colon!900 (List!883 T!204) List!883)
(declare-fun List$size!901 (List!883) Int)
(assert (forall (($this!888 List!883) (f!889 (Array T!204 T!204))) (= (List$map!899 $this!888 f!889) (ite ((_ is Nil!887) $this!888) Nil!887 (ite ((_ is Cons!884) $this!888) (List$$colon$colon!900 (List$map!899 (t!886 $this!888) f!889) (select f!889 (h!885 $this!888))) error_value!918))) ))
(assert (forall (($this!894 List!883) (t!895 T!204)) (= (List$$colon$colon!900 $this!894 t!895) (Cons!884 t!895 $this!894)) ))
(assert (forall (($this!896 List!883)) (= (List$size!901 $this!896) (ite ((_ is Nil!887) $this!896) (- 0) (ite ((_ is Cons!884) $this!896) (+ 1 (List$size!901 (t!886 $this!896))) error_value!924))) ))
(assert (exists ((l!205 List!883) (f!206 (Array T!204 T!204))) (not (= (List$map!899 l!205 f!206) (List$map!899 (List$map!899 l!205 f!206) f!206))) ))
(check-sat)
(exit)

