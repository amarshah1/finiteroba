(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((IntTree!977 0)(BoolTree!992 0)) (((Const!978 (c!979 (_ BitVec 32))) (If!980 (cond!981 BoolTree!992) (t!982 IntTree!977) (e!983 IntTree!977)) (Minus!984 (t1!985 IntTree!977) (t2!986 IntTree!977)) (Plus!987 (t1!988 IntTree!977) (t2!989 IntTree!977)) (Var!990 (index!991 (_ BitVec 32))))
((And!993 (t1!994 BoolTree!992) (t2!995 BoolTree!992)) (Eq!996 (t1!997 IntTree!977) (t2!998 IntTree!977)) (Less!999 (t1!1000 IntTree!977) (t2!1001 IntTree!977)) (Not!1002 (t!1003 BoolTree!992)))
))
(declare-fun repOk!206 (IntTree!977) Bool)
(declare-fun error_value!1004 () (_ BitVec 32))
(declare-fun error_value!1005 () Bool)
(declare-fun computesPositive!215 (IntTree!977) Bool)
(declare-fun ieval!213 (IntTree!977 (_ BitVec 32)) (_ BitVec 32))
(declare-fun beval!210 (BoolTree!992 (_ BitVec 32)) Bool)
(declare-fun identityForPositive!217 (IntTree!977) Bool)
(assert (forall ((t!205 IntTree!977)) (= (repOk!206 t!205) true) ))
(assert (forall ((t!214 IntTree!977)) (= (computesPositive!215 t!214) (and (and (and (bvsge (ieval!213 t!214 (_ bv0 32)) (_ bv0 32)) (bvsge (ieval!213 t!214 (_ bv0 32)) (_ bv0 32))) (bvsge (ieval!213 t!214 (_ bv1 32)) (_ bv0 32))) (bvsge (ieval!213 t!214 (_ bv2 32)) (_ bv0 32)))) ))
(assert (forall ((t!211 IntTree!977) (x0!212 (_ BitVec 32))) (= (ieval!213 t!211 x0!212) (ite ((_ is Const!978) t!211) (c!979 t!211) (ite ((_ is Var!990) t!211) (ite (= (index!991 t!211) (_ bv0 32)) x0!212 (_ bv0 32)) (ite ((_ is Plus!987) t!211) (bvadd (ieval!213 (t1!988 t!211) x0!212) (ieval!213 (t2!989 t!211) x0!212)) (ite ((_ is Minus!984) t!211) (bvsub (ieval!213 (t1!985 t!211) x0!212) (ieval!213 (t2!986 t!211) x0!212)) (ite ((_ is If!980) t!211) (ite (beval!210 (cond!981 t!211) x0!212) (ieval!213 (t!982 t!211) x0!212) (ieval!213 (e!983 t!211) x0!212)) error_value!1004)))))) ))
(assert (forall ((t!208 BoolTree!992) (x0!209 (_ BitVec 32))) (= (beval!210 t!208 x0!209) (ite ((_ is Less!999) t!208) (bvslt (ieval!213 (t1!1000 t!208) x0!209) (ieval!213 (t2!1001 t!208) x0!209)) (ite ((_ is Eq!996) t!208) (= (ieval!213 (t1!997 t!208) x0!209) (ieval!213 (t2!998 t!208) x0!209)) (ite ((_ is And!993) t!208) (and (and (beval!210 (t1!994 t!208) x0!209) (beval!210 (t1!994 t!208) x0!209)) (beval!210 (t2!995 t!208) x0!209)) (ite ((_ is Not!1002) t!208) (not (beval!210 (t!1003 t!208) x0!209)) error_value!1005))))) ))
(assert (forall ((t!216 IntTree!977)) (= (identityForPositive!217 t!216) (and (and (= (ieval!213 t!216 (_ bv5 32)) (_ bv5 32)) (= (ieval!213 t!216 (_ bv5 32)) (_ bv5 32))) (= (ieval!213 t!216 (_ bv33 32)) (_ bv33 32)))) ))
(assert (exists ((t!218 IntTree!977)) (not (not (and (and (and (repOk!206 t!218) (repOk!206 t!218)) (computesPositive!215 t!218)) (identityForPositive!217 t!218)))) ))
(check-sat)
(exit)

