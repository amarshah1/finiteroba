(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Lst!2577 0)(Nat!2582 0)) (((cons!2578 (head!2579 Nat!2582) (tail!2580 Lst!2577)) (nil!2581))
((succ!2583 (pred!2584 Nat!2582)) (zero!2585))
))
(declare-fun error_value!2586 () Bool)
(declare-fun error_value!2587 () Bool)
(declare-fun sorted!283 (Lst!2577) Bool)
(declare-fun leq!234 (Nat!2582 Nat!2582) Bool)
(declare-fun less!231 (Nat!2582 Nat!2582) Bool)
(declare-fun error_value!2588 () Lst!2577)
(declare-fun error_value!2589 () Lst!2577)
(declare-fun sort!285 (Lst!2577) Lst!2577)
(declare-fun insort!281 (Nat!2582 Lst!2577) Lst!2577)
(assert (forall ((l!282 Lst!2577)) (= (sorted!283 l!282) (ite ((_ is nil!2581) l!282) true (ite (and (and ((_ is cons!2578) l!282) ((_ is cons!2578) l!282)) ((_ is nil!2581) (tail!2580 l!282))) true (ite (and (and ((_ is cons!2578) l!282) ((_ is cons!2578) l!282)) ((_ is cons!2578) (tail!2580 l!282))) (and (and (sorted!283 (cons!2578 (head!2579 (tail!2580 l!282)) (tail!2580 (tail!2580 l!282)))) (sorted!283 (cons!2578 (head!2579 (tail!2580 l!282)) (tail!2580 (tail!2580 l!282))))) (leq!234 (head!2579 l!282) (head!2579 (tail!2580 l!282)))) error_value!2586)))) ))
(assert (forall ((x!232 Nat!2582) (y!233 Nat!2582)) (= (leq!234 x!232 y!233) (or (or (= x!232 y!233) (= x!232 y!233)) (less!231 x!232 y!233))) ))
(assert (forall ((x!229 Nat!2582) (y!230 Nat!2582)) (= (less!231 x!229 y!230) (ite ((_ is zero!2585) y!230) false (ite (and (and ((_ is zero!2585) x!229) ((_ is zero!2585) x!229)) ((_ is succ!2583) y!230)) true (ite (and (and ((_ is succ!2583) x!229) ((_ is succ!2583) x!229)) ((_ is succ!2583) y!230)) (less!231 (pred!2584 x!229) (pred!2584 y!230)) error_value!2587)))) ))
(assert (forall ((l!284 Lst!2577)) (= (sort!285 l!284) (ite ((_ is nil!2581) l!284) nil!2581 (ite ((_ is cons!2578) l!284) (insort!281 (head!2579 l!284) (sort!285 (tail!2580 l!284))) error_value!2588))) ))
(assert (forall ((n!279 Nat!2582) (l!280 Lst!2577)) (= (insort!281 n!279 l!280) (ite ((_ is nil!2581) l!280) (cons!2578 n!279 nil!2581) (ite ((_ is cons!2578) l!280) (ite (less!231 n!279 (head!2579 l!280)) (cons!2578 n!279 (cons!2578 (head!2579 l!280) (tail!2580 l!280))) (cons!2578 (head!2579 l!280) (insort!281 n!279 (tail!2580 l!280)))) error_value!2589))) ))
(assert (exists ((l!531 Lst!2577)) (not (sorted!283 (sort!285 l!531))) ))
(check-sat)
(exit)

