(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Nat!2528 0)) (((succ!2529 (pred!2530 Nat!2528)) (zero!2531))
))
(declare-datatypes ((Lst!2532 0)) (((cons!2533 (head!2534 Nat!2528) (tail!2535 Lst!2532)) (nil!2536))
))
(declare-fun error_value!2537 () Lst!2532)
(declare-fun error_value!2538 () Lst!2532)
(declare-fun rev!275 (Lst!2532) Lst!2532)
(declare-fun append!252 (Lst!2532 Lst!2532) Lst!2532)
(declare-fun error_value!2539 () Lst!2532)
(declare-fun take!260 (Nat!2528 Lst!2532) Lst!2532)
(declare-fun error_value!2540 () Lst!2532)
(declare-fun drop!257 (Nat!2528 Lst!2532) Lst!2532)
(declare-fun error_value!2541 () Nat!2528)
(declare-fun minus!240 (Nat!2528 Nat!2528) Nat!2528)
(declare-fun error_value!2542 () Nat!2528)
(declare-fun len!254 (Lst!2532) Nat!2528)
(assert (forall ((l!274 Lst!2532)) (= (rev!275 l!274) (ite ((_ is nil!2536) l!274) nil!2536 (ite ((_ is cons!2533) l!274) (append!252 (rev!275 (tail!2535 l!274)) (cons!2533 (head!2534 l!274) nil!2536)) error_value!2537))) ))
(assert (forall ((l1!250 Lst!2532) (l2!251 Lst!2532)) (= (append!252 l1!250 l2!251) (ite ((_ is nil!2536) l1!250) l2!251 (ite ((_ is cons!2533) l1!250) (cons!2533 (head!2534 l1!250) (append!252 (tail!2535 l1!250) l2!251)) error_value!2538))) ))
(assert (forall ((n!258 Nat!2528) (l!259 Lst!2532)) (= (take!260 n!258 l!259) (ite ((_ is nil!2536) l!259) nil!2536 (ite ((_ is zero!2531) n!258) nil!2536 (ite (and (and ((_ is succ!2529) n!258) ((_ is succ!2529) n!258)) ((_ is cons!2533) l!259)) (cons!2533 (head!2534 l!259) (take!260 (pred!2530 n!258) (tail!2535 l!259))) error_value!2539)))) ))
(assert (forall ((n!255 Nat!2528) (l!256 Lst!2532)) (= (drop!257 n!255 l!256) (ite ((_ is nil!2536) l!256) nil!2536 (ite ((_ is zero!2531) n!255) l!256 (ite (and (and ((_ is succ!2529) n!255) ((_ is succ!2529) n!255)) ((_ is cons!2533) l!256)) (drop!257 (pred!2530 n!255) (tail!2535 l!256)) error_value!2540)))) ))
(assert (forall ((x!238 Nat!2528) (y!239 Nat!2528)) (= (minus!240 x!238 y!239) (ite ((_ is zero!2531) x!238) zero!2531 (ite ((_ is zero!2531) y!239) x!238 (ite (and (and ((_ is succ!2529) x!238) ((_ is succ!2529) x!238)) ((_ is succ!2529) y!239)) (minus!240 (pred!2530 x!238) (pred!2530 y!239)) error_value!2541)))) ))
(assert (forall ((l!253 Lst!2532)) (= (len!254 l!253) (ite ((_ is nil!2536) l!253) zero!2531 (ite ((_ is cons!2533) l!253) (succ!2529 (len!254 (tail!2535 l!253))) error_value!2542))) ))
(assert (exists ((i!517 Nat!2528) (xs!518 Lst!2532)) (not (= (rev!275 (take!260 i!517 xs!518)) (drop!257 (minus!240 (len!254 xs!518) i!517) (rev!275 xs!518)))) ))
(check-sat)
(exit)

