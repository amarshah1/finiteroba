(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((Heap!937 0)) (((Leaf!938) (Node!939 (rk!940 (_ BitVec 32)) (value!941 (_ BitVec 32)) (left!942 Heap!937) (right!943 Heap!937)))
))
(declare-fun error_value!944 () Bool)
(declare-fun error_value!945 () (_ BitVec 32))
(declare-fun hasLeftistProperty!208 (Heap!937) Bool)
(declare-fun rightHeight!206 (Heap!937) (_ BitVec 32))
(declare-fun error_value!946 () (_ BitVec 32))
(declare-fun size!210 (Heap!937) (_ BitVec 32))
(declare-fun error_value!947 () Heap!937)
(declare-fun error_value!948 () Heap!937)
(declare-fun makeT!219 ((_ BitVec 32) Heap!937 Heap!937) Heap!937)
(declare-fun merge!215 (Heap!937 Heap!937) Heap!937)
(declare-fun error_value!949 () Heap!937)
(assert (forall ((h!207 Heap!937)) (= (hasLeftistProperty!208 h!207) (ite ((_ is Leaf!938) h!207) true (ite ((_ is Node!939) h!207) (and (and (and (hasLeftistProperty!208 (left!942 h!207)) (hasLeftistProperty!208 (left!942 h!207))) (hasLeftistProperty!208 (right!943 h!207))) (bvsge (rightHeight!206 (left!942 h!207)) (rightHeight!206 (right!943 h!207)))) error_value!944))) ))
(assert (forall ((h!205 Heap!937)) (= (rightHeight!206 h!205) (ite ((_ is Leaf!938) h!205) (_ bv0 32) (ite ((_ is Node!939) h!205) (bvadd (rightHeight!206 (right!943 h!205)) (_ bv1 32)) error_value!945))) ))
(assert (forall ((t!209 Heap!937)) (= (size!210 t!209) (ite ((_ is Leaf!938) t!209) (_ bv0 32) (ite ((_ is Node!939) t!209) (bvadd (bvadd (size!210 (left!942 t!209)) (_ bv1 32)) (size!210 (right!943 t!209))) error_value!946))) ))
(assert (forall ((value!216 (_ BitVec 32)) (left!217 Heap!937) (right!218 Heap!937)) (= (makeT!219 value!216 left!217 right!218) (ite (bvsge (rightHeight!206 left!217) (rightHeight!206 right!218)) (Node!939 (bvadd (rightHeight!206 right!218) (_ bv1 32)) value!216 left!217 right!218) (Node!939 (bvadd (rightHeight!206 left!217) (_ bv1 32)) value!216 right!218 left!217))) ))
(assert (forall ((h1!213 Heap!937) (h2!214 Heap!937)) (= (merge!215 h1!213 h2!214) (ite ((_ is Leaf!938) h1!213) h2!214 (ite ((_ is Node!939) h1!213) (ite ((_ is Leaf!938) h2!214) h1!213 (ite ((_ is Node!939) h2!214) (ite (bvsgt (value!941 h1!213) (value!941 h2!214)) (makeT!219 (value!941 h1!213) (left!942 h1!213) (merge!215 (right!943 h1!213) h2!214)) (makeT!219 (value!941 h2!214) (left!942 h2!214) (merge!215 h1!213 (right!943 h2!214)))) error_value!947)) error_value!948))) ))
(assert (exists ((h!211 Heap!937)) (not (=> (hasLeftistProperty!208 h!211) (bvsge (size!210 (ite ((_ is Node!939) h!211) (merge!215 (left!942 h!211) (right!943 h!211)) (ite ((_ is Leaf!938) h!211) h!211 error_value!949))) (bvsub (size!210 h!211) (_ bv1 32))))) ))
(check-sat)
(exit)

