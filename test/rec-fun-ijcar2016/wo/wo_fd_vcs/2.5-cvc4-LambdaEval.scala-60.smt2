(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTLIA)
(set-info :source |
Generated by: Andrew Reynolds
Generated on: 2017-04-28
Generator: Nunchaku, Leon, CVC4, converted to v2.6 by CVC4
Application: Counterexample generation for higher-order theorem provers
Target solver: CVC4, Z3
Publications: "Model Finding for Recursive Functions in SMT" by Andrew Reynolds, Jasmin Christian Blanchette, Simon Cruanes, and Cesare Tinelli, IJCAR 2016.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)


(declare-datatypes ((StoreExprPairAbs!3799 0)(List!3803 0)(BindingPairAbs!3808 0)(Expr!3812 0)) (((StoreExprPair!3800 (store!3801 List!3803) (expr!3802 Expr!3812)))
((Cons!3804 (head!3805 BindingPairAbs!3808) (tail!3806 List!3803)) (Nil!3807))
((BindingPair!3809 (key!3810 (_ BitVec 32)) (value!3811 Expr!3812)))
((App!3813 (lhs!3814 Expr!3812) (rhs!3815 Expr!3812)) (Const!3816 (value!3817 (_ BitVec 32))) (Fst!3818 (e!3819 Expr!3812)) (Lam!3820 (x!3821 (_ BitVec 32)) (body!3822 Expr!3812)) (Pair!3823 (fst!3824 Expr!3812) (snd!3825 Expr!3812)) (Plus!3826 (lhs!3827 Expr!3812) (rhs!3828 Expr!3812)) (Snd!3829 (e!3830 Expr!3812)) (Var!3831 (name!3832 (_ BitVec 32))))
))
(declare-fun error_value!3833 () Bool)
(declare-fun error_value!3834 () Bool)
(declare-fun error_value!3835 () Bool)
(declare-fun error_value!3836 () Expr!3812)
(declare-fun error_value!3837 () (_ BitVec 32))
(declare-fun error_value!3838 () (_ BitVec 32))
(declare-fun error_value!3839 () List!3803)
(declare-fun error_value!3840 () (_ BitVec 32))
(declare-fun error_value!3841 () Expr!3812)
(declare-fun error_value!3842 () Expr!3812)
(declare-fun error_value!3843 () Expr!3812)
(declare-fun error_value!3844 () Expr!3812)
(declare-fun error_value!3845 () StoreExprPairAbs!3799)
(declare-fun error_value!3846 () StoreExprPairAbs!3799)
(declare-fun error_value!3847 () StoreExprPairAbs!3799)
(declare-fun error_value!3848 () Bool)
(declare-fun wellFormed!222 (List!3803 Expr!3812) Bool)
(declare-fun contains!216 (List!3803 (_ BitVec 32)) Bool)
(declare-fun isValue!206 (Expr!3812) Bool)
(declare-fun find!219 ((_ BitVec 32) List!3803) Expr!3812)
(declare-fun eval!226 (List!3803 Expr!3812) StoreExprPairAbs!3799)
(declare-fun storeHasValues!213 (List!3803) Bool)
(declare-fun error_value!3849 () Bool)
(assert (forall ((store!220 List!3803) (expr!221 Expr!3812)) (= (wellFormed!222 store!220 expr!221) (ite ((_ is Const!3816) expr!221) true (ite ((_ is Plus!3826) expr!221) (and (and (and (wellFormed!222 store!220 (lhs!3827 expr!221)) (wellFormed!222 store!220 (lhs!3827 expr!221))) (wellFormed!222 store!220 (rhs!3828 expr!221))) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!220 (lhs!3827 expr!221))) ((_ is StoreExprPair!3800) (eval!226 store!220 (lhs!3827 expr!221)))) ((_ is Const!3816) (expr!3802 (eval!226 store!220 (lhs!3827 expr!221))))) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!220 (rhs!3828 expr!221))) ((_ is StoreExprPair!3800) (eval!226 store!220 (rhs!3828 expr!221)))) ((_ is Const!3816) (expr!3802 (eval!226 store!220 (rhs!3828 expr!221))))) true false) false)) (ite ((_ is Lam!3820) expr!221) (wellFormed!222 (Cons!3804 (BindingPair!3809 (x!3821 expr!221) (Const!3816 (_ bv0 32))) store!220) (body!3822 expr!221)) (ite ((_ is Pair!3823) expr!221) (and (and (wellFormed!222 store!220 (fst!3824 expr!221)) (wellFormed!222 store!220 (fst!3824 expr!221))) (wellFormed!222 store!220 (snd!3825 expr!221))) (ite ((_ is Var!3831) expr!221) (contains!216 store!220 (name!3832 expr!221)) (ite ((_ is App!3813) expr!221) (and (and (and (wellFormed!222 store!220 (lhs!3814 expr!221)) (wellFormed!222 store!220 (lhs!3814 expr!221))) (wellFormed!222 store!220 (rhs!3815 expr!221))) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!220 (lhs!3814 expr!221))) ((_ is StoreExprPair!3800) (eval!226 store!220 (lhs!3814 expr!221)))) ((_ is Lam!3820) (expr!3802 (eval!226 store!220 (lhs!3814 expr!221))))) true false)) (ite ((_ is Fst!3818) expr!221) (and (and (wellFormed!222 store!220 (e!3819 expr!221)) (wellFormed!222 store!220 (e!3819 expr!221))) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!220 (e!3819 expr!221))) ((_ is StoreExprPair!3800) (eval!226 store!220 (e!3819 expr!221)))) ((_ is Pair!3823) (expr!3802 (eval!226 store!220 (e!3819 expr!221))))) true false)) (ite ((_ is Snd!3829) expr!221) (and (and (wellFormed!222 store!220 (e!3830 expr!221)) (wellFormed!222 store!220 (e!3830 expr!221))) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!220 (e!3830 expr!221))) ((_ is StoreExprPair!3800) (eval!226 store!220 (e!3830 expr!221)))) ((_ is Pair!3823) (expr!3802 (eval!226 store!220 (e!3830 expr!221))))) true false)) error_value!3833))))))))) ))
(assert (forall ((store!214 List!3803) (key!215 (_ BitVec 32))) (= (contains!216 store!214 key!215) (ite ((_ is Nil!3807) store!214) false (ite (and (and ((_ is Cons!3804) store!214) ((_ is Cons!3804) store!214)) ((_ is BindingPair!3809) (head!3805 store!214))) (or (or (= (key!3810 (head!3805 store!214)) key!215) (= (key!3810 (head!3805 store!214)) key!215)) (contains!216 (tail!3806 store!214) key!215)) error_value!3834))) ))
(assert (forall ((expr!205 Expr!3812)) (= (isValue!206 expr!205) (ite ((_ is Const!3816) expr!205) true (ite ((_ is Lam!3820) expr!205) true (ite ((_ is Pair!3823) expr!205) (and (and (isValue!206 (fst!3824 expr!205)) (isValue!206 (fst!3824 expr!205))) (isValue!206 (snd!3825 expr!205))) (ite ((_ is Var!3831) expr!205) false (ite ((_ is Plus!3826) expr!205) false (ite ((_ is App!3813) expr!205) false (ite ((_ is Fst!3818) expr!205) false (ite ((_ is Snd!3829) expr!205) false error_value!3835))))))))) ))
(assert (forall ((x!217 (_ BitVec 32)) (l!218 List!3803)) (= (find!219 x!217 l!218) (ite (and (and ((_ is Cons!3804) l!218) ((_ is Cons!3804) l!218)) ((_ is BindingPair!3809) (head!3805 l!218))) (ite (= (key!3810 (head!3805 l!218)) x!217) (value!3811 (head!3805 l!218)) (find!219 x!217 (tail!3806 l!218))) error_value!3836)) ))
(assert (forall ((store!223 List!3803) (expr!224 Expr!3812)) (= (eval!226 store!223 expr!224) (ite ((_ is Const!3816) expr!224) (StoreExprPair!3800 store!223 (Const!3816 (value!3817 expr!224))) (ite ((_ is Var!3831) expr!224) (StoreExprPair!3800 store!223 (find!219 (name!3832 expr!224) store!223)) (ite ((_ is Plus!3826) expr!224) (StoreExprPair!3800 store!223 (Const!3816 (bvadd (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3827 expr!224))) ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3827 expr!224)))) ((_ is Const!3816) (expr!3802 (eval!226 store!223 (lhs!3827 expr!224))))) (value!3817 (expr!3802 (eval!226 store!223 (lhs!3827 expr!224)))) error_value!3837) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!223 (rhs!3828 expr!224))) ((_ is StoreExprPair!3800) (eval!226 store!223 (rhs!3828 expr!224)))) ((_ is Const!3816) (expr!3802 (eval!226 store!223 (rhs!3828 expr!224))))) (value!3817 (expr!3802 (eval!226 store!223 (rhs!3828 expr!224)))) error_value!3838)))) (ite ((_ is App!3813) expr!224) (eval!226 (Cons!3804 (BindingPair!3809 (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3814 expr!224))) ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3814 expr!224)))) ((_ is Lam!3820) (expr!3802 (eval!226 store!223 (lhs!3814 expr!224))))) (x!3821 (expr!3802 (eval!226 store!223 (lhs!3814 expr!224)))) error_value!3840) (ite ((_ is StoreExprPair!3800) (eval!226 store!223 (rhs!3815 expr!224))) (expr!3802 (eval!226 store!223 (rhs!3815 expr!224))) error_value!3842)) (ite ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3814 expr!224))) (store!3801 (eval!226 store!223 (lhs!3814 expr!224))) error_value!3839)) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3814 expr!224))) ((_ is StoreExprPair!3800) (eval!226 store!223 (lhs!3814 expr!224)))) ((_ is Lam!3820) (expr!3802 (eval!226 store!223 (lhs!3814 expr!224))))) (body!3822 (expr!3802 (eval!226 store!223 (lhs!3814 expr!224)))) error_value!3841)) (ite ((_ is Lam!3820) expr!224) (StoreExprPair!3800 store!223 (Lam!3820 (x!3821 expr!224) (body!3822 expr!224))) (ite ((_ is Pair!3823) expr!224) (StoreExprPair!3800 store!223 (Pair!3823 (ite ((_ is StoreExprPair!3800) (eval!226 store!223 (fst!3824 expr!224))) (expr!3802 (eval!226 store!223 (fst!3824 expr!224))) error_value!3843) (ite ((_ is StoreExprPair!3800) (eval!226 store!223 (snd!3825 expr!224))) (expr!3802 (eval!226 store!223 (snd!3825 expr!224))) error_value!3844))) (ite ((_ is Fst!3818) expr!224) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!223 (e!3819 expr!224))) ((_ is StoreExprPair!3800) (eval!226 store!223 (e!3819 expr!224)))) ((_ is Pair!3823) (expr!3802 (eval!226 store!223 (e!3819 expr!224))))) (StoreExprPair!3800 store!223 (fst!3824 (expr!3802 (eval!226 store!223 (e!3819 expr!224))))) error_value!3845) (ite ((_ is Snd!3829) expr!224) (ite (and (and ((_ is StoreExprPair!3800) (eval!226 store!223 (e!3830 expr!224))) ((_ is StoreExprPair!3800) (eval!226 store!223 (e!3830 expr!224)))) ((_ is Pair!3823) (expr!3802 (eval!226 store!223 (e!3830 expr!224))))) (StoreExprPair!3800 store!223 (snd!3825 (expr!3802 (eval!226 store!223 (e!3830 expr!224))))) error_value!3846) error_value!3847))))))))) ))
(assert (forall ((store!212 List!3803)) (= (storeHasValues!213 store!212) (ite ((_ is Nil!3807) store!212) true (ite (and (and ((_ is Cons!3804) store!212) ((_ is Cons!3804) store!212)) ((_ is BindingPair!3809) (head!3805 store!212))) (and (and (isValue!206 (value!3811 (head!3805 store!212))) (isValue!206 (value!3811 (head!3805 store!212)))) (storeHasValues!213 (tail!3806 store!212))) error_value!3848))) ))
(assert (not (ite ((_ is StoreExprPair!3800) (eval!226 (Cons!3804 (BindingPair!3809 (_ bv358 32) (Const!3816 (_ bv349 32))) Nil!3807) (Const!3816 (_ bv1 32)))) (isValue!206 (expr!3802 (eval!226 (Cons!3804 (BindingPair!3809 (_ bv358 32) (Const!3816 (_ bv349 32))) Nil!3807) (Const!3816 (_ bv1 32))))) error_value!3849)))
(check-sat)
(exit)

